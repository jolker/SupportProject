/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUserMiniProfile implements org.apache.thrift.TBase<TUserMiniProfile, TUserMiniProfile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserMiniProfile");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_PACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appPackageId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("appPlatform", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField N_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("nCoin", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField USER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("userGroup", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SHOW_PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("showPayment", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField REGISTER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("registerDate", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("userIP", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField UTM_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("utm_source", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("campaign", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_PLAY_GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPlayGameId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CURRENT_GAME_ROOM_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentGameRoomMoney", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MONEY_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRequired", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserMiniProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserMiniProfileTupleSchemeFactory());
  }

  public long userId; // required
  public String userName; // required
  public String appPackageId; // required
  public String appPlatform; // required
  public String appVersion; // required
  public long nCoin; // required
  /**
   * 
   * @see EUserGroup
   */
  public EUserGroup userGroup; // required
  public boolean showPayment; // required
  public long registerDate; // required
  public String sessionID; // required
  public String userIP; // required
  public String utm_source; // required
  public String campaign; // required
  public int currentPlayGameId; // required
  public int currentGameRoomMoney; // required
  public long moneyRequired; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    APP_PACKAGE_ID((short)3, "appPackageId"),
    APP_PLATFORM((short)4, "appPlatform"),
    APP_VERSION((short)5, "appVersion"),
    N_COIN((short)6, "nCoin"),
    /**
     * 
     * @see EUserGroup
     */
    USER_GROUP((short)7, "userGroup"),
    SHOW_PAYMENT((short)8, "showPayment"),
    REGISTER_DATE((short)9, "registerDate"),
    SESSION_ID((short)10, "sessionID"),
    USER_IP((short)11, "userIP"),
    UTM_SOURCE((short)12, "utm_source"),
    CAMPAIGN((short)13, "campaign"),
    CURRENT_PLAY_GAME_ID((short)14, "currentPlayGameId"),
    CURRENT_GAME_ROOM_MONEY((short)15, "currentGameRoomMoney"),
    MONEY_REQUIRED((short)16, "moneyRequired");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // APP_PACKAGE_ID
          return APP_PACKAGE_ID;
        case 4: // APP_PLATFORM
          return APP_PLATFORM;
        case 5: // APP_VERSION
          return APP_VERSION;
        case 6: // N_COIN
          return N_COIN;
        case 7: // USER_GROUP
          return USER_GROUP;
        case 8: // SHOW_PAYMENT
          return SHOW_PAYMENT;
        case 9: // REGISTER_DATE
          return REGISTER_DATE;
        case 10: // SESSION_ID
          return SESSION_ID;
        case 11: // USER_IP
          return USER_IP;
        case 12: // UTM_SOURCE
          return UTM_SOURCE;
        case 13: // CAMPAIGN
          return CAMPAIGN;
        case 14: // CURRENT_PLAY_GAME_ID
          return CURRENT_PLAY_GAME_ID;
        case 15: // CURRENT_GAME_ROOM_MONEY
          return CURRENT_GAME_ROOM_MONEY;
        case 16: // MONEY_REQUIRED
          return MONEY_REQUIRED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __NCOIN_ISSET_ID = 1;
  private static final int __SHOWPAYMENT_ISSET_ID = 2;
  private static final int __REGISTERDATE_ISSET_ID = 3;
  private static final int __CURRENTPLAYGAMEID_ISSET_ID = 4;
  private static final int __CURRENTGAMEROOMMONEY_ISSET_ID = 5;
  private static final int __MONEYREQUIRED_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_PACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("appPackageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("appPlatform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.N_COIN, new org.apache.thrift.meta_data.FieldMetaData("nCoin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("userGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EUserGroup.class)));
    tmpMap.put(_Fields.SHOW_PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("showPayment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REGISTER_DATE, new org.apache.thrift.meta_data.FieldMetaData("registerDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("userIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTM_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("utm_source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMPAIGN, new org.apache.thrift.meta_data.FieldMetaData("campaign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_PLAY_GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("currentPlayGameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_GAME_ROOM_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currentGameRoomMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONEY_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("moneyRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserMiniProfile.class, metaDataMap);
  }

  public TUserMiniProfile() {
  }

  public TUserMiniProfile(
    long userId,
    String userName,
    String appPackageId,
    String appPlatform,
    String appVersion,
    long nCoin,
    EUserGroup userGroup,
    boolean showPayment,
    long registerDate,
    String sessionID,
    String userIP,
    String utm_source,
    String campaign,
    int currentPlayGameId,
    int currentGameRoomMoney,
    long moneyRequired)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.appPackageId = appPackageId;
    this.appPlatform = appPlatform;
    this.appVersion = appVersion;
    this.nCoin = nCoin;
    setNCoinIsSet(true);
    this.userGroup = userGroup;
    this.showPayment = showPayment;
    setShowPaymentIsSet(true);
    this.registerDate = registerDate;
    setRegisterDateIsSet(true);
    this.sessionID = sessionID;
    this.userIP = userIP;
    this.utm_source = utm_source;
    this.campaign = campaign;
    this.currentPlayGameId = currentPlayGameId;
    setCurrentPlayGameIdIsSet(true);
    this.currentGameRoomMoney = currentGameRoomMoney;
    setCurrentGameRoomMoneyIsSet(true);
    this.moneyRequired = moneyRequired;
    setMoneyRequiredIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserMiniProfile(TUserMiniProfile other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetAppPackageId()) {
      this.appPackageId = other.appPackageId;
    }
    if (other.isSetAppPlatform()) {
      this.appPlatform = other.appPlatform;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    this.nCoin = other.nCoin;
    if (other.isSetUserGroup()) {
      this.userGroup = other.userGroup;
    }
    this.showPayment = other.showPayment;
    this.registerDate = other.registerDate;
    if (other.isSetSessionID()) {
      this.sessionID = other.sessionID;
    }
    if (other.isSetUserIP()) {
      this.userIP = other.userIP;
    }
    if (other.isSetUtm_source()) {
      this.utm_source = other.utm_source;
    }
    if (other.isSetCampaign()) {
      this.campaign = other.campaign;
    }
    this.currentPlayGameId = other.currentPlayGameId;
    this.currentGameRoomMoney = other.currentGameRoomMoney;
    this.moneyRequired = other.moneyRequired;
  }

  public TUserMiniProfile deepCopy() {
    return new TUserMiniProfile(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.appPackageId = null;
    this.appPlatform = null;
    this.appVersion = null;
    setNCoinIsSet(false);
    this.nCoin = 0;
    this.userGroup = null;
    setShowPaymentIsSet(false);
    this.showPayment = false;
    setRegisterDateIsSet(false);
    this.registerDate = 0;
    this.sessionID = null;
    this.userIP = null;
    this.utm_source = null;
    this.campaign = null;
    setCurrentPlayGameIdIsSet(false);
    this.currentPlayGameId = 0;
    setCurrentGameRoomMoneyIsSet(false);
    this.currentGameRoomMoney = 0;
    setMoneyRequiredIsSet(false);
    this.moneyRequired = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public TUserMiniProfile setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public TUserMiniProfile setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getAppPackageId() {
    return this.appPackageId;
  }

  public TUserMiniProfile setAppPackageId(String appPackageId) {
    this.appPackageId = appPackageId;
    return this;
  }

  public void unsetAppPackageId() {
    this.appPackageId = null;
  }

  /** Returns true if field appPackageId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPackageId() {
    return this.appPackageId != null;
  }

  public void setAppPackageIdIsSet(boolean value) {
    if (!value) {
      this.appPackageId = null;
    }
  }

  public String getAppPlatform() {
    return this.appPlatform;
  }

  public TUserMiniProfile setAppPlatform(String appPlatform) {
    this.appPlatform = appPlatform;
    return this;
  }

  public void unsetAppPlatform() {
    this.appPlatform = null;
  }

  /** Returns true if field appPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPlatform() {
    return this.appPlatform != null;
  }

  public void setAppPlatformIsSet(boolean value) {
    if (!value) {
      this.appPlatform = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public TUserMiniProfile setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public long getNCoin() {
    return this.nCoin;
  }

  public TUserMiniProfile setNCoin(long nCoin) {
    this.nCoin = nCoin;
    setNCoinIsSet(true);
    return this;
  }

  public void unsetNCoin() {
    __isset_bit_vector.clear(__NCOIN_ISSET_ID);
  }

  /** Returns true if field nCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetNCoin() {
    return __isset_bit_vector.get(__NCOIN_ISSET_ID);
  }

  public void setNCoinIsSet(boolean value) {
    __isset_bit_vector.set(__NCOIN_ISSET_ID, value);
  }

  /**
   * 
   * @see EUserGroup
   */
  public EUserGroup getUserGroup() {
    return this.userGroup;
  }

  /**
   * 
   * @see EUserGroup
   */
  public TUserMiniProfile setUserGroup(EUserGroup userGroup) {
    this.userGroup = userGroup;
    return this;
  }

  public void unsetUserGroup() {
    this.userGroup = null;
  }

  /** Returns true if field userGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGroup() {
    return this.userGroup != null;
  }

  public void setUserGroupIsSet(boolean value) {
    if (!value) {
      this.userGroup = null;
    }
  }

  public boolean isShowPayment() {
    return this.showPayment;
  }

  public TUserMiniProfile setShowPayment(boolean showPayment) {
    this.showPayment = showPayment;
    setShowPaymentIsSet(true);
    return this;
  }

  public void unsetShowPayment() {
    __isset_bit_vector.clear(__SHOWPAYMENT_ISSET_ID);
  }

  /** Returns true if field showPayment is set (has been assigned a value) and false otherwise */
  public boolean isSetShowPayment() {
    return __isset_bit_vector.get(__SHOWPAYMENT_ISSET_ID);
  }

  public void setShowPaymentIsSet(boolean value) {
    __isset_bit_vector.set(__SHOWPAYMENT_ISSET_ID, value);
  }

  public long getRegisterDate() {
    return this.registerDate;
  }

  public TUserMiniProfile setRegisterDate(long registerDate) {
    this.registerDate = registerDate;
    setRegisterDateIsSet(true);
    return this;
  }

  public void unsetRegisterDate() {
    __isset_bit_vector.clear(__REGISTERDATE_ISSET_ID);
  }

  /** Returns true if field registerDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterDate() {
    return __isset_bit_vector.get(__REGISTERDATE_ISSET_ID);
  }

  public void setRegisterDateIsSet(boolean value) {
    __isset_bit_vector.set(__REGISTERDATE_ISSET_ID, value);
  }

  public String getSessionID() {
    return this.sessionID;
  }

  public TUserMiniProfile setSessionID(String sessionID) {
    this.sessionID = sessionID;
    return this;
  }

  public void unsetSessionID() {
    this.sessionID = null;
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return this.sessionID != null;
  }

  public void setSessionIDIsSet(boolean value) {
    if (!value) {
      this.sessionID = null;
    }
  }

  public String getUserIP() {
    return this.userIP;
  }

  public TUserMiniProfile setUserIP(String userIP) {
    this.userIP = userIP;
    return this;
  }

  public void unsetUserIP() {
    this.userIP = null;
  }

  /** Returns true if field userIP is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIP() {
    return this.userIP != null;
  }

  public void setUserIPIsSet(boolean value) {
    if (!value) {
      this.userIP = null;
    }
  }

  public String getUtm_source() {
    return this.utm_source;
  }

  public TUserMiniProfile setUtm_source(String utm_source) {
    this.utm_source = utm_source;
    return this;
  }

  public void unsetUtm_source() {
    this.utm_source = null;
  }

  /** Returns true if field utm_source is set (has been assigned a value) and false otherwise */
  public boolean isSetUtm_source() {
    return this.utm_source != null;
  }

  public void setUtm_sourceIsSet(boolean value) {
    if (!value) {
      this.utm_source = null;
    }
  }

  public String getCampaign() {
    return this.campaign;
  }

  public TUserMiniProfile setCampaign(String campaign) {
    this.campaign = campaign;
    return this;
  }

  public void unsetCampaign() {
    this.campaign = null;
  }

  /** Returns true if field campaign is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaign() {
    return this.campaign != null;
  }

  public void setCampaignIsSet(boolean value) {
    if (!value) {
      this.campaign = null;
    }
  }

  public int getCurrentPlayGameId() {
    return this.currentPlayGameId;
  }

  public TUserMiniProfile setCurrentPlayGameId(int currentPlayGameId) {
    this.currentPlayGameId = currentPlayGameId;
    setCurrentPlayGameIdIsSet(true);
    return this;
  }

  public void unsetCurrentPlayGameId() {
    __isset_bit_vector.clear(__CURRENTPLAYGAMEID_ISSET_ID);
  }

  /** Returns true if field currentPlayGameId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPlayGameId() {
    return __isset_bit_vector.get(__CURRENTPLAYGAMEID_ISSET_ID);
  }

  public void setCurrentPlayGameIdIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTPLAYGAMEID_ISSET_ID, value);
  }

  public int getCurrentGameRoomMoney() {
    return this.currentGameRoomMoney;
  }

  public TUserMiniProfile setCurrentGameRoomMoney(int currentGameRoomMoney) {
    this.currentGameRoomMoney = currentGameRoomMoney;
    setCurrentGameRoomMoneyIsSet(true);
    return this;
  }

  public void unsetCurrentGameRoomMoney() {
    __isset_bit_vector.clear(__CURRENTGAMEROOMMONEY_ISSET_ID);
  }

  /** Returns true if field currentGameRoomMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentGameRoomMoney() {
    return __isset_bit_vector.get(__CURRENTGAMEROOMMONEY_ISSET_ID);
  }

  public void setCurrentGameRoomMoneyIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTGAMEROOMMONEY_ISSET_ID, value);
  }

  public long getMoneyRequired() {
    return this.moneyRequired;
  }

  public TUserMiniProfile setMoneyRequired(long moneyRequired) {
    this.moneyRequired = moneyRequired;
    setMoneyRequiredIsSet(true);
    return this;
  }

  public void unsetMoneyRequired() {
    __isset_bit_vector.clear(__MONEYREQUIRED_ISSET_ID);
  }

  /** Returns true if field moneyRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyRequired() {
    return __isset_bit_vector.get(__MONEYREQUIRED_ISSET_ID);
  }

  public void setMoneyRequiredIsSet(boolean value) {
    __isset_bit_vector.set(__MONEYREQUIRED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case APP_PACKAGE_ID:
      if (value == null) {
        unsetAppPackageId();
      } else {
        setAppPackageId((String)value);
      }
      break;

    case APP_PLATFORM:
      if (value == null) {
        unsetAppPlatform();
      } else {
        setAppPlatform((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case N_COIN:
      if (value == null) {
        unsetNCoin();
      } else {
        setNCoin((Long)value);
      }
      break;

    case USER_GROUP:
      if (value == null) {
        unsetUserGroup();
      } else {
        setUserGroup((EUserGroup)value);
      }
      break;

    case SHOW_PAYMENT:
      if (value == null) {
        unsetShowPayment();
      } else {
        setShowPayment((Boolean)value);
      }
      break;

    case REGISTER_DATE:
      if (value == null) {
        unsetRegisterDate();
      } else {
        setRegisterDate((Long)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIP();
      } else {
        setUserIP((String)value);
      }
      break;

    case UTM_SOURCE:
      if (value == null) {
        unsetUtm_source();
      } else {
        setUtm_source((String)value);
      }
      break;

    case CAMPAIGN:
      if (value == null) {
        unsetCampaign();
      } else {
        setCampaign((String)value);
      }
      break;

    case CURRENT_PLAY_GAME_ID:
      if (value == null) {
        unsetCurrentPlayGameId();
      } else {
        setCurrentPlayGameId((Integer)value);
      }
      break;

    case CURRENT_GAME_ROOM_MONEY:
      if (value == null) {
        unsetCurrentGameRoomMoney();
      } else {
        setCurrentGameRoomMoney((Integer)value);
      }
      break;

    case MONEY_REQUIRED:
      if (value == null) {
        unsetMoneyRequired();
      } else {
        setMoneyRequired((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case USER_NAME:
      return getUserName();

    case APP_PACKAGE_ID:
      return getAppPackageId();

    case APP_PLATFORM:
      return getAppPlatform();

    case APP_VERSION:
      return getAppVersion();

    case N_COIN:
      return Long.valueOf(getNCoin());

    case USER_GROUP:
      return getUserGroup();

    case SHOW_PAYMENT:
      return Boolean.valueOf(isShowPayment());

    case REGISTER_DATE:
      return Long.valueOf(getRegisterDate());

    case SESSION_ID:
      return getSessionID();

    case USER_IP:
      return getUserIP();

    case UTM_SOURCE:
      return getUtm_source();

    case CAMPAIGN:
      return getCampaign();

    case CURRENT_PLAY_GAME_ID:
      return Integer.valueOf(getCurrentPlayGameId());

    case CURRENT_GAME_ROOM_MONEY:
      return Integer.valueOf(getCurrentGameRoomMoney());

    case MONEY_REQUIRED:
      return Long.valueOf(getMoneyRequired());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case APP_PACKAGE_ID:
      return isSetAppPackageId();
    case APP_PLATFORM:
      return isSetAppPlatform();
    case APP_VERSION:
      return isSetAppVersion();
    case N_COIN:
      return isSetNCoin();
    case USER_GROUP:
      return isSetUserGroup();
    case SHOW_PAYMENT:
      return isSetShowPayment();
    case REGISTER_DATE:
      return isSetRegisterDate();
    case SESSION_ID:
      return isSetSessionID();
    case USER_IP:
      return isSetUserIP();
    case UTM_SOURCE:
      return isSetUtm_source();
    case CAMPAIGN:
      return isSetCampaign();
    case CURRENT_PLAY_GAME_ID:
      return isSetCurrentPlayGameId();
    case CURRENT_GAME_ROOM_MONEY:
      return isSetCurrentGameRoomMoney();
    case MONEY_REQUIRED:
      return isSetMoneyRequired();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserMiniProfile)
      return this.equals((TUserMiniProfile)that);
    return false;
  }

  public boolean equals(TUserMiniProfile that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_appPackageId = true && this.isSetAppPackageId();
    boolean that_present_appPackageId = true && that.isSetAppPackageId();
    if (this_present_appPackageId || that_present_appPackageId) {
      if (!(this_present_appPackageId && that_present_appPackageId))
        return false;
      if (!this.appPackageId.equals(that.appPackageId))
        return false;
    }

    boolean this_present_appPlatform = true && this.isSetAppPlatform();
    boolean that_present_appPlatform = true && that.isSetAppPlatform();
    if (this_present_appPlatform || that_present_appPlatform) {
      if (!(this_present_appPlatform && that_present_appPlatform))
        return false;
      if (!this.appPlatform.equals(that.appPlatform))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_nCoin = true;
    boolean that_present_nCoin = true;
    if (this_present_nCoin || that_present_nCoin) {
      if (!(this_present_nCoin && that_present_nCoin))
        return false;
      if (this.nCoin != that.nCoin)
        return false;
    }

    boolean this_present_userGroup = true && this.isSetUserGroup();
    boolean that_present_userGroup = true && that.isSetUserGroup();
    if (this_present_userGroup || that_present_userGroup) {
      if (!(this_present_userGroup && that_present_userGroup))
        return false;
      if (!this.userGroup.equals(that.userGroup))
        return false;
    }

    boolean this_present_showPayment = true;
    boolean that_present_showPayment = true;
    if (this_present_showPayment || that_present_showPayment) {
      if (!(this_present_showPayment && that_present_showPayment))
        return false;
      if (this.showPayment != that.showPayment)
        return false;
    }

    boolean this_present_registerDate = true;
    boolean that_present_registerDate = true;
    if (this_present_registerDate || that_present_registerDate) {
      if (!(this_present_registerDate && that_present_registerDate))
        return false;
      if (this.registerDate != that.registerDate)
        return false;
    }

    boolean this_present_sessionID = true && this.isSetSessionID();
    boolean that_present_sessionID = true && that.isSetSessionID();
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (!this.sessionID.equals(that.sessionID))
        return false;
    }

    boolean this_present_userIP = true && this.isSetUserIP();
    boolean that_present_userIP = true && that.isSetUserIP();
    if (this_present_userIP || that_present_userIP) {
      if (!(this_present_userIP && that_present_userIP))
        return false;
      if (!this.userIP.equals(that.userIP))
        return false;
    }

    boolean this_present_utm_source = true && this.isSetUtm_source();
    boolean that_present_utm_source = true && that.isSetUtm_source();
    if (this_present_utm_source || that_present_utm_source) {
      if (!(this_present_utm_source && that_present_utm_source))
        return false;
      if (!this.utm_source.equals(that.utm_source))
        return false;
    }

    boolean this_present_campaign = true && this.isSetCampaign();
    boolean that_present_campaign = true && that.isSetCampaign();
    if (this_present_campaign || that_present_campaign) {
      if (!(this_present_campaign && that_present_campaign))
        return false;
      if (!this.campaign.equals(that.campaign))
        return false;
    }

    boolean this_present_currentPlayGameId = true;
    boolean that_present_currentPlayGameId = true;
    if (this_present_currentPlayGameId || that_present_currentPlayGameId) {
      if (!(this_present_currentPlayGameId && that_present_currentPlayGameId))
        return false;
      if (this.currentPlayGameId != that.currentPlayGameId)
        return false;
    }

    boolean this_present_currentGameRoomMoney = true;
    boolean that_present_currentGameRoomMoney = true;
    if (this_present_currentGameRoomMoney || that_present_currentGameRoomMoney) {
      if (!(this_present_currentGameRoomMoney && that_present_currentGameRoomMoney))
        return false;
      if (this.currentGameRoomMoney != that.currentGameRoomMoney)
        return false;
    }

    boolean this_present_moneyRequired = true;
    boolean that_present_moneyRequired = true;
    if (this_present_moneyRequired || that_present_moneyRequired) {
      if (!(this_present_moneyRequired && that_present_moneyRequired))
        return false;
      if (this.moneyRequired != that.moneyRequired)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TUserMiniProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TUserMiniProfile typedOther = (TUserMiniProfile)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppPackageId()).compareTo(typedOther.isSetAppPackageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPackageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPackageId, typedOther.appPackageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppPlatform()).compareTo(typedOther.isSetAppPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPlatform, typedOther.appPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNCoin()).compareTo(typedOther.isSetNCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nCoin, typedOther.nCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGroup()).compareTo(typedOther.isSetUserGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGroup, typedOther.userGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowPayment()).compareTo(typedOther.isSetShowPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showPayment, typedOther.showPayment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterDate()).compareTo(typedOther.isSetRegisterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerDate, typedOther.registerDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(typedOther.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, typedOther.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIP()).compareTo(typedOther.isSetUserIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIP, typedOther.userIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtm_source()).compareTo(typedOther.isSetUtm_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtm_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utm_source, typedOther.utm_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaign()).compareTo(typedOther.isSetCampaign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaign, typedOther.campaign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentPlayGameId()).compareTo(typedOther.isSetCurrentPlayGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPlayGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPlayGameId, typedOther.currentPlayGameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentGameRoomMoney()).compareTo(typedOther.isSetCurrentGameRoomMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentGameRoomMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentGameRoomMoney, typedOther.currentGameRoomMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyRequired()).compareTo(typedOther.isSetMoneyRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRequired, typedOther.moneyRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserMiniProfile(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appPackageId:");
    if (this.appPackageId == null) {
      sb.append("null");
    } else {
      sb.append(this.appPackageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appPlatform:");
    if (this.appPlatform == null) {
      sb.append("null");
    } else {
      sb.append(this.appPlatform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appVersion:");
    if (this.appVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nCoin:");
    sb.append(this.nCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userGroup:");
    if (this.userGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.userGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("showPayment:");
    sb.append(this.showPayment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerDate:");
    sb.append(this.registerDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionID:");
    if (this.sessionID == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIP:");
    if (this.userIP == null) {
      sb.append("null");
    } else {
      sb.append(this.userIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utm_source:");
    if (this.utm_source == null) {
      sb.append("null");
    } else {
      sb.append(this.utm_source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaign:");
    if (this.campaign == null) {
      sb.append("null");
    } else {
      sb.append(this.campaign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPlayGameId:");
    sb.append(this.currentPlayGameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentGameRoomMoney:");
    sb.append(this.currentGameRoomMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moneyRequired:");
    sb.append(this.moneyRequired);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserMiniProfileStandardSchemeFactory implements SchemeFactory {
    public TUserMiniProfileStandardScheme getScheme() {
      return new TUserMiniProfileStandardScheme();
    }
  }

  private static class TUserMiniProfileStandardScheme extends StandardScheme<TUserMiniProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserMiniProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_PACKAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPackageId = iprot.readString();
              struct.setAppPackageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPlatform = iprot.readString();
              struct.setAppPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // N_COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nCoin = iprot.readI64();
              struct.setNCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userGroup = EUserGroup.findByValue(iprot.readI32());
              struct.setUserGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHOW_PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showPayment = iprot.readBool();
              struct.setShowPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGISTER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registerDate = iprot.readI64();
              struct.setRegisterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionID = iprot.readString();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userIP = iprot.readString();
              struct.setUserIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UTM_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.utm_source = iprot.readString();
              struct.setUtm_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CAMPAIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.campaign = iprot.readString();
              struct.setCampaignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_PLAY_GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentPlayGameId = iprot.readI32();
              struct.setCurrentPlayGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CURRENT_GAME_ROOM_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentGameRoomMoney = iprot.readI32();
              struct.setCurrentGameRoomMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MONEY_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.moneyRequired = iprot.readI64();
              struct.setMoneyRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserMiniProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.appPackageId != null) {
        oprot.writeFieldBegin(APP_PACKAGE_ID_FIELD_DESC);
        oprot.writeString(struct.appPackageId);
        oprot.writeFieldEnd();
      }
      if (struct.appPlatform != null) {
        oprot.writeFieldBegin(APP_PLATFORM_FIELD_DESC);
        oprot.writeString(struct.appPlatform);
        oprot.writeFieldEnd();
      }
      if (struct.appVersion != null) {
        oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
        oprot.writeString(struct.appVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N_COIN_FIELD_DESC);
      oprot.writeI64(struct.nCoin);
      oprot.writeFieldEnd();
      if (struct.userGroup != null) {
        oprot.writeFieldBegin(USER_GROUP_FIELD_DESC);
        oprot.writeI32(struct.userGroup.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOW_PAYMENT_FIELD_DESC);
      oprot.writeBool(struct.showPayment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGISTER_DATE_FIELD_DESC);
      oprot.writeI64(struct.registerDate);
      oprot.writeFieldEnd();
      if (struct.sessionID != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionID);
        oprot.writeFieldEnd();
      }
      if (struct.userIP != null) {
        oprot.writeFieldBegin(USER_IP_FIELD_DESC);
        oprot.writeString(struct.userIP);
        oprot.writeFieldEnd();
      }
      if (struct.utm_source != null) {
        oprot.writeFieldBegin(UTM_SOURCE_FIELD_DESC);
        oprot.writeString(struct.utm_source);
        oprot.writeFieldEnd();
      }
      if (struct.campaign != null) {
        oprot.writeFieldBegin(CAMPAIGN_FIELD_DESC);
        oprot.writeString(struct.campaign);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_PLAY_GAME_ID_FIELD_DESC);
      oprot.writeI32(struct.currentPlayGameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_GAME_ROOM_MONEY_FIELD_DESC);
      oprot.writeI32(struct.currentGameRoomMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_REQUIRED_FIELD_DESC);
      oprot.writeI64(struct.moneyRequired);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserMiniProfileTupleSchemeFactory implements SchemeFactory {
    public TUserMiniProfileTupleScheme getScheme() {
      return new TUserMiniProfileTupleScheme();
    }
  }

  private static class TUserMiniProfileTupleScheme extends TupleScheme<TUserMiniProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserMiniProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetAppPackageId()) {
        optionals.set(2);
      }
      if (struct.isSetAppPlatform()) {
        optionals.set(3);
      }
      if (struct.isSetAppVersion()) {
        optionals.set(4);
      }
      if (struct.isSetNCoin()) {
        optionals.set(5);
      }
      if (struct.isSetUserGroup()) {
        optionals.set(6);
      }
      if (struct.isSetShowPayment()) {
        optionals.set(7);
      }
      if (struct.isSetRegisterDate()) {
        optionals.set(8);
      }
      if (struct.isSetSessionID()) {
        optionals.set(9);
      }
      if (struct.isSetUserIP()) {
        optionals.set(10);
      }
      if (struct.isSetUtm_source()) {
        optionals.set(11);
      }
      if (struct.isSetCampaign()) {
        optionals.set(12);
      }
      if (struct.isSetCurrentPlayGameId()) {
        optionals.set(13);
      }
      if (struct.isSetCurrentGameRoomMoney()) {
        optionals.set(14);
      }
      if (struct.isSetMoneyRequired()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetAppPackageId()) {
        oprot.writeString(struct.appPackageId);
      }
      if (struct.isSetAppPlatform()) {
        oprot.writeString(struct.appPlatform);
      }
      if (struct.isSetAppVersion()) {
        oprot.writeString(struct.appVersion);
      }
      if (struct.isSetNCoin()) {
        oprot.writeI64(struct.nCoin);
      }
      if (struct.isSetUserGroup()) {
        oprot.writeI32(struct.userGroup.getValue());
      }
      if (struct.isSetShowPayment()) {
        oprot.writeBool(struct.showPayment);
      }
      if (struct.isSetRegisterDate()) {
        oprot.writeI64(struct.registerDate);
      }
      if (struct.isSetSessionID()) {
        oprot.writeString(struct.sessionID);
      }
      if (struct.isSetUserIP()) {
        oprot.writeString(struct.userIP);
      }
      if (struct.isSetUtm_source()) {
        oprot.writeString(struct.utm_source);
      }
      if (struct.isSetCampaign()) {
        oprot.writeString(struct.campaign);
      }
      if (struct.isSetCurrentPlayGameId()) {
        oprot.writeI32(struct.currentPlayGameId);
      }
      if (struct.isSetCurrentGameRoomMoney()) {
        oprot.writeI32(struct.currentGameRoomMoney);
      }
      if (struct.isSetMoneyRequired()) {
        oprot.writeI64(struct.moneyRequired);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserMiniProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appPackageId = iprot.readString();
        struct.setAppPackageIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appPlatform = iprot.readString();
        struct.setAppPlatformIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appVersion = iprot.readString();
        struct.setAppVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nCoin = iprot.readI64();
        struct.setNCoinIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userGroup = EUserGroup.findByValue(iprot.readI32());
        struct.setUserGroupIsSet(true);
      }
      if (incoming.get(7)) {
        struct.showPayment = iprot.readBool();
        struct.setShowPaymentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.registerDate = iprot.readI64();
        struct.setRegisterDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sessionID = iprot.readString();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userIP = iprot.readString();
        struct.setUserIPIsSet(true);
      }
      if (incoming.get(11)) {
        struct.utm_source = iprot.readString();
        struct.setUtm_sourceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.campaign = iprot.readString();
        struct.setCampaignIsSet(true);
      }
      if (incoming.get(13)) {
        struct.currentPlayGameId = iprot.readI32();
        struct.setCurrentPlayGameIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.currentGameRoomMoney = iprot.readI32();
        struct.setCurrentGameRoomMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.moneyRequired = iprot.readI64();
        struct.setMoneyRequiredIsSet(true);
      }
    }
  }

}

