/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.nplay.service.eventv3.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEventV3Value
		implements org.apache.thrift.TBase<TEventV3Value, TEventV3Value._Fields>, java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TEventV3Value");

	private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"eventId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField EVENT_USER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"eventUserGroup", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"title", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"description", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"imgUrl", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"eventType", org.apache.thrift.protocol.TType.I32, (short) 6);
	private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"paymentType", org.apache.thrift.protocol.TType.I32, (short) 7);
	private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"frequency", org.apache.thrift.protocol.TType.I16, (short) 8);
	private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priority", org.apache.thrift.protocol.TType.BYTE, (short) 9);
	private static final org.apache.thrift.protocol.TField BUTTON_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"buttonAction", org.apache.thrift.protocol.TType.I32, (short) 10);
	private static final org.apache.thrift.protocol.TField BUTTON_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"buttonText", org.apache.thrift.protocol.TType.STRING, (short) 11);
	private static final org.apache.thrift.protocol.TField BUTTON_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"buttonLink", org.apache.thrift.protocol.TType.STRING, (short) 12);
	private static final org.apache.thrift.protocol.TField DATE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dateBegin", org.apache.thrift.protocol.TType.I64, (short) 13);
	private static final org.apache.thrift.protocol.TField DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dateEnd", org.apache.thrift.protocol.TType.I64, (short) 14);
	private static final org.apache.thrift.protocol.TField EVENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"eventStatus", org.apache.thrift.protocol.TType.I32, (short) 15);
	private static final org.apache.thrift.protocol.TField USER_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userCreated", org.apache.thrift.protocol.TType.STRING, (short) 16);
	private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dateCreated", org.apache.thrift.protocol.TType.I64, (short) 17);
	private static final org.apache.thrift.protocol.TField USER_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userUpdated", org.apache.thrift.protocol.TType.STRING, (short) 18);
	private static final org.apache.thrift.protocol.TField DATE_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dateUpdated", org.apache.thrift.protocol.TType.I64, (short) 19);
	private static final org.apache.thrift.protocol.TField DATE_LAST_RUN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dateLastRun", org.apache.thrift.protocol.TType.I64, (short) 20);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TEventV3ValueStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TEventV3ValueTupleSchemeFactory());
	}

	public int eventId; // required
	/**
	 *
	 * @see com.bliss.service.thrift.EEventUserGroup
	 */
	public com.bliss.service.thrift.EEventUserGroup eventUserGroup; // required
	public String title; // required
	public String description; // required
	public String imgUrl; // required
	/**
	 *
	 * @see EEventType
	 */
	public EEventType eventType; // required
	/**
	 *
	 * @see EPaymentType
	 */
	public EPaymentType paymentType; // required
	public short frequency; // required
	public byte priority; // required
	/**
	 *
	 * @see EButtonAction
	 */
	public EButtonAction buttonAction; // required
	public String buttonText; // required
	public String buttonLink; // required
	public long dateBegin; // required
	public long dateEnd; // required
	/**
	 *
	 * @see EEventStatus
	 */
	public EEventStatus eventStatus; // required
	public String userCreated; // required
	public long dateCreated; // required
	public String userUpdated; // required
	public long dateUpdated; // required
	public long dateLastRun; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		EVENT_ID((short) 1, "eventId"),
		/**
		 *
		 * @see com.bliss.service.thrift.EEventUserGroup
		 */
		EVENT_USER_GROUP((short) 2, "eventUserGroup"), TITLE((short) 3, "title"), DESCRIPTION((short) 4,
				"description"), IMG_URL((short) 5, "imgUrl"),
		/**
		 *
		 * @see EEventType
		 */
		EVENT_TYPE((short) 6, "eventType"),
		/**
		 *
		 * @see EPaymentType
		 */
		PAYMENT_TYPE((short) 7, "paymentType"), FREQUENCY((short) 8, "frequency"), PRIORITY((short) 9, "priority"),
		/**
		 *
		 * @see EButtonAction
		 */
		BUTTON_ACTION((short) 10, "buttonAction"), BUTTON_TEXT((short) 11, "buttonText"), BUTTON_LINK((short) 12,
				"buttonLink"), DATE_BEGIN((short) 13, "dateBegin"), DATE_END((short) 14, "dateEnd"),
		/**
		 *
		 * @see EEventStatus
		 */
		EVENT_STATUS((short) 15, "eventStatus"), USER_CREATED((short) 16, "userCreated"), DATE_CREATED((short) 17,
				"dateCreated"), USER_UPDATED((short) 18, "userUpdated"), DATE_UPDATED((short) 19,
						"dateUpdated"), DATE_LAST_RUN((short) 20, "dateLastRun");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // EVENT_ID
				return EVENT_ID;
			case 2: // EVENT_USER_GROUP
				return EVENT_USER_GROUP;
			case 3: // TITLE
				return TITLE;
			case 4: // DESCRIPTION
				return DESCRIPTION;
			case 5: // IMG_URL
				return IMG_URL;
			case 6: // EVENT_TYPE
				return EVENT_TYPE;
			case 7: // PAYMENT_TYPE
				return PAYMENT_TYPE;
			case 8: // FREQUENCY
				return FREQUENCY;
			case 9: // PRIORITY
				return PRIORITY;
			case 10: // BUTTON_ACTION
				return BUTTON_ACTION;
			case 11: // BUTTON_TEXT
				return BUTTON_TEXT;
			case 12: // BUTTON_LINK
				return BUTTON_LINK;
			case 13: // DATE_BEGIN
				return DATE_BEGIN;
			case 14: // DATE_END
				return DATE_END;
			case 15: // EVENT_STATUS
				return EVENT_STATUS;
			case 16: // USER_CREATED
				return USER_CREATED;
			case 17: // DATE_CREATED
				return DATE_CREATED;
			case 18: // USER_UPDATED
				return USER_UPDATED;
			case 19: // DATE_UPDATED
				return DATE_UPDATED;
			case 20: // DATE_LAST_RUN
				return DATE_LAST_RUN;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it
		 * is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __EVENTID_ISSET_ID = 0;
	private static final int __FREQUENCY_ISSET_ID = 1;
	private static final int __PRIORITY_ISSET_ID = 2;
	private static final int __DATEBEGIN_ISSET_ID = 3;
	private static final int __DATEEND_ISSET_ID = 4;
	private static final int __DATECREATED_ISSET_ID = 5;
	private static final int __DATEUPDATED_ISSET_ID = 6;
	private static final int __DATELASTRUN_ISSET_ID = 7;
	private BitSet __isset_bit_vector = new BitSet(8);
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.EVENT_ID,
				new org.apache.thrift.meta_data.FieldMetaData("eventId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.EVENT_USER_GROUP,
				new org.apache.thrift.meta_data.FieldMetaData("eventUserGroup",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
								com.bliss.service.thrift.EEventUserGroup.class)));
		tmpMap.put(_Fields.TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESCRIPTION,
				new org.apache.thrift.meta_data.FieldMetaData("description",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IMG_URL,
				new org.apache.thrift.meta_data.FieldMetaData("imgUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EEventType.class)));
		tmpMap.put(_Fields.PAYMENT_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("paymentType",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(
								org.apache.thrift.protocol.TType.ENUM, EPaymentType.class)));
		tmpMap.put(_Fields.FREQUENCY,
				new org.apache.thrift.meta_data.FieldMetaData("frequency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.PRIORITY,
				new org.apache.thrift.meta_data.FieldMetaData("priority",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
		tmpMap.put(_Fields.BUTTON_ACTION,
				new org.apache.thrift.meta_data.FieldMetaData("buttonAction",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(
								org.apache.thrift.protocol.TType.ENUM, EButtonAction.class)));
		tmpMap.put(_Fields.BUTTON_TEXT,
				new org.apache.thrift.meta_data.FieldMetaData("buttonText",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BUTTON_LINK,
				new org.apache.thrift.meta_data.FieldMetaData("buttonLink",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DATE_BEGIN,
				new org.apache.thrift.meta_data.FieldMetaData("dateBegin",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.DATE_END,
				new org.apache.thrift.meta_data.FieldMetaData("dateEnd",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.EVENT_STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("eventStatus",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(
								org.apache.thrift.protocol.TType.ENUM, EEventStatus.class)));
		tmpMap.put(_Fields.USER_CREATED,
				new org.apache.thrift.meta_data.FieldMetaData("userCreated",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DATE_CREATED,
				new org.apache.thrift.meta_data.FieldMetaData("dateCreated",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.USER_UPDATED,
				new org.apache.thrift.meta_data.FieldMetaData("userUpdated",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DATE_UPDATED,
				new org.apache.thrift.meta_data.FieldMetaData("dateUpdated",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.DATE_LAST_RUN,
				new org.apache.thrift.meta_data.FieldMetaData("dateLastRun",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEventV3Value.class, metaDataMap);
	}

	public TEventV3Value() {
	}

	public TEventV3Value(int eventId, com.bliss.service.thrift.EEventUserGroup eventUserGroup, String title,
			String description, String imgUrl, EEventType eventType, EPaymentType paymentType, short frequency,
			byte priority, EButtonAction buttonAction, String buttonText, String buttonLink, long dateBegin,
			long dateEnd, EEventStatus eventStatus, String userCreated, long dateCreated, String userUpdated,
			long dateUpdated, long dateLastRun) {
		this();
		this.eventId = eventId;
		setEventIdIsSet(true);
		this.eventUserGroup = eventUserGroup;
		this.title = title;
		this.description = description;
		this.imgUrl = imgUrl;
		this.eventType = eventType;
		this.paymentType = paymentType;
		this.frequency = frequency;
		setFrequencyIsSet(true);
		this.priority = priority;
		setPriorityIsSet(true);
		this.buttonAction = buttonAction;
		this.buttonText = buttonText;
		this.buttonLink = buttonLink;
		this.dateBegin = dateBegin;
		setDateBeginIsSet(true);
		this.dateEnd = dateEnd;
		setDateEndIsSet(true);
		this.eventStatus = eventStatus;
		this.userCreated = userCreated;
		this.dateCreated = dateCreated;
		setDateCreatedIsSet(true);
		this.userUpdated = userUpdated;
		this.dateUpdated = dateUpdated;
		setDateUpdatedIsSet(true);
		this.dateLastRun = dateLastRun;
		setDateLastRunIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TEventV3Value(TEventV3Value other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		this.eventId = other.eventId;
		if (other.isSetEventUserGroup()) {
			this.eventUserGroup = other.eventUserGroup;
		}
		if (other.isSetTitle()) {
			this.title = other.title;
		}
		if (other.isSetDescription()) {
			this.description = other.description;
		}
		if (other.isSetImgUrl()) {
			this.imgUrl = other.imgUrl;
		}
		if (other.isSetEventType()) {
			this.eventType = other.eventType;
		}
		if (other.isSetPaymentType()) {
			this.paymentType = other.paymentType;
		}
		this.frequency = other.frequency;
		this.priority = other.priority;
		if (other.isSetButtonAction()) {
			this.buttonAction = other.buttonAction;
		}
		if (other.isSetButtonText()) {
			this.buttonText = other.buttonText;
		}
		if (other.isSetButtonLink()) {
			this.buttonLink = other.buttonLink;
		}
		this.dateBegin = other.dateBegin;
		this.dateEnd = other.dateEnd;
		if (other.isSetEventStatus()) {
			this.eventStatus = other.eventStatus;
		}
		if (other.isSetUserCreated()) {
			this.userCreated = other.userCreated;
		}
		this.dateCreated = other.dateCreated;
		if (other.isSetUserUpdated()) {
			this.userUpdated = other.userUpdated;
		}
		this.dateUpdated = other.dateUpdated;
		this.dateLastRun = other.dateLastRun;
	}

	public TEventV3Value deepCopy() {
		return new TEventV3Value(this);
	}

	@Override
	public void clear() {
		setEventIdIsSet(false);
		this.eventId = 0;
		this.eventUserGroup = null;
		this.title = null;
		this.description = null;
		this.imgUrl = null;
		this.eventType = null;
		this.paymentType = null;
		setFrequencyIsSet(false);
		this.frequency = 0;
		setPriorityIsSet(false);
		this.priority = 0;
		this.buttonAction = null;
		this.buttonText = null;
		this.buttonLink = null;
		setDateBeginIsSet(false);
		this.dateBegin = 0;
		setDateEndIsSet(false);
		this.dateEnd = 0;
		this.eventStatus = null;
		this.userCreated = null;
		setDateCreatedIsSet(false);
		this.dateCreated = 0;
		this.userUpdated = null;
		setDateUpdatedIsSet(false);
		this.dateUpdated = 0;
		setDateLastRunIsSet(false);
		this.dateLastRun = 0;
	}

	public int getEventId() {
		return this.eventId;
	}

	public TEventV3Value setEventId(int eventId) {
		this.eventId = eventId;
		setEventIdIsSet(true);
		return this;
	}

	public void unsetEventId() {
		__isset_bit_vector.clear(__EVENTID_ISSET_ID);
	}

	/**
	 * Returns true if field eventId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetEventId() {
		return __isset_bit_vector.get(__EVENTID_ISSET_ID);
	}

	public void setEventIdIsSet(boolean value) {
		__isset_bit_vector.set(__EVENTID_ISSET_ID, value);
	}

	/**
	 *
	 * @see com.bliss.service.thrift.EEventUserGroup
	 */
	public com.bliss.service.thrift.EEventUserGroup getEventUserGroup() {
		return this.eventUserGroup;
	}

	/**
	 *
	 * @see com.bliss.service.thrift.EEventUserGroup
	 */
	public TEventV3Value setEventUserGroup(com.bliss.service.thrift.EEventUserGroup eventUserGroup) {
		this.eventUserGroup = eventUserGroup;
		return this;
	}

	public void unsetEventUserGroup() {
		this.eventUserGroup = null;
	}

	/**
	 * Returns true if field eventUserGroup is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetEventUserGroup() {
		return this.eventUserGroup != null;
	}

	public void setEventUserGroupIsSet(boolean value) {
		if (!value) {
			this.eventUserGroup = null;
		}
	}

	public String getTitle() {
		return this.title;
	}

	public TEventV3Value setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/**
	 * Returns true if field title is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public String getDescription() {
		return this.description;
	}

	public TEventV3Value setDescription(String description) {
		this.description = description;
		return this;
	}

	public void unsetDescription() {
		this.description = null;
	}

	/**
	 * Returns true if field description is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDescription() {
		return this.description != null;
	}

	public void setDescriptionIsSet(boolean value) {
		if (!value) {
			this.description = null;
		}
	}

	public String getImgUrl() {
		return this.imgUrl;
	}

	public TEventV3Value setImgUrl(String imgUrl) {
		this.imgUrl = imgUrl;
		return this;
	}

	public void unsetImgUrl() {
		this.imgUrl = null;
	}

	/**
	 * Returns true if field imgUrl is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetImgUrl() {
		return this.imgUrl != null;
	}

	public void setImgUrlIsSet(boolean value) {
		if (!value) {
			this.imgUrl = null;
		}
	}

	/**
	 *
	 * @see EEventType
	 */
	public EEventType getEventType() {
		return this.eventType;
	}

	/**
	 *
	 * @see EEventType
	 */
	public TEventV3Value setEventType(EEventType eventType) {
		this.eventType = eventType;
		return this;
	}

	public void unsetEventType() {
		this.eventType = null;
	}

	/**
	 * Returns true if field eventType is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetEventType() {
		return this.eventType != null;
	}

	public void setEventTypeIsSet(boolean value) {
		if (!value) {
			this.eventType = null;
		}
	}

	/**
	 *
	 * @see EPaymentType
	 */
	public EPaymentType getPaymentType() {
		return this.paymentType;
	}

	/**
	 *
	 * @see EPaymentType
	 */
	public TEventV3Value setPaymentType(EPaymentType paymentType) {
		this.paymentType = paymentType;
		return this;
	}

	public void unsetPaymentType() {
		this.paymentType = null;
	}

	/**
	 * Returns true if field paymentType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPaymentType() {
		return this.paymentType != null;
	}

	public void setPaymentTypeIsSet(boolean value) {
		if (!value) {
			this.paymentType = null;
		}
	}

	public short getFrequency() {
		return this.frequency;
	}

	public TEventV3Value setFrequency(short frequency) {
		this.frequency = frequency;
		setFrequencyIsSet(true);
		return this;
	}

	public void unsetFrequency() {
		__isset_bit_vector.clear(__FREQUENCY_ISSET_ID);
	}

	/**
	 * Returns true if field frequency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFrequency() {
		return __isset_bit_vector.get(__FREQUENCY_ISSET_ID);
	}

	public void setFrequencyIsSet(boolean value) {
		__isset_bit_vector.set(__FREQUENCY_ISSET_ID, value);
	}

	public byte getPriority() {
		return this.priority;
	}

	public TEventV3Value setPriority(byte priority) {
		this.priority = priority;
		setPriorityIsSet(true);
		return this;
	}

	public void unsetPriority() {
		__isset_bit_vector.clear(__PRIORITY_ISSET_ID);
	}

	/**
	 * Returns true if field priority is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriority() {
		return __isset_bit_vector.get(__PRIORITY_ISSET_ID);
	}

	public void setPriorityIsSet(boolean value) {
		__isset_bit_vector.set(__PRIORITY_ISSET_ID, value);
	}

	/**
	 *
	 * @see EButtonAction
	 */
	public EButtonAction getButtonAction() {
		return this.buttonAction;
	}

	/**
	 *
	 * @see EButtonAction
	 */
	public TEventV3Value setButtonAction(EButtonAction buttonAction) {
		this.buttonAction = buttonAction;
		return this;
	}

	public void unsetButtonAction() {
		this.buttonAction = null;
	}

	/**
	 * Returns true if field buttonAction is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetButtonAction() {
		return this.buttonAction != null;
	}

	public void setButtonActionIsSet(boolean value) {
		if (!value) {
			this.buttonAction = null;
		}
	}

	public String getButtonText() {
		return this.buttonText;
	}

	public TEventV3Value setButtonText(String buttonText) {
		this.buttonText = buttonText;
		return this;
	}

	public void unsetButtonText() {
		this.buttonText = null;
	}

	/**
	 * Returns true if field buttonText is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetButtonText() {
		return this.buttonText != null;
	}

	public void setButtonTextIsSet(boolean value) {
		if (!value) {
			this.buttonText = null;
		}
	}

	public String getButtonLink() {
		return this.buttonLink;
	}

	public TEventV3Value setButtonLink(String buttonLink) {
		this.buttonLink = buttonLink;
		return this;
	}

	public void unsetButtonLink() {
		this.buttonLink = null;
	}

	/**
	 * Returns true if field buttonLink is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetButtonLink() {
		return this.buttonLink != null;
	}

	public void setButtonLinkIsSet(boolean value) {
		if (!value) {
			this.buttonLink = null;
		}
	}

	public long getDateBegin() {
		return this.dateBegin;
	}

	public TEventV3Value setDateBegin(long dateBegin) {
		this.dateBegin = dateBegin;
		setDateBeginIsSet(true);
		return this;
	}

	public void unsetDateBegin() {
		__isset_bit_vector.clear(__DATEBEGIN_ISSET_ID);
	}

	/**
	 * Returns true if field dateBegin is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDateBegin() {
		return __isset_bit_vector.get(__DATEBEGIN_ISSET_ID);
	}

	public void setDateBeginIsSet(boolean value) {
		__isset_bit_vector.set(__DATEBEGIN_ISSET_ID, value);
	}

	public long getDateEnd() {
		return this.dateEnd;
	}

	public TEventV3Value setDateEnd(long dateEnd) {
		this.dateEnd = dateEnd;
		setDateEndIsSet(true);
		return this;
	}

	public void unsetDateEnd() {
		__isset_bit_vector.clear(__DATEEND_ISSET_ID);
	}

	/**
	 * Returns true if field dateEnd is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDateEnd() {
		return __isset_bit_vector.get(__DATEEND_ISSET_ID);
	}

	public void setDateEndIsSet(boolean value) {
		__isset_bit_vector.set(__DATEEND_ISSET_ID, value);
	}

	/**
	 *
	 * @see EEventStatus
	 */
	public EEventStatus getEventStatus() {
		return this.eventStatus;
	}

	/**
	 *
	 * @see EEventStatus
	 */
	public TEventV3Value setEventStatus(EEventStatus eventStatus) {
		this.eventStatus = eventStatus;
		return this;
	}

	public void unsetEventStatus() {
		this.eventStatus = null;
	}

	/**
	 * Returns true if field eventStatus is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetEventStatus() {
		return this.eventStatus != null;
	}

	public void setEventStatusIsSet(boolean value) {
		if (!value) {
			this.eventStatus = null;
		}
	}

	public String getUserCreated() {
		return this.userCreated;
	}

	public TEventV3Value setUserCreated(String userCreated) {
		this.userCreated = userCreated;
		return this;
	}

	public void unsetUserCreated() {
		this.userCreated = null;
	}

	/**
	 * Returns true if field userCreated is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUserCreated() {
		return this.userCreated != null;
	}

	public void setUserCreatedIsSet(boolean value) {
		if (!value) {
			this.userCreated = null;
		}
	}

	public long getDateCreated() {
		return this.dateCreated;
	}

	public TEventV3Value setDateCreated(long dateCreated) {
		this.dateCreated = dateCreated;
		setDateCreatedIsSet(true);
		return this;
	}

	public void unsetDateCreated() {
		__isset_bit_vector.clear(__DATECREATED_ISSET_ID);
	}

	/**
	 * Returns true if field dateCreated is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDateCreated() {
		return __isset_bit_vector.get(__DATECREATED_ISSET_ID);
	}

	public void setDateCreatedIsSet(boolean value) {
		__isset_bit_vector.set(__DATECREATED_ISSET_ID, value);
	}

	public String getUserUpdated() {
		return this.userUpdated;
	}

	public TEventV3Value setUserUpdated(String userUpdated) {
		this.userUpdated = userUpdated;
		return this;
	}

	public void unsetUserUpdated() {
		this.userUpdated = null;
	}

	/**
	 * Returns true if field userUpdated is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUserUpdated() {
		return this.userUpdated != null;
	}

	public void setUserUpdatedIsSet(boolean value) {
		if (!value) {
			this.userUpdated = null;
		}
	}

	public long getDateUpdated() {
		return this.dateUpdated;
	}

	public TEventV3Value setDateUpdated(long dateUpdated) {
		this.dateUpdated = dateUpdated;
		setDateUpdatedIsSet(true);
		return this;
	}

	public void unsetDateUpdated() {
		__isset_bit_vector.clear(__DATEUPDATED_ISSET_ID);
	}

	/**
	 * Returns true if field dateUpdated is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDateUpdated() {
		return __isset_bit_vector.get(__DATEUPDATED_ISSET_ID);
	}

	public void setDateUpdatedIsSet(boolean value) {
		__isset_bit_vector.set(__DATEUPDATED_ISSET_ID, value);
	}

	public long getDateLastRun() {
		return this.dateLastRun;
	}

	public TEventV3Value setDateLastRun(long dateLastRun) {
		this.dateLastRun = dateLastRun;
		setDateLastRunIsSet(true);
		return this;
	}

	public void unsetDateLastRun() {
		__isset_bit_vector.clear(__DATELASTRUN_ISSET_ID);
	}

	/**
	 * Returns true if field dateLastRun is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDateLastRun() {
		return __isset_bit_vector.get(__DATELASTRUN_ISSET_ID);
	}

	public void setDateLastRunIsSet(boolean value) {
		__isset_bit_vector.set(__DATELASTRUN_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case EVENT_ID:
			if (value == null) {
				unsetEventId();
			} else {
				setEventId((Integer) value);
			}
			break;

		case EVENT_USER_GROUP:
			if (value == null) {
				unsetEventUserGroup();
			} else {
				setEventUserGroup((com.bliss.service.thrift.EEventUserGroup) value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String) value);
			}
			break;

		case DESCRIPTION:
			if (value == null) {
				unsetDescription();
			} else {
				setDescription((String) value);
			}
			break;

		case IMG_URL:
			if (value == null) {
				unsetImgUrl();
			} else {
				setImgUrl((String) value);
			}
			break;

		case EVENT_TYPE:
			if (value == null) {
				unsetEventType();
			} else {
				setEventType((EEventType) value);
			}
			break;

		case PAYMENT_TYPE:
			if (value == null) {
				unsetPaymentType();
			} else {
				setPaymentType((EPaymentType) value);
			}
			break;

		case FREQUENCY:
			if (value == null) {
				unsetFrequency();
			} else {
				setFrequency((Short) value);
			}
			break;

		case PRIORITY:
			if (value == null) {
				unsetPriority();
			} else {
				setPriority((Byte) value);
			}
			break;

		case BUTTON_ACTION:
			if (value == null) {
				unsetButtonAction();
			} else {
				setButtonAction((EButtonAction) value);
			}
			break;

		case BUTTON_TEXT:
			if (value == null) {
				unsetButtonText();
			} else {
				setButtonText((String) value);
			}
			break;

		case BUTTON_LINK:
			if (value == null) {
				unsetButtonLink();
			} else {
				setButtonLink((String) value);
			}
			break;

		case DATE_BEGIN:
			if (value == null) {
				unsetDateBegin();
			} else {
				setDateBegin((Long) value);
			}
			break;

		case DATE_END:
			if (value == null) {
				unsetDateEnd();
			} else {
				setDateEnd((Long) value);
			}
			break;

		case EVENT_STATUS:
			if (value == null) {
				unsetEventStatus();
			} else {
				setEventStatus((EEventStatus) value);
			}
			break;

		case USER_CREATED:
			if (value == null) {
				unsetUserCreated();
			} else {
				setUserCreated((String) value);
			}
			break;

		case DATE_CREATED:
			if (value == null) {
				unsetDateCreated();
			} else {
				setDateCreated((Long) value);
			}
			break;

		case USER_UPDATED:
			if (value == null) {
				unsetUserUpdated();
			} else {
				setUserUpdated((String) value);
			}
			break;

		case DATE_UPDATED:
			if (value == null) {
				unsetDateUpdated();
			} else {
				setDateUpdated((Long) value);
			}
			break;

		case DATE_LAST_RUN:
			if (value == null) {
				unsetDateLastRun();
			} else {
				setDateLastRun((Long) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case EVENT_ID:
			return Integer.valueOf(getEventId());

		case EVENT_USER_GROUP:
			return getEventUserGroup();

		case TITLE:
			return getTitle();

		case DESCRIPTION:
			return getDescription();

		case IMG_URL:
			return getImgUrl();

		case EVENT_TYPE:
			return getEventType();

		case PAYMENT_TYPE:
			return getPaymentType();

		case FREQUENCY:
			return Short.valueOf(getFrequency());

		case PRIORITY:
			return Byte.valueOf(getPriority());

		case BUTTON_ACTION:
			return getButtonAction();

		case BUTTON_TEXT:
			return getButtonText();

		case BUTTON_LINK:
			return getButtonLink();

		case DATE_BEGIN:
			return Long.valueOf(getDateBegin());

		case DATE_END:
			return Long.valueOf(getDateEnd());

		case EVENT_STATUS:
			return getEventStatus();

		case USER_CREATED:
			return getUserCreated();

		case DATE_CREATED:
			return Long.valueOf(getDateCreated());

		case USER_UPDATED:
			return getUserUpdated();

		case DATE_UPDATED:
			return Long.valueOf(getDateUpdated());

		case DATE_LAST_RUN:
			return Long.valueOf(getDateLastRun());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case EVENT_ID:
			return isSetEventId();
		case EVENT_USER_GROUP:
			return isSetEventUserGroup();
		case TITLE:
			return isSetTitle();
		case DESCRIPTION:
			return isSetDescription();
		case IMG_URL:
			return isSetImgUrl();
		case EVENT_TYPE:
			return isSetEventType();
		case PAYMENT_TYPE:
			return isSetPaymentType();
		case FREQUENCY:
			return isSetFrequency();
		case PRIORITY:
			return isSetPriority();
		case BUTTON_ACTION:
			return isSetButtonAction();
		case BUTTON_TEXT:
			return isSetButtonText();
		case BUTTON_LINK:
			return isSetButtonLink();
		case DATE_BEGIN:
			return isSetDateBegin();
		case DATE_END:
			return isSetDateEnd();
		case EVENT_STATUS:
			return isSetEventStatus();
		case USER_CREATED:
			return isSetUserCreated();
		case DATE_CREATED:
			return isSetDateCreated();
		case USER_UPDATED:
			return isSetUserUpdated();
		case DATE_UPDATED:
			return isSetDateUpdated();
		case DATE_LAST_RUN:
			return isSetDateLastRun();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TEventV3Value)
			return this.equals((TEventV3Value) that);
		return false;
	}

	public boolean equals(TEventV3Value that) {
		if (that == null)
			return false;

		boolean this_present_eventId = true;
		boolean that_present_eventId = true;
		if (this_present_eventId || that_present_eventId) {
			if (!(this_present_eventId && that_present_eventId))
				return false;
			if (this.eventId != that.eventId)
				return false;
		}

		boolean this_present_eventUserGroup = true && this.isSetEventUserGroup();
		boolean that_present_eventUserGroup = true && that.isSetEventUserGroup();
		if (this_present_eventUserGroup || that_present_eventUserGroup) {
			if (!(this_present_eventUserGroup && that_present_eventUserGroup))
				return false;
			if (!this.eventUserGroup.equals(that.eventUserGroup))
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		boolean this_present_description = true && this.isSetDescription();
		boolean that_present_description = true && that.isSetDescription();
		if (this_present_description || that_present_description) {
			if (!(this_present_description && that_present_description))
				return false;
			if (!this.description.equals(that.description))
				return false;
		}

		boolean this_present_imgUrl = true && this.isSetImgUrl();
		boolean that_present_imgUrl = true && that.isSetImgUrl();
		if (this_present_imgUrl || that_present_imgUrl) {
			if (!(this_present_imgUrl && that_present_imgUrl))
				return false;
			if (!this.imgUrl.equals(that.imgUrl))
				return false;
		}

		boolean this_present_eventType = true && this.isSetEventType();
		boolean that_present_eventType = true && that.isSetEventType();
		if (this_present_eventType || that_present_eventType) {
			if (!(this_present_eventType && that_present_eventType))
				return false;
			if (!this.eventType.equals(that.eventType))
				return false;
		}

		boolean this_present_paymentType = true && this.isSetPaymentType();
		boolean that_present_paymentType = true && that.isSetPaymentType();
		if (this_present_paymentType || that_present_paymentType) {
			if (!(this_present_paymentType && that_present_paymentType))
				return false;
			if (!this.paymentType.equals(that.paymentType))
				return false;
		}

		boolean this_present_frequency = true;
		boolean that_present_frequency = true;
		if (this_present_frequency || that_present_frequency) {
			if (!(this_present_frequency && that_present_frequency))
				return false;
			if (this.frequency != that.frequency)
				return false;
		}

		boolean this_present_priority = true;
		boolean that_present_priority = true;
		if (this_present_priority || that_present_priority) {
			if (!(this_present_priority && that_present_priority))
				return false;
			if (this.priority != that.priority)
				return false;
		}

		boolean this_present_buttonAction = true && this.isSetButtonAction();
		boolean that_present_buttonAction = true && that.isSetButtonAction();
		if (this_present_buttonAction || that_present_buttonAction) {
			if (!(this_present_buttonAction && that_present_buttonAction))
				return false;
			if (!this.buttonAction.equals(that.buttonAction))
				return false;
		}

		boolean this_present_buttonText = true && this.isSetButtonText();
		boolean that_present_buttonText = true && that.isSetButtonText();
		if (this_present_buttonText || that_present_buttonText) {
			if (!(this_present_buttonText && that_present_buttonText))
				return false;
			if (!this.buttonText.equals(that.buttonText))
				return false;
		}

		boolean this_present_buttonLink = true && this.isSetButtonLink();
		boolean that_present_buttonLink = true && that.isSetButtonLink();
		if (this_present_buttonLink || that_present_buttonLink) {
			if (!(this_present_buttonLink && that_present_buttonLink))
				return false;
			if (!this.buttonLink.equals(that.buttonLink))
				return false;
		}

		boolean this_present_dateBegin = true;
		boolean that_present_dateBegin = true;
		if (this_present_dateBegin || that_present_dateBegin) {
			if (!(this_present_dateBegin && that_present_dateBegin))
				return false;
			if (this.dateBegin != that.dateBegin)
				return false;
		}

		boolean this_present_dateEnd = true;
		boolean that_present_dateEnd = true;
		if (this_present_dateEnd || that_present_dateEnd) {
			if (!(this_present_dateEnd && that_present_dateEnd))
				return false;
			if (this.dateEnd != that.dateEnd)
				return false;
		}

		boolean this_present_eventStatus = true && this.isSetEventStatus();
		boolean that_present_eventStatus = true && that.isSetEventStatus();
		if (this_present_eventStatus || that_present_eventStatus) {
			if (!(this_present_eventStatus && that_present_eventStatus))
				return false;
			if (!this.eventStatus.equals(that.eventStatus))
				return false;
		}

		boolean this_present_userCreated = true && this.isSetUserCreated();
		boolean that_present_userCreated = true && that.isSetUserCreated();
		if (this_present_userCreated || that_present_userCreated) {
			if (!(this_present_userCreated && that_present_userCreated))
				return false;
			if (!this.userCreated.equals(that.userCreated))
				return false;
		}

		boolean this_present_dateCreated = true;
		boolean that_present_dateCreated = true;
		if (this_present_dateCreated || that_present_dateCreated) {
			if (!(this_present_dateCreated && that_present_dateCreated))
				return false;
			if (this.dateCreated != that.dateCreated)
				return false;
		}

		boolean this_present_userUpdated = true && this.isSetUserUpdated();
		boolean that_present_userUpdated = true && that.isSetUserUpdated();
		if (this_present_userUpdated || that_present_userUpdated) {
			if (!(this_present_userUpdated && that_present_userUpdated))
				return false;
			if (!this.userUpdated.equals(that.userUpdated))
				return false;
		}

		boolean this_present_dateUpdated = true;
		boolean that_present_dateUpdated = true;
		if (this_present_dateUpdated || that_present_dateUpdated) {
			if (!(this_present_dateUpdated && that_present_dateUpdated))
				return false;
			if (this.dateUpdated != that.dateUpdated)
				return false;
		}

		boolean this_present_dateLastRun = true;
		boolean that_present_dateLastRun = true;
		if (this_present_dateLastRun || that_present_dateLastRun) {
			if (!(this_present_dateLastRun && that_present_dateLastRun))
				return false;
			if (this.dateLastRun != that.dateLastRun)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(TEventV3Value other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		TEventV3Value typedOther = (TEventV3Value) other;

		lastComparison = Boolean.valueOf(isSetEventId()).compareTo(typedOther.isSetEventId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, typedOther.eventId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventUserGroup()).compareTo(typedOther.isSetEventUserGroup());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventUserGroup()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventUserGroup, typedOther.eventUserGroup);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescription()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetImgUrl()).compareTo(typedOther.isSetImgUrl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetImgUrl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgUrl, typedOther.imgUrl);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventType()).compareTo(typedOther.isSetEventType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, typedOther.eventType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(typedOther.isSetPaymentType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPaymentType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, typedOther.paymentType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(typedOther.isSetFrequency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFrequency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, typedOther.frequency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriority()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetButtonAction()).compareTo(typedOther.isSetButtonAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetButtonAction()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonAction, typedOther.buttonAction);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetButtonText()).compareTo(typedOther.isSetButtonText());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetButtonText()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonText, typedOther.buttonText);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetButtonLink()).compareTo(typedOther.isSetButtonLink());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetButtonLink()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buttonLink, typedOther.buttonLink);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDateBegin()).compareTo(typedOther.isSetDateBegin());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDateBegin()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateBegin, typedOther.dateBegin);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDateEnd()).compareTo(typedOther.isSetDateEnd());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDateEnd()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateEnd, typedOther.dateEnd);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEventStatus()).compareTo(typedOther.isSetEventStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEventStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventStatus, typedOther.eventStatus);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserCreated()).compareTo(typedOther.isSetUserCreated());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserCreated()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCreated, typedOther.userCreated);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(typedOther.isSetDateCreated());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDateCreated()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, typedOther.dateCreated);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserUpdated()).compareTo(typedOther.isSetUserUpdated());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserUpdated()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userUpdated, typedOther.userUpdated);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDateUpdated()).compareTo(typedOther.isSetDateUpdated());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDateUpdated()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateUpdated, typedOther.dateUpdated);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDateLastRun()).compareTo(typedOther.isSetDateLastRun());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDateLastRun()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateLastRun, typedOther.dateLastRun);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TEventV3Value(");
		boolean first = true;

		sb.append("eventId:");
		sb.append(this.eventId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("eventUserGroup:");
		if (this.eventUserGroup == null) {
			sb.append("null");
		} else {
			sb.append(this.eventUserGroup);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("title:");
		if (this.title == null) {
			sb.append("null");
		} else {
			sb.append(this.title);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("description:");
		if (this.description == null) {
			sb.append("null");
		} else {
			sb.append(this.description);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("imgUrl:");
		if (this.imgUrl == null) {
			sb.append("null");
		} else {
			sb.append(this.imgUrl);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("eventType:");
		if (this.eventType == null) {
			sb.append("null");
		} else {
			sb.append(this.eventType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("paymentType:");
		if (this.paymentType == null) {
			sb.append("null");
		} else {
			sb.append(this.paymentType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("frequency:");
		sb.append(this.frequency);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priority:");
		sb.append(this.priority);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("buttonAction:");
		if (this.buttonAction == null) {
			sb.append("null");
		} else {
			sb.append(this.buttonAction);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("buttonText:");
		if (this.buttonText == null) {
			sb.append("null");
		} else {
			sb.append(this.buttonText);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("buttonLink:");
		if (this.buttonLink == null) {
			sb.append("null");
		} else {
			sb.append(this.buttonLink);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dateBegin:");
		sb.append(this.dateBegin);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dateEnd:");
		sb.append(this.dateEnd);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("eventStatus:");
		if (this.eventStatus == null) {
			sb.append("null");
		} else {
			sb.append(this.eventStatus);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("userCreated:");
		if (this.userCreated == null) {
			sb.append("null");
		} else {
			sb.append(this.userCreated);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dateCreated:");
		sb.append(this.dateCreated);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("userUpdated:");
		if (this.userUpdated == null) {
			sb.append("null");
		} else {
			sb.append(this.userUpdated);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dateUpdated:");
		sb.append(this.dateUpdated);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dateLastRun:");
		sb.append(this.dateLastRun);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bit_vector = new BitSet(1);
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TEventV3ValueStandardSchemeFactory implements SchemeFactory {
		public TEventV3ValueStandardScheme getScheme() {
			return new TEventV3ValueStandardScheme();
		}
	}

	private static class TEventV3ValueStandardScheme extends StandardScheme<TEventV3Value> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TEventV3Value struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // EVENT_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.eventId = iprot.readI32();
						struct.setEventIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // EVENT_USER_GROUP
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.eventUserGroup = com.bliss.service.thrift.EEventUserGroup.findByValue(iprot.readI32());
						struct.setEventUserGroupIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // DESCRIPTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.description = iprot.readString();
						struct.setDescriptionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IMG_URL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.imgUrl = iprot.readString();
						struct.setImgUrlIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // EVENT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.eventType = EEventType.findByValue(iprot.readI32());
						struct.setEventTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // PAYMENT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.paymentType = EPaymentType.findByValue(iprot.readI32());
						struct.setPaymentTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // FREQUENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.frequency = iprot.readI16();
						struct.setFrequencyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // PRIORITY
					if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
						struct.priority = iprot.readByte();
						struct.setPriorityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // BUTTON_ACTION
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.buttonAction = EButtonAction.findByValue(iprot.readI32());
						struct.setButtonActionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // BUTTON_TEXT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.buttonText = iprot.readString();
						struct.setButtonTextIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // BUTTON_LINK
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.buttonLink = iprot.readString();
						struct.setButtonLinkIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // DATE_BEGIN
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dateBegin = iprot.readI64();
						struct.setDateBeginIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // DATE_END
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dateEnd = iprot.readI64();
						struct.setDateEndIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // EVENT_STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.eventStatus = EEventStatus.findByValue(iprot.readI32());
						struct.setEventStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // USER_CREATED
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.userCreated = iprot.readString();
						struct.setUserCreatedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // DATE_CREATED
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dateCreated = iprot.readI64();
						struct.setDateCreatedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // USER_UPDATED
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.userUpdated = iprot.readString();
						struct.setUserUpdatedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // DATE_UPDATED
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dateUpdated = iprot.readI64();
						struct.setDateUpdatedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // DATE_LAST_RUN
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.dateLastRun = iprot.readI64();
						struct.setDateLastRunIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TEventV3Value struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
			oprot.writeI32(struct.eventId);
			oprot.writeFieldEnd();
			if (struct.eventUserGroup != null) {
				oprot.writeFieldBegin(EVENT_USER_GROUP_FIELD_DESC);
				oprot.writeI32(struct.eventUserGroup.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.title != null) {
				oprot.writeFieldBegin(TITLE_FIELD_DESC);
				oprot.writeString(struct.title);
				oprot.writeFieldEnd();
			}
			if (struct.description != null) {
				oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
				oprot.writeString(struct.description);
				oprot.writeFieldEnd();
			}
			if (struct.imgUrl != null) {
				oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
				oprot.writeString(struct.imgUrl);
				oprot.writeFieldEnd();
			}
			if (struct.eventType != null) {
				oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
				oprot.writeI32(struct.eventType.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.paymentType != null) {
				oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
				oprot.writeI32(struct.paymentType.getValue());
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
			oprot.writeI16(struct.frequency);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
			oprot.writeByte(struct.priority);
			oprot.writeFieldEnd();
			if (struct.buttonAction != null) {
				oprot.writeFieldBegin(BUTTON_ACTION_FIELD_DESC);
				oprot.writeI32(struct.buttonAction.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.buttonText != null) {
				oprot.writeFieldBegin(BUTTON_TEXT_FIELD_DESC);
				oprot.writeString(struct.buttonText);
				oprot.writeFieldEnd();
			}
			if (struct.buttonLink != null) {
				oprot.writeFieldBegin(BUTTON_LINK_FIELD_DESC);
				oprot.writeString(struct.buttonLink);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(DATE_BEGIN_FIELD_DESC);
			oprot.writeI64(struct.dateBegin);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DATE_END_FIELD_DESC);
			oprot.writeI64(struct.dateEnd);
			oprot.writeFieldEnd();
			if (struct.eventStatus != null) {
				oprot.writeFieldBegin(EVENT_STATUS_FIELD_DESC);
				oprot.writeI32(struct.eventStatus.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.userCreated != null) {
				oprot.writeFieldBegin(USER_CREATED_FIELD_DESC);
				oprot.writeString(struct.userCreated);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
			oprot.writeI64(struct.dateCreated);
			oprot.writeFieldEnd();
			if (struct.userUpdated != null) {
				oprot.writeFieldBegin(USER_UPDATED_FIELD_DESC);
				oprot.writeString(struct.userUpdated);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(DATE_UPDATED_FIELD_DESC);
			oprot.writeI64(struct.dateUpdated);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DATE_LAST_RUN_FIELD_DESC);
			oprot.writeI64(struct.dateLastRun);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TEventV3ValueTupleSchemeFactory implements SchemeFactory {
		public TEventV3ValueTupleScheme getScheme() {
			return new TEventV3ValueTupleScheme();
		}
	}

	private static class TEventV3ValueTupleScheme extends TupleScheme<TEventV3Value> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TEventV3Value struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetEventId()) {
				optionals.set(0);
			}
			if (struct.isSetEventUserGroup()) {
				optionals.set(1);
			}
			if (struct.isSetTitle()) {
				optionals.set(2);
			}
			if (struct.isSetDescription()) {
				optionals.set(3);
			}
			if (struct.isSetImgUrl()) {
				optionals.set(4);
			}
			if (struct.isSetEventType()) {
				optionals.set(5);
			}
			if (struct.isSetPaymentType()) {
				optionals.set(6);
			}
			if (struct.isSetFrequency()) {
				optionals.set(7);
			}
			if (struct.isSetPriority()) {
				optionals.set(8);
			}
			if (struct.isSetButtonAction()) {
				optionals.set(9);
			}
			if (struct.isSetButtonText()) {
				optionals.set(10);
			}
			if (struct.isSetButtonLink()) {
				optionals.set(11);
			}
			if (struct.isSetDateBegin()) {
				optionals.set(12);
			}
			if (struct.isSetDateEnd()) {
				optionals.set(13);
			}
			if (struct.isSetEventStatus()) {
				optionals.set(14);
			}
			if (struct.isSetUserCreated()) {
				optionals.set(15);
			}
			if (struct.isSetDateCreated()) {
				optionals.set(16);
			}
			if (struct.isSetUserUpdated()) {
				optionals.set(17);
			}
			if (struct.isSetDateUpdated()) {
				optionals.set(18);
			}
			if (struct.isSetDateLastRun()) {
				optionals.set(19);
			}
			oprot.writeBitSet(optionals, 20);
			if (struct.isSetEventId()) {
				oprot.writeI32(struct.eventId);
			}
			if (struct.isSetEventUserGroup()) {
				oprot.writeI32(struct.eventUserGroup.getValue());
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
			if (struct.isSetDescription()) {
				oprot.writeString(struct.description);
			}
			if (struct.isSetImgUrl()) {
				oprot.writeString(struct.imgUrl);
			}
			if (struct.isSetEventType()) {
				oprot.writeI32(struct.eventType.getValue());
			}
			if (struct.isSetPaymentType()) {
				oprot.writeI32(struct.paymentType.getValue());
			}
			if (struct.isSetFrequency()) {
				oprot.writeI16(struct.frequency);
			}
			if (struct.isSetPriority()) {
				oprot.writeByte(struct.priority);
			}
			if (struct.isSetButtonAction()) {
				oprot.writeI32(struct.buttonAction.getValue());
			}
			if (struct.isSetButtonText()) {
				oprot.writeString(struct.buttonText);
			}
			if (struct.isSetButtonLink()) {
				oprot.writeString(struct.buttonLink);
			}
			if (struct.isSetDateBegin()) {
				oprot.writeI64(struct.dateBegin);
			}
			if (struct.isSetDateEnd()) {
				oprot.writeI64(struct.dateEnd);
			}
			if (struct.isSetEventStatus()) {
				oprot.writeI32(struct.eventStatus.getValue());
			}
			if (struct.isSetUserCreated()) {
				oprot.writeString(struct.userCreated);
			}
			if (struct.isSetDateCreated()) {
				oprot.writeI64(struct.dateCreated);
			}
			if (struct.isSetUserUpdated()) {
				oprot.writeString(struct.userUpdated);
			}
			if (struct.isSetDateUpdated()) {
				oprot.writeI64(struct.dateUpdated);
			}
			if (struct.isSetDateLastRun()) {
				oprot.writeI64(struct.dateLastRun);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TEventV3Value struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(20);
			if (incoming.get(0)) {
				struct.eventId = iprot.readI32();
				struct.setEventIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.eventUserGroup = com.bliss.service.thrift.EEventUserGroup.findByValue(iprot.readI32());
				struct.setEventUserGroupIsSet(true);
			}
			if (incoming.get(2)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
			if (incoming.get(3)) {
				struct.description = iprot.readString();
				struct.setDescriptionIsSet(true);
			}
			if (incoming.get(4)) {
				struct.imgUrl = iprot.readString();
				struct.setImgUrlIsSet(true);
			}
			if (incoming.get(5)) {
				struct.eventType = EEventType.findByValue(iprot.readI32());
				struct.setEventTypeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.paymentType = EPaymentType.findByValue(iprot.readI32());
				struct.setPaymentTypeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.frequency = iprot.readI16();
				struct.setFrequencyIsSet(true);
			}
			if (incoming.get(8)) {
				struct.priority = iprot.readByte();
				struct.setPriorityIsSet(true);
			}
			if (incoming.get(9)) {
				struct.buttonAction = EButtonAction.findByValue(iprot.readI32());
				struct.setButtonActionIsSet(true);
			}
			if (incoming.get(10)) {
				struct.buttonText = iprot.readString();
				struct.setButtonTextIsSet(true);
			}
			if (incoming.get(11)) {
				struct.buttonLink = iprot.readString();
				struct.setButtonLinkIsSet(true);
			}
			if (incoming.get(12)) {
				struct.dateBegin = iprot.readI64();
				struct.setDateBeginIsSet(true);
			}
			if (incoming.get(13)) {
				struct.dateEnd = iprot.readI64();
				struct.setDateEndIsSet(true);
			}
			if (incoming.get(14)) {
				struct.eventStatus = EEventStatus.findByValue(iprot.readI32());
				struct.setEventStatusIsSet(true);
			}
			if (incoming.get(15)) {
				struct.userCreated = iprot.readString();
				struct.setUserCreatedIsSet(true);
			}
			if (incoming.get(16)) {
				struct.dateCreated = iprot.readI64();
				struct.setDateCreatedIsSet(true);
			}
			if (incoming.get(17)) {
				struct.userUpdated = iprot.readString();
				struct.setUserUpdatedIsSet(true);
			}
			if (incoming.get(18)) {
				struct.dateUpdated = iprot.readI64();
				struct.setDateUpdatedIsSet(true);
			}
			if (incoming.get(19)) {
				struct.dateLastRun = iprot.readI64();
				struct.setDateLastRunIsSet(true);
			}
		}
	}

}
