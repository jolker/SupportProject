/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.nplay.service.eventv3.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEventV3 {
    
    public interface Iface extends com.bliss.service.thrift.TServiceBase2.Iface {
        
        public List<TEventV3Value> getBanner(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException;
        
        public List<TEventV3Value> getPopup(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException;
        
        public TEventV3Value getEvent(int eventId) throws org.apache.thrift.TException;
        
        public List<TEventV3Value> getAllEvent(long dateBegin, long dateEnd, short page, short offset) throws org.apache.thrift.TException;
        
        public TEventV3Value addEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException;
        
        public boolean updateEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException;
        
        public boolean updateStatus(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status) throws org.apache.thrift.TException;
        
    }
    
    public interface AsyncIface extends com.bliss.service.thrift.TServiceBase2 .AsyncIface {
        
        public void getBanner(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBanner_call> resultHandler) throws org.apache.thrift.TException;
        
        public void getPopup(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPopup_call> resultHandler) throws org.apache.thrift.TException;
        
        public void getEvent(int eventId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEvent_call> resultHandler) throws org.apache.thrift.TException;
        
        public void getAllEvent(long dateBegin, long dateEnd, short page, short offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllEvent_call> resultHandler) throws org.apache.thrift.TException;
        
        public void addEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addEvent_call> resultHandler) throws org.apache.thrift.TException;
        
        public void updateEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateEvent_call> resultHandler) throws org.apache.thrift.TException;
        
        public void updateStatus(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStatus_call> resultHandler) throws org.apache.thrift.TException;
        
    }
    
    public static class Client extends com.bliss.service.thrift.TServiceBase2.Client implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }
        
        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }
        
        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }
        
        public List<TEventV3Value> getBanner(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException
        {
            send_getBanner(userProfile);
            return recv_getBanner();
        }
        
        public void send_getBanner(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException
        {
            getBanner_args args = new getBanner_args();
            args.setUserProfile(userProfile);
            sendBase("getBanner", args);
        }
        
        public List<TEventV3Value> recv_getBanner() throws org.apache.thrift.TException
        {
            getBanner_result result = new getBanner_result();
            receiveBase(result, "getBanner");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBanner failed: unknown result");
        }
        
        public List<TEventV3Value> getPopup(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException
        {
            send_getPopup(userProfile);
            return recv_getPopup();
        }
        
        public void send_getPopup(com.bliss.service.thrift.TUserMiniProfile userProfile) throws org.apache.thrift.TException
        {
            getPopup_args args = new getPopup_args();
            args.setUserProfile(userProfile);
            sendBase("getPopup", args);
        }
        
        public List<TEventV3Value> recv_getPopup() throws org.apache.thrift.TException
        {
            getPopup_result result = new getPopup_result();
            receiveBase(result, "getPopup");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPopup failed: unknown result");
        }
        
        public TEventV3Value getEvent(int eventId) throws org.apache.thrift.TException
        {
            send_getEvent(eventId);
            return recv_getEvent();
        }
        
        public void send_getEvent(int eventId) throws org.apache.thrift.TException
        {
            getEvent_args args = new getEvent_args();
            args.setEventId(eventId);
            sendBase("getEvent", args);
        }
        
        public TEventV3Value recv_getEvent() throws org.apache.thrift.TException
        {
            getEvent_result result = new getEvent_result();
            receiveBase(result, "getEvent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvent failed: unknown result");
        }
        
        public List<TEventV3Value> getAllEvent(long dateBegin, long dateEnd, short page, short offset) throws org.apache.thrift.TException
        {
            send_getAllEvent(dateBegin, dateEnd, page, offset);
            return recv_getAllEvent();
        }
        
        public void send_getAllEvent(long dateBegin, long dateEnd, short page, short offset) throws org.apache.thrift.TException
        {
            getAllEvent_args args = new getAllEvent_args();
            args.setDateBegin(dateBegin);
            args.setDateEnd(dateEnd);
            args.setPage(page);
            args.setOffset(offset);
            sendBase("getAllEvent", args);
        }
        
        public List<TEventV3Value> recv_getAllEvent() throws org.apache.thrift.TException
        {
            getAllEvent_result result = new getAllEvent_result();
            receiveBase(result, "getAllEvent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllEvent failed: unknown result");
        }
        
        public TEventV3Value addEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException
        {
            send_addEvent(auth, event);
            return recv_addEvent();
        }
        
        public void send_addEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException
        {
            addEvent_args args = new addEvent_args();
            args.setAuth(auth);
            args.setEvent(event);
            sendBase("addEvent", args);
        }
        
        public TEventV3Value recv_addEvent() throws org.apache.thrift.TException
        {
            addEvent_result result = new addEvent_result();
            receiveBase(result, "addEvent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addEvent failed: unknown result");
        }
        
        public boolean updateEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException
        {
            send_updateEvent(auth, event);
            return recv_updateEvent();
        }
        
        public void send_updateEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event) throws org.apache.thrift.TException
        {
            updateEvent_args args = new updateEvent_args();
            args.setAuth(auth);
            args.setEvent(event);
            sendBase("updateEvent", args);
        }
        
        public boolean recv_updateEvent() throws org.apache.thrift.TException
        {
            updateEvent_result result = new updateEvent_result();
            receiveBase(result, "updateEvent");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEvent failed: unknown result");
        }
        
        public boolean updateStatus(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status) throws org.apache.thrift.TException
        {
            send_updateStatus(auth, eventID, status);
            return recv_updateStatus();
        }
        
        public void send_updateStatus(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status) throws org.apache.thrift.TException
        {
            updateStatus_args args = new updateStatus_args();
            args.setAuth(auth);
            args.setEventID(eventID);
            args.setStatus(status);
            sendBase("updateStatus", args);
        }
        
        public boolean recv_updateStatus() throws org.apache.thrift.TException
        {
            updateStatus_result result = new updateStatus_result();
            receiveBase(result, "updateStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatus failed: unknown result");
        }
        
    }
    public static class AsyncClient extends com.bliss.service.thrift.TServiceBase2.AsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }
        
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }
        
        public void getBanner(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<getBanner_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getBanner_call method_call = new getBanner_call(userProfile, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class getBanner_call extends org.apache.thrift.async.TAsyncMethodCall {
            private com.bliss.service.thrift.TUserMiniProfile userProfile;
            public getBanner_call(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<getBanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userProfile = userProfile;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getBanner_args args = new getBanner_args();
                args.setUserProfile(userProfile);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public List<TEventV3Value> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getBanner();
            }
        }
        
        public void getPopup(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<getPopup_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPopup_call method_call = new getPopup_call(userProfile, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class getPopup_call extends org.apache.thrift.async.TAsyncMethodCall {
            private com.bliss.service.thrift.TUserMiniProfile userProfile;
            public getPopup_call(com.bliss.service.thrift.TUserMiniProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<getPopup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userProfile = userProfile;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPopup", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPopup_args args = new getPopup_args();
                args.setUserProfile(userProfile);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public List<TEventV3Value> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPopup();
            }
        }
        
        public void getEvent(int eventId, org.apache.thrift.async.AsyncMethodCallback<getEvent_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEvent_call method_call = new getEvent_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class getEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int eventId;
            public getEvent_call(int eventId, org.apache.thrift.async.AsyncMethodCallback<getEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.eventId = eventId;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEvent_args args = new getEvent_args();
                args.setEventId(eventId);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public TEventV3Value getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEvent();
            }
        }
        
        public void getAllEvent(long dateBegin, long dateEnd, short page, short offset, org.apache.thrift.async.AsyncMethodCallback<getAllEvent_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAllEvent_call method_call = new getAllEvent_call(dateBegin, dateEnd, page, offset, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class getAllEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long dateBegin;
            private long dateEnd;
            private short page;
            private short offset;
            public getAllEvent_call(long dateBegin, long dateEnd, short page, short offset, org.apache.thrift.async.AsyncMethodCallback<getAllEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.dateBegin = dateBegin;
                this.dateEnd = dateEnd;
                this.page = page;
                this.offset = offset;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAllEvent_args args = new getAllEvent_args();
                args.setDateBegin(dateBegin);
                args.setDateEnd(dateEnd);
                args.setPage(page);
                args.setOffset(offset);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public List<TEventV3Value> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAllEvent();
            }
        }
        
        public void addEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<addEvent_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addEvent_call method_call = new addEvent_call(auth, event, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class addEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private com.bliss.service.thrift.OpAuth auth;
            private TEventV3Value event;
            public addEvent_call(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<addEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.auth = auth;
                this.event = event;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addEvent_args args = new addEvent_args();
                args.setAuth(auth);
                args.setEvent(event);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public TEventV3Value getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addEvent();
            }
        }
        
        public void updateEvent(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<updateEvent_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateEvent_call method_call = new updateEvent_call(auth, event, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class updateEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
            private com.bliss.service.thrift.OpAuth auth;
            private TEventV3Value event;
            public updateEvent_call(com.bliss.service.thrift.OpAuth auth, TEventV3Value event, org.apache.thrift.async.AsyncMethodCallback<updateEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.auth = auth;
                this.event = event;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateEvent_args args = new updateEvent_args();
                args.setAuth(auth);
                args.setEvent(event);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateEvent();
            }
        }
        
        public void updateStatus(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatus_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateStatus_call method_call = new updateStatus_call(auth, eventID, status, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }
        
        public static class updateStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            private com.bliss.service.thrift.OpAuth auth;
            private int eventID;
            private EEventStatus status;
            public updateStatus_call(com.bliss.service.thrift.OpAuth auth, int eventID, EEventStatus status, org.apache.thrift.async.AsyncMethodCallback<updateStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.auth = auth;
                this.eventID = eventID;
                this.status = status;
            }
            
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateStatus_args args = new updateStatus_args();
                args.setAuth(auth);
                args.setEventID(eventID);
                args.setStatus(status);
                args.write(prot);
                prot.writeMessageEnd();
            }
            
            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_updateStatus();
            }
        }
        
    }
    
    public static class Processor<I extends Iface> extends com.bliss.service.thrift.TServiceBase2.Processor implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }
        
        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }
        
        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("getBanner", new getBanner());
            processMap.put("getPopup", new getPopup());
            processMap.put("getEvent", new getEvent());
            processMap.put("getAllEvent", new getAllEvent());
            processMap.put("addEvent", new addEvent());
            processMap.put("updateEvent", new updateEvent());
            processMap.put("updateStatus", new updateStatus());
            return processMap;
        }
        
        private static class getBanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBanner_args> {
            public getBanner() {
                super("getBanner");
            }
            
            protected getBanner_args getEmptyArgsInstance() {
                return new getBanner_args();
            }
            
            protected getBanner_result getResult(I iface, getBanner_args args) throws org.apache.thrift.TException {
                getBanner_result result = new getBanner_result();
                result.success = iface.getBanner(args.userProfile);
                return result;
            }
        }
        
        private static class getPopup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPopup_args> {
            public getPopup() {
                super("getPopup");
            }
            
            protected getPopup_args getEmptyArgsInstance() {
                return new getPopup_args();
            }
            
            protected getPopup_result getResult(I iface, getPopup_args args) throws org.apache.thrift.TException {
                getPopup_result result = new getPopup_result();
                result.success = iface.getPopup(args.userProfile);
                return result;
            }
        }
        
        private static class getEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvent_args> {
            public getEvent() {
                super("getEvent");
            }
            
            protected getEvent_args getEmptyArgsInstance() {
                return new getEvent_args();
            }
            
            protected getEvent_result getResult(I iface, getEvent_args args) throws org.apache.thrift.TException {
                getEvent_result result = new getEvent_result();
                result.success = iface.getEvent(args.eventId);
                return result;
            }
        }
        
        private static class getAllEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllEvent_args> {
            public getAllEvent() {
                super("getAllEvent");
            }
            
            protected getAllEvent_args getEmptyArgsInstance() {
                return new getAllEvent_args();
            }
            
            protected getAllEvent_result getResult(I iface, getAllEvent_args args) throws org.apache.thrift.TException {
                getAllEvent_result result = new getAllEvent_result();
                result.success = iface.getAllEvent(args.dateBegin, args.dateEnd, args.page, args.offset);
                return result;
            }
        }
        
        private static class addEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEvent_args> {
            public addEvent() {
                super("addEvent");
            }
            
            protected addEvent_args getEmptyArgsInstance() {
                return new addEvent_args();
            }
            
            protected addEvent_result getResult(I iface, addEvent_args args) throws org.apache.thrift.TException {
                addEvent_result result = new addEvent_result();
                result.success = iface.addEvent(args.auth, args.event);
                return result;
            }
        }
        
        private static class updateEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEvent_args> {
            public updateEvent() {
                super("updateEvent");
            }
            
            protected updateEvent_args getEmptyArgsInstance() {
                return new updateEvent_args();
            }
            
            protected updateEvent_result getResult(I iface, updateEvent_args args) throws org.apache.thrift.TException {
                updateEvent_result result = new updateEvent_result();
                result.success = iface.updateEvent(args.auth, args.event);
                result.setSuccessIsSet(true);
                return result;
            }
        }
        
        private static class updateStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatus_args> {
            public updateStatus() {
                super("updateStatus");
            }
            
            protected updateStatus_args getEmptyArgsInstance() {
                return new updateStatus_args();
            }
            
            protected updateStatus_result getResult(I iface, updateStatus_args args) throws org.apache.thrift.TException {
                updateStatus_result result = new updateStatus_result();
                result.success = iface.updateStatus(args.auth, args.eventID, args.status);
                result.setSuccessIsSet(true);
                return result;
            }
        }
        
    }
    
    public static class getBanner_args implements org.apache.thrift.TBase<getBanner_args, getBanner_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBanner_args");
        
        private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getBanner_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getBanner_argsTupleSchemeFactory());
        }
        
        public com.bliss.service.thrift.TUserMiniProfile userProfile; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_PROFILE((short)1, "userProfile");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_PROFILE
                        return USER_PROFILE;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                           new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.TUserMiniProfile.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBanner_args.class, metaDataMap);
        }
        
        public getBanner_args() {
        }
        
        public getBanner_args(
                              com.bliss.service.thrift.TUserMiniProfile userProfile)
        {
            this();
            this.userProfile = userProfile;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBanner_args(getBanner_args other) {
            if (other.isSetUserProfile()) {
                this.userProfile = new com.bliss.service.thrift.TUserMiniProfile(other.userProfile);
            }
        }
        
        public getBanner_args deepCopy() {
            return new getBanner_args(this);
        }
        
        @Override
        public void clear() {
            this.userProfile = null;
        }
        
        public com.bliss.service.thrift.TUserMiniProfile getUserProfile() {
            return this.userProfile;
        }
        
        public getBanner_args setUserProfile(com.bliss.service.thrift.TUserMiniProfile userProfile) {
            this.userProfile = userProfile;
            return this;
        }
        
        public void unsetUserProfile() {
            this.userProfile = null;
        }
        
        /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
        public boolean isSetUserProfile() {
            return this.userProfile != null;
        }
        
        public void setUserProfileIsSet(boolean value) {
            if (!value) {
                this.userProfile = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_PROFILE:
                    if (value == null) {
                        unsetUserProfile();
                    } else {
                        setUserProfile((com.bliss.service.thrift.TUserMiniProfile)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_PROFILE:
                    return getUserProfile();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case USER_PROFILE:
                    return isSetUserProfile();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBanner_args)
                return this.equals((getBanner_args)that);
            return false;
        }
        
        public boolean equals(getBanner_args that) {
            if (that == null)
                return false;
            
            boolean this_present_userProfile = true && this.isSetUserProfile();
            boolean that_present_userProfile = true && that.isSetUserProfile();
            if (this_present_userProfile || that_present_userProfile) {
                if (!(this_present_userProfile && that_present_userProfile))
                    return false;
                if (!this.userProfile.equals(that.userProfile))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getBanner_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getBanner_args typedOther = (getBanner_args)other;
            
            lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(typedOther.isSetUserProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, typedOther.userProfile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBanner_args(");
            boolean first = true;
            
            sb.append("userProfile:");
            if (this.userProfile == null) {
                sb.append("null");
            } else {
                sb.append(this.userProfile);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getBanner_argsStandardSchemeFactory implements SchemeFactory {
            public getBanner_argsStandardScheme getScheme() {
                return new getBanner_argsStandardScheme();
            }
        }
        
        private static class getBanner_argsStandardScheme extends StandardScheme<getBanner_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getBanner_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.userProfile = new com.bliss.service.thrift.TUserMiniProfile();
                                struct.userProfile.read(iprot);
                                struct.setUserProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getBanner_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userProfile != null) {
                    oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
                    struct.userProfile.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getBanner_argsTupleSchemeFactory implements SchemeFactory {
            public getBanner_argsTupleScheme getScheme() {
                return new getBanner_argsTupleScheme();
            }
        }
        
        private static class getBanner_argsTupleScheme extends TupleScheme<getBanner_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBanner_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserProfile()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserProfile()) {
                    struct.userProfile.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBanner_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userProfile = new com.bliss.service.thrift.TUserMiniProfile();
                    struct.userProfile.read(iprot);
                    struct.setUserProfileIsSet(true);
                }
            }
        }
        
    }
    
    public static class getBanner_result implements org.apache.thrift.TBase<getBanner_result, getBanner_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBanner_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getBanner_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getBanner_resultTupleSchemeFactory());
        }
        
        public List<TEventV3Value> success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBanner_result.class, metaDataMap);
        }
        
        public getBanner_result() {
        }
        
        public getBanner_result(
                                List<TEventV3Value> success)
        {
            this();
            this.success = success;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getBanner_result(getBanner_result other) {
            if (other.isSetSuccess()) {
                List<TEventV3Value> __this__success = new ArrayList<TEventV3Value>();
                for (TEventV3Value other_element : other.success) {
                    __this__success.add(new TEventV3Value(other_element));
                }
                this.success = __this__success;
            }
        }
        
        public getBanner_result deepCopy() {
            return new getBanner_result(this);
        }
        
        @Override
        public void clear() {
            this.success = null;
        }
        
        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }
        
        public java.util.Iterator<TEventV3Value> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }
        
        public void addToSuccess(TEventV3Value elem) {
            if (this.success == null) {
                this.success = new ArrayList<TEventV3Value>();
            }
            this.success.add(elem);
        }
        
        public List<TEventV3Value> getSuccess() {
            return this.success;
        }
        
        public getBanner_result setSuccess(List<TEventV3Value> success) {
            this.success = success;
            return this;
        }
        
        public void unsetSuccess() {
            this.success = null;
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }
        
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<TEventV3Value>)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getBanner_result)
                return this.equals((getBanner_result)that);
            return false;
        }
        
        public boolean equals(getBanner_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getBanner_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getBanner_result typedOther = (getBanner_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getBanner_result(");
            boolean first = true;
            
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getBanner_resultStandardSchemeFactory implements SchemeFactory {
            public getBanner_resultStandardScheme getScheme() {
                return new getBanner_resultStandardScheme();
            }
        }
        
        private static class getBanner_resultStandardScheme extends StandardScheme<getBanner_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getBanner_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<TEventV3Value>(_list0.size);
                                    for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                                    {
                                        TEventV3Value _elem2; // required
                                        _elem2 = new TEventV3Value();
                                        _elem2.read(iprot);
                                        struct.success.add(_elem2);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getBanner_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (TEventV3Value _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getBanner_resultTupleSchemeFactory implements SchemeFactory {
            public getBanner_resultTupleScheme getScheme() {
                return new getBanner_resultTupleScheme();
            }
        }
        
        private static class getBanner_resultTupleScheme extends TupleScheme<getBanner_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getBanner_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (TEventV3Value _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getBanner_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<TEventV3Value>(_list5.size);
                        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
                        {
                            TEventV3Value _elem7; // required
                            _elem7 = new TEventV3Value();
                            _elem7.read(iprot);
                            struct.success.add(_elem7);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class getPopup_args implements org.apache.thrift.TBase<getPopup_args, getPopup_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPopup_args");
        
        private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPopup_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPopup_argsTupleSchemeFactory());
        }
        
        public com.bliss.service.thrift.TUserMiniProfile userProfile; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_PROFILE((short)1, "userProfile");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_PROFILE
                        return USER_PROFILE;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                           new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.TUserMiniProfile.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPopup_args.class, metaDataMap);
        }
        
        public getPopup_args() {
        }
        
        public getPopup_args(
                             com.bliss.service.thrift.TUserMiniProfile userProfile)
        {
            this();
            this.userProfile = userProfile;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPopup_args(getPopup_args other) {
            if (other.isSetUserProfile()) {
                this.userProfile = new com.bliss.service.thrift.TUserMiniProfile(other.userProfile);
            }
        }
        
        public getPopup_args deepCopy() {
            return new getPopup_args(this);
        }
        
        @Override
        public void clear() {
            this.userProfile = null;
        }
        
        public com.bliss.service.thrift.TUserMiniProfile getUserProfile() {
            return this.userProfile;
        }
        
        public getPopup_args setUserProfile(com.bliss.service.thrift.TUserMiniProfile userProfile) {
            this.userProfile = userProfile;
            return this;
        }
        
        public void unsetUserProfile() {
            this.userProfile = null;
        }
        
        /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
        public boolean isSetUserProfile() {
            return this.userProfile != null;
        }
        
        public void setUserProfileIsSet(boolean value) {
            if (!value) {
                this.userProfile = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USER_PROFILE:
                    if (value == null) {
                        unsetUserProfile();
                    } else {
                        setUserProfile((com.bliss.service.thrift.TUserMiniProfile)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_PROFILE:
                    return getUserProfile();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case USER_PROFILE:
                    return isSetUserProfile();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPopup_args)
                return this.equals((getPopup_args)that);
            return false;
        }
        
        public boolean equals(getPopup_args that) {
            if (that == null)
                return false;
            
            boolean this_present_userProfile = true && this.isSetUserProfile();
            boolean that_present_userProfile = true && that.isSetUserProfile();
            if (this_present_userProfile || that_present_userProfile) {
                if (!(this_present_userProfile && that_present_userProfile))
                    return false;
                if (!this.userProfile.equals(that.userProfile))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getPopup_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getPopup_args typedOther = (getPopup_args)other;
            
            lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(typedOther.isSetUserProfile());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserProfile()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, typedOther.userProfile);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPopup_args(");
            boolean first = true;
            
            sb.append("userProfile:");
            if (this.userProfile == null) {
                sb.append("null");
            } else {
                sb.append(this.userProfile);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getPopup_argsStandardSchemeFactory implements SchemeFactory {
            public getPopup_argsStandardScheme getScheme() {
                return new getPopup_argsStandardScheme();
            }
        }
        
        private static class getPopup_argsStandardScheme extends StandardScheme<getPopup_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getPopup_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_PROFILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.userProfile = new com.bliss.service.thrift.TUserMiniProfile();
                                struct.userProfile.read(iprot);
                                struct.setUserProfileIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getPopup_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userProfile != null) {
                    oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
                    struct.userProfile.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getPopup_argsTupleSchemeFactory implements SchemeFactory {
            public getPopup_argsTupleScheme getScheme() {
                return new getPopup_argsTupleScheme();
            }
        }
        
        private static class getPopup_argsTupleScheme extends TupleScheme<getPopup_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPopup_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUserProfile()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserProfile()) {
                    struct.userProfile.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPopup_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userProfile = new com.bliss.service.thrift.TUserMiniProfile();
                    struct.userProfile.read(iprot);
                    struct.setUserProfileIsSet(true);
                }
            }
        }
        
    }
    
    public static class getPopup_result implements org.apache.thrift.TBase<getPopup_result, getPopup_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPopup_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getPopup_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPopup_resultTupleSchemeFactory());
        }
        
        public List<TEventV3Value> success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPopup_result.class, metaDataMap);
        }
        
        public getPopup_result() {
        }
        
        public getPopup_result(
                               List<TEventV3Value> success)
        {
            this();
            this.success = success;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPopup_result(getPopup_result other) {
            if (other.isSetSuccess()) {
                List<TEventV3Value> __this__success = new ArrayList<TEventV3Value>();
                for (TEventV3Value other_element : other.success) {
                    __this__success.add(new TEventV3Value(other_element));
                }
                this.success = __this__success;
            }
        }
        
        public getPopup_result deepCopy() {
            return new getPopup_result(this);
        }
        
        @Override
        public void clear() {
            this.success = null;
        }
        
        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }
        
        public java.util.Iterator<TEventV3Value> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }
        
        public void addToSuccess(TEventV3Value elem) {
            if (this.success == null) {
                this.success = new ArrayList<TEventV3Value>();
            }
            this.success.add(elem);
        }
        
        public List<TEventV3Value> getSuccess() {
            return this.success;
        }
        
        public getPopup_result setSuccess(List<TEventV3Value> success) {
            this.success = success;
            return this;
        }
        
        public void unsetSuccess() {
            this.success = null;
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }
        
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<TEventV3Value>)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPopup_result)
                return this.equals((getPopup_result)that);
            return false;
        }
        
        public boolean equals(getPopup_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getPopup_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getPopup_result typedOther = (getPopup_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPopup_result(");
            boolean first = true;
            
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getPopup_resultStandardSchemeFactory implements SchemeFactory {
            public getPopup_resultStandardScheme getScheme() {
                return new getPopup_resultStandardScheme();
            }
        }
        
        private static class getPopup_resultStandardScheme extends StandardScheme<getPopup_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getPopup_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.success = new ArrayList<TEventV3Value>(_list8.size);
                                    for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                                    {
                                        TEventV3Value _elem10; // required
                                        _elem10 = new TEventV3Value();
                                        _elem10.read(iprot);
                                        struct.success.add(_elem10);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getPopup_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (TEventV3Value _iter11 : struct.success)
                        {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getPopup_resultTupleSchemeFactory implements SchemeFactory {
            public getPopup_resultTupleScheme getScheme() {
                return new getPopup_resultTupleScheme();
            }
        }
        
        private static class getPopup_resultTupleScheme extends TupleScheme<getPopup_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPopup_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (TEventV3Value _iter12 : struct.success)
                        {
                            _iter12.write(oprot);
                        }
                    }
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPopup_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<TEventV3Value>(_list13.size);
                        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                        {
                            TEventV3Value _elem15; // required
                            _elem15 = new TEventV3Value();
                            _elem15.read(iprot);
                            struct.success.add(_elem15);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class getEvent_args implements org.apache.thrift.TBase<getEvent_args, getEvent_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvent_args");
        
        private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getEvent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getEvent_argsTupleSchemeFactory());
        }
        
        public int eventId; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EVENT_ID((short)1, "eventId");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // EVENT_ID
                        return EVENT_ID;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        private static final int __EVENTID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvent_args.class, metaDataMap);
        }
        
        public getEvent_args() {
        }
        
        public getEvent_args(
                             int eventId)
        {
            this();
            this.eventId = eventId;
            setEventIdIsSet(true);
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEvent_args(getEvent_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.eventId = other.eventId;
        }
        
        public getEvent_args deepCopy() {
            return new getEvent_args(this);
        }
        
        @Override
        public void clear() {
            setEventIdIsSet(false);
            this.eventId = 0;
        }
        
        public int getEventId() {
            return this.eventId;
        }
        
        public getEvent_args setEventId(int eventId) {
            this.eventId = eventId;
            setEventIdIsSet(true);
            return this;
        }
        
        public void unsetEventId() {
            __isset_bit_vector.clear(__EVENTID_ISSET_ID);
        }
        
        /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
        public boolean isSetEventId() {
            return __isset_bit_vector.get(__EVENTID_ISSET_ID);
        }
        
        public void setEventIdIsSet(boolean value) {
            __isset_bit_vector.set(__EVENTID_ISSET_ID, value);
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EVENT_ID:
                    if (value == null) {
                        unsetEventId();
                    } else {
                        setEventId((Integer)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EVENT_ID:
                    return Integer.valueOf(getEventId());
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case EVENT_ID:
                    return isSetEventId();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getEvent_args)
                return this.equals((getEvent_args)that);
            return false;
        }
        
        public boolean equals(getEvent_args that) {
            if (that == null)
                return false;
            
            boolean this_present_eventId = true;
            boolean that_present_eventId = true;
            if (this_present_eventId || that_present_eventId) {
                if (!(this_present_eventId && that_present_eventId))
                    return false;
                if (this.eventId != that.eventId)
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getEvent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getEvent_args typedOther = (getEvent_args)other;
            
            lastComparison = Boolean.valueOf(isSetEventId()).compareTo(typedOther.isSetEventId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEventId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, typedOther.eventId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getEvent_args(");
            boolean first = true;
            
            sb.append("eventId:");
            sb.append(this.eventId);
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getEvent_argsStandardSchemeFactory implements SchemeFactory {
            public getEvent_argsStandardScheme getScheme() {
                return new getEvent_argsStandardScheme();
            }
        }
        
        private static class getEvent_argsStandardScheme extends StandardScheme<getEvent_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getEvent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EVENT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.eventId = iprot.readI32();
                                struct.setEventIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getEvent_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
                oprot.writeI32(struct.eventId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getEvent_argsTupleSchemeFactory implements SchemeFactory {
            public getEvent_argsTupleScheme getScheme() {
                return new getEvent_argsTupleScheme();
            }
        }
        
        private static class getEvent_argsTupleScheme extends TupleScheme<getEvent_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetEventId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetEventId()) {
                    oprot.writeI32(struct.eventId);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.eventId = iprot.readI32();
                    struct.setEventIdIsSet(true);
                }
            }
        }
        
    }
    
    public static class getEvent_result implements org.apache.thrift.TBase<getEvent_result, getEvent_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvent_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getEvent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getEvent_resultTupleSchemeFactory());
        }
        
        public TEventV3Value success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvent_result.class, metaDataMap);
        }
        
        public getEvent_result() {
        }
        
        public getEvent_result(
                               TEventV3Value success)
        {
            this();
            this.success = success;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEvent_result(getEvent_result other) {
            if (other.isSetSuccess()) {
                this.success = new TEventV3Value(other.success);
            }
        }
        
        public getEvent_result deepCopy() {
            return new getEvent_result(this);
        }
        
        @Override
        public void clear() {
            this.success = null;
        }
        
        public TEventV3Value getSuccess() {
            return this.success;
        }
        
        public getEvent_result setSuccess(TEventV3Value success) {
            this.success = success;
            return this;
        }
        
        public void unsetSuccess() {
            this.success = null;
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }
        
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((TEventV3Value)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getEvent_result)
                return this.equals((getEvent_result)that);
            return false;
        }
        
        public boolean equals(getEvent_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getEvent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getEvent_result typedOther = (getEvent_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getEvent_result(");
            boolean first = true;
            
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getEvent_resultStandardSchemeFactory implements SchemeFactory {
            public getEvent_resultStandardScheme getScheme() {
                return new getEvent_resultStandardScheme();
            }
        }
        
        private static class getEvent_resultStandardScheme extends StandardScheme<getEvent_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getEvent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new TEventV3Value();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getEvent_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getEvent_resultTupleSchemeFactory implements SchemeFactory {
            public getEvent_resultTupleScheme getScheme() {
                return new getEvent_resultTupleScheme();
            }
        }
        
        private static class getEvent_resultTupleScheme extends TupleScheme<getEvent_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new TEventV3Value();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class getAllEvent_args implements org.apache.thrift.TBase<getAllEvent_args, getAllEvent_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllEvent_args");
        
        private static final org.apache.thrift.protocol.TField DATE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("dateBegin", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("dateEnd", org.apache.thrift.protocol.TType.I64, (short)2);
        private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I16, (short)3);
        private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I16, (short)4);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getAllEvent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllEvent_argsTupleSchemeFactory());
        }
        
        public long dateBegin; // required
        public long dateEnd; // required
        public short page; // required
        public short offset; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DATE_BEGIN((short)1, "dateBegin"),
            DATE_END((short)2, "dateEnd"),
            PAGE((short)3, "page"),
            OFFSET((short)4, "offset");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DATE_BEGIN
                        return DATE_BEGIN;
                    case 2: // DATE_END
                        return DATE_END;
                    case 3: // PAGE
                        return PAGE;
                    case 4: // OFFSET
                        return OFFSET;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        private static final int __DATEBEGIN_ISSET_ID = 0;
        private static final int __DATEEND_ISSET_ID = 1;
        private static final int __PAGE_ISSET_ID = 2;
        private static final int __OFFSET_ISSET_ID = 3;
        private BitSet __isset_bit_vector = new BitSet(4);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DATE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("dateBegin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.DATE_END, new org.apache.thrift.meta_data.FieldMetaData("dateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
            tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                     new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllEvent_args.class, metaDataMap);
        }
        
        public getAllEvent_args() {
        }
        
        public getAllEvent_args(
                                long dateBegin,
                                long dateEnd,
                                short page,
                                short offset)
        {
            this();
            this.dateBegin = dateBegin;
            setDateBeginIsSet(true);
            this.dateEnd = dateEnd;
            setDateEndIsSet(true);
            this.page = page;
            setPageIsSet(true);
            this.offset = offset;
            setOffsetIsSet(true);
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllEvent_args(getAllEvent_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.dateBegin = other.dateBegin;
            this.dateEnd = other.dateEnd;
            this.page = other.page;
            this.offset = other.offset;
        }
        
        public getAllEvent_args deepCopy() {
            return new getAllEvent_args(this);
        }
        
        @Override
        public void clear() {
            setDateBeginIsSet(false);
            this.dateBegin = 0;
            setDateEndIsSet(false);
            this.dateEnd = 0;
            setPageIsSet(false);
            this.page = 0;
            setOffsetIsSet(false);
            this.offset = 0;
        }
        
        public long getDateBegin() {
            return this.dateBegin;
        }
        
        public getAllEvent_args setDateBegin(long dateBegin) {
            this.dateBegin = dateBegin;
            setDateBeginIsSet(true);
            return this;
        }
        
        public void unsetDateBegin() {
            __isset_bit_vector.clear(__DATEBEGIN_ISSET_ID);
        }
        
        /** Returns true if field dateBegin is set (has been assigned a value) and false otherwise */
        public boolean isSetDateBegin() {
            return __isset_bit_vector.get(__DATEBEGIN_ISSET_ID);
        }
        
        public void setDateBeginIsSet(boolean value) {
            __isset_bit_vector.set(__DATEBEGIN_ISSET_ID, value);
        }
        
        public long getDateEnd() {
            return this.dateEnd;
        }
        
        public getAllEvent_args setDateEnd(long dateEnd) {
            this.dateEnd = dateEnd;
            setDateEndIsSet(true);
            return this;
        }
        
        public void unsetDateEnd() {
            __isset_bit_vector.clear(__DATEEND_ISSET_ID);
        }
        
        /** Returns true if field dateEnd is set (has been assigned a value) and false otherwise */
        public boolean isSetDateEnd() {
            return __isset_bit_vector.get(__DATEEND_ISSET_ID);
        }
        
        public void setDateEndIsSet(boolean value) {
            __isset_bit_vector.set(__DATEEND_ISSET_ID, value);
        }
        
        public short getPage() {
            return this.page;
        }
        
        public getAllEvent_args setPage(short page) {
            this.page = page;
            setPageIsSet(true);
            return this;
        }
        
        public void unsetPage() {
            __isset_bit_vector.clear(__PAGE_ISSET_ID);
        }
        
        /** Returns true if field page is set (has been assigned a value) and false otherwise */
        public boolean isSetPage() {
            return __isset_bit_vector.get(__PAGE_ISSET_ID);
        }
        
        public void setPageIsSet(boolean value) {
            __isset_bit_vector.set(__PAGE_ISSET_ID, value);
        }
        
        public short getOffset() {
            return this.offset;
        }
        
        public getAllEvent_args setOffset(short offset) {
            this.offset = offset;
            setOffsetIsSet(true);
            return this;
        }
        
        public void unsetOffset() {
            __isset_bit_vector.clear(__OFFSET_ISSET_ID);
        }
        
        /** Returns true if field offset is set (has been assigned a value) and false otherwise */
        public boolean isSetOffset() {
            return __isset_bit_vector.get(__OFFSET_ISSET_ID);
        }
        
        public void setOffsetIsSet(boolean value) {
            __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DATE_BEGIN:
                    if (value == null) {
                        unsetDateBegin();
                    } else {
                        setDateBegin((Long)value);
                    }
                    break;
                    
                case DATE_END:
                    if (value == null) {
                        unsetDateEnd();
                    } else {
                        setDateEnd((Long)value);
                    }
                    break;
                    
                case PAGE:
                    if (value == null) {
                        unsetPage();
                    } else {
                        setPage((Short)value);
                    }
                    break;
                    
                case OFFSET:
                    if (value == null) {
                        unsetOffset();
                    } else {
                        setOffset((Short)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DATE_BEGIN:
                    return Long.valueOf(getDateBegin());
                    
                case DATE_END:
                    return Long.valueOf(getDateEnd());
                    
                case PAGE:
                    return Short.valueOf(getPage());
                    
                case OFFSET:
                    return Short.valueOf(getOffset());
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case DATE_BEGIN:
                    return isSetDateBegin();
                case DATE_END:
                    return isSetDateEnd();
                case PAGE:
                    return isSetPage();
                case OFFSET:
                    return isSetOffset();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllEvent_args)
                return this.equals((getAllEvent_args)that);
            return false;
        }
        
        public boolean equals(getAllEvent_args that) {
            if (that == null)
                return false;
            
            boolean this_present_dateBegin = true;
            boolean that_present_dateBegin = true;
            if (this_present_dateBegin || that_present_dateBegin) {
                if (!(this_present_dateBegin && that_present_dateBegin))
                    return false;
                if (this.dateBegin != that.dateBegin)
                    return false;
            }
            
            boolean this_present_dateEnd = true;
            boolean that_present_dateEnd = true;
            if (this_present_dateEnd || that_present_dateEnd) {
                if (!(this_present_dateEnd && that_present_dateEnd))
                    return false;
                if (this.dateEnd != that.dateEnd)
                    return false;
            }
            
            boolean this_present_page = true;
            boolean that_present_page = true;
            if (this_present_page || that_present_page) {
                if (!(this_present_page && that_present_page))
                    return false;
                if (this.page != that.page)
                    return false;
            }
            
            boolean this_present_offset = true;
            boolean that_present_offset = true;
            if (this_present_offset || that_present_offset) {
                if (!(this_present_offset && that_present_offset))
                    return false;
                if (this.offset != that.offset)
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getAllEvent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getAllEvent_args typedOther = (getAllEvent_args)other;
            
            lastComparison = Boolean.valueOf(isSetDateBegin()).compareTo(typedOther.isSetDateBegin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDateBegin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateBegin, typedOther.dateBegin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDateEnd()).compareTo(typedOther.isSetDateEnd());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDateEnd()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateEnd, typedOther.dateEnd);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOffset()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllEvent_args(");
            boolean first = true;
            
            sb.append("dateBegin:");
            sb.append(this.dateBegin);
            first = false;
            if (!first) sb.append(", ");
            sb.append("dateEnd:");
            sb.append(this.dateEnd);
            first = false;
            if (!first) sb.append(", ");
            sb.append("page:");
            sb.append(this.page);
            first = false;
            if (!first) sb.append(", ");
            sb.append("offset:");
            sb.append(this.offset);
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getAllEvent_argsStandardSchemeFactory implements SchemeFactory {
            public getAllEvent_argsStandardScheme getScheme() {
                return new getAllEvent_argsStandardScheme();
            }
        }
        
        private static class getAllEvent_argsStandardScheme extends StandardScheme<getAllEvent_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllEvent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DATE_BEGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.dateBegin = iprot.readI64();
                                struct.setDateBeginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATE_END
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.dateEnd = iprot.readI64();
                                struct.setDateEndIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                                struct.page = iprot.readI16();
                                struct.setPageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OFFSET
                            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                                struct.offset = iprot.readI16();
                                struct.setOffsetIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllEvent_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(DATE_BEGIN_FIELD_DESC);
                oprot.writeI64(struct.dateBegin);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(DATE_END_FIELD_DESC);
                oprot.writeI64(struct.dateEnd);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(PAGE_FIELD_DESC);
                oprot.writeI16(struct.page);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(OFFSET_FIELD_DESC);
                oprot.writeI16(struct.offset);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getAllEvent_argsTupleSchemeFactory implements SchemeFactory {
            public getAllEvent_argsTupleScheme getScheme() {
                return new getAllEvent_argsTupleScheme();
            }
        }
        
        private static class getAllEvent_argsTupleScheme extends TupleScheme<getAllEvent_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDateBegin()) {
                    optionals.set(0);
                }
                if (struct.isSetDateEnd()) {
                    optionals.set(1);
                }
                if (struct.isSetPage()) {
                    optionals.set(2);
                }
                if (struct.isSetOffset()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetDateBegin()) {
                    oprot.writeI64(struct.dateBegin);
                }
                if (struct.isSetDateEnd()) {
                    oprot.writeI64(struct.dateEnd);
                }
                if (struct.isSetPage()) {
                    oprot.writeI16(struct.page);
                }
                if (struct.isSetOffset()) {
                    oprot.writeI16(struct.offset);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.dateBegin = iprot.readI64();
                    struct.setDateBeginIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.dateEnd = iprot.readI64();
                    struct.setDateEndIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.page = iprot.readI16();
                    struct.setPageIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.offset = iprot.readI16();
                    struct.setOffsetIsSet(true);
                }
            }
        }
        
    }
    
    public static class getAllEvent_result implements org.apache.thrift.TBase<getAllEvent_result, getAllEvent_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllEvent_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new getAllEvent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllEvent_resultTupleSchemeFactory());
        }
        
        public List<TEventV3Value> success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                                                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllEvent_result.class, metaDataMap);
        }
        
        public getAllEvent_result() {
        }
        
        public getAllEvent_result(
                                  List<TEventV3Value> success)
        {
            this();
            this.success = success;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllEvent_result(getAllEvent_result other) {
            if (other.isSetSuccess()) {
                List<TEventV3Value> __this__success = new ArrayList<TEventV3Value>();
                for (TEventV3Value other_element : other.success) {
                    __this__success.add(new TEventV3Value(other_element));
                }
                this.success = __this__success;
            }
        }
        
        public getAllEvent_result deepCopy() {
            return new getAllEvent_result(this);
        }
        
        @Override
        public void clear() {
            this.success = null;
        }
        
        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }
        
        public java.util.Iterator<TEventV3Value> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }
        
        public void addToSuccess(TEventV3Value elem) {
            if (this.success == null) {
                this.success = new ArrayList<TEventV3Value>();
            }
            this.success.add(elem);
        }
        
        public List<TEventV3Value> getSuccess() {
            return this.success;
        }
        
        public getAllEvent_result setSuccess(List<TEventV3Value> success) {
            this.success = success;
            return this;
        }
        
        public void unsetSuccess() {
            this.success = null;
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }
        
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<TEventV3Value>)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllEvent_result)
                return this.equals((getAllEvent_result)that);
            return false;
        }
        
        public boolean equals(getAllEvent_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(getAllEvent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            getAllEvent_result typedOther = (getAllEvent_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllEvent_result(");
            boolean first = true;
            
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class getAllEvent_resultStandardSchemeFactory implements SchemeFactory {
            public getAllEvent_resultStandardScheme getScheme() {
                return new getAllEvent_resultStandardScheme();
            }
        }
        
        private static class getAllEvent_resultStandardScheme extends StandardScheme<getAllEvent_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllEvent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.success = new ArrayList<TEventV3Value>(_list16.size);
                                    for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                                    {
                                        TEventV3Value _elem18; // required
                                        _elem18 = new TEventV3Value();
                                        _elem18.read(iprot);
                                        struct.success.add(_elem18);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllEvent_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (TEventV3Value _iter19 : struct.success)
                        {
                            _iter19.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class getAllEvent_resultTupleSchemeFactory implements SchemeFactory {
            public getAllEvent_resultTupleScheme getScheme() {
                return new getAllEvent_resultTupleScheme();
            }
        }
        
        private static class getAllEvent_resultTupleScheme extends TupleScheme<getAllEvent_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (TEventV3Value _iter20 : struct.success)
                        {
                            _iter20.write(oprot);
                        }
                    }
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<TEventV3Value>(_list21.size);
                        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                        {
                            TEventV3Value _elem23; // required
                            _elem23 = new TEventV3Value();
                            _elem23.read(iprot);
                            struct.success.add(_elem23);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class addEvent_args implements org.apache.thrift.TBase<addEvent_args, addEvent_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_args");
        
        private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addEvent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addEvent_argsTupleSchemeFactory());
        }
        
        public com.bliss.service.thrift.OpAuth auth; // required
        public TEventV3Value event; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            AUTH((short)1, "auth"),
            EVENT((short)2, "event");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // AUTH
                        return AUTH;
                    case 2: // EVENT
                        return EVENT;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
            tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_args.class, metaDataMap);
        }
        
        public addEvent_args() {
        }
        
        public addEvent_args(
                             com.bliss.service.thrift.OpAuth auth,
                             TEventV3Value event)
        {
            this();
            this.auth = auth;
            this.event = event;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addEvent_args(addEvent_args other) {
            if (other.isSetAuth()) {
                this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
            }
            if (other.isSetEvent()) {
                this.event = new TEventV3Value(other.event);
            }
        }
        
        public addEvent_args deepCopy() {
            return new addEvent_args(this);
        }
        
        @Override
        public void clear() {
            this.auth = null;
            this.event = null;
        }
        
        public com.bliss.service.thrift.OpAuth getAuth() {
            return this.auth;
        }
        
        public addEvent_args setAuth(com.bliss.service.thrift.OpAuth auth) {
            this.auth = auth;
            return this;
        }
        
        public void unsetAuth() {
            this.auth = null;
        }
        
        /** Returns true if field auth is set (has been assigned a value) and false otherwise */
        public boolean isSetAuth() {
            return this.auth != null;
        }
        
        public void setAuthIsSet(boolean value) {
            if (!value) {
                this.auth = null;
            }
        }
        
        public TEventV3Value getEvent() {
            return this.event;
        }
        
        public addEvent_args setEvent(TEventV3Value event) {
            this.event = event;
            return this;
        }
        
        public void unsetEvent() {
            this.event = null;
        }
        
        /** Returns true if field event is set (has been assigned a value) and false otherwise */
        public boolean isSetEvent() {
            return this.event != null;
        }
        
        public void setEventIsSet(boolean value) {
            if (!value) {
                this.event = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case AUTH:
                    if (value == null) {
                        unsetAuth();
                    } else {
                        setAuth((com.bliss.service.thrift.OpAuth)value);
                    }
                    break;
                    
                case EVENT:
                    if (value == null) {
                        unsetEvent();
                    } else {
                        setEvent((TEventV3Value)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case AUTH:
                    return getAuth();
                    
                case EVENT:
                    return getEvent();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case AUTH:
                    return isSetAuth();
                case EVENT:
                    return isSetEvent();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addEvent_args)
                return this.equals((addEvent_args)that);
            return false;
        }
        
        public boolean equals(addEvent_args that) {
            if (that == null)
                return false;
            
            boolean this_present_auth = true && this.isSetAuth();
            boolean that_present_auth = true && that.isSetAuth();
            if (this_present_auth || that_present_auth) {
                if (!(this_present_auth && that_present_auth))
                    return false;
                if (!this.auth.equals(that.auth))
                    return false;
            }
            
            boolean this_present_event = true && this.isSetEvent();
            boolean that_present_event = true && that.isSetEvent();
            if (this_present_event || that_present_event) {
                if (!(this_present_event && that_present_event))
                    return false;
                if (!this.event.equals(that.event))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(addEvent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            addEvent_args typedOther = (addEvent_args)other;
            
            lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuth()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEvent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, typedOther.event);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addEvent_args(");
            boolean first = true;
            
            sb.append("auth:");
            if (this.auth == null) {
                sb.append("null");
            } else {
                sb.append(this.auth);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("event:");
            if (this.event == null) {
                sb.append("null");
            } else {
                sb.append(this.event);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class addEvent_argsStandardSchemeFactory implements SchemeFactory {
            public addEvent_argsStandardScheme getScheme() {
                return new addEvent_argsStandardScheme();
            }
        }
        
        private static class addEvent_argsStandardScheme extends StandardScheme<addEvent_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // AUTH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.auth = new com.bliss.service.thrift.OpAuth();
                                struct.auth.read(iprot);
                                struct.setAuthIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EVENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.event = new TEventV3Value();
                                struct.event.read(iprot);
                                struct.setEventIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.auth != null) {
                    oprot.writeFieldBegin(AUTH_FIELD_DESC);
                    struct.auth.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.event != null) {
                    oprot.writeFieldBegin(EVENT_FIELD_DESC);
                    struct.event.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class addEvent_argsTupleSchemeFactory implements SchemeFactory {
            public addEvent_argsTupleScheme getScheme() {
                return new addEvent_argsTupleScheme();
            }
        }
        
        private static class addEvent_argsTupleScheme extends TupleScheme<addEvent_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAuth()) {
                    optionals.set(0);
                }
                if (struct.isSetEvent()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAuth()) {
                    struct.auth.write(oprot);
                }
                if (struct.isSetEvent()) {
                    struct.event.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.auth = new com.bliss.service.thrift.OpAuth();
                    struct.auth.read(iprot);
                    struct.setAuthIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.event = new TEventV3Value();
                    struct.event.read(iprot);
                    struct.setEventIsSet(true);
                }
            }
        }
        
    }
    
    public static class addEvent_result implements org.apache.thrift.TBase<addEvent_result, addEvent_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvent_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addEvent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addEvent_resultTupleSchemeFactory());
        }
        
        public TEventV3Value success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvent_result.class, metaDataMap);
        }
        
        public addEvent_result() {
        }
        
        public addEvent_result(
                               TEventV3Value success)
        {
            this();
            this.success = success;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addEvent_result(addEvent_result other) {
            if (other.isSetSuccess()) {
                this.success = new TEventV3Value(other.success);
            }
        }
        
        public addEvent_result deepCopy() {
            return new addEvent_result(this);
        }
        
        @Override
        public void clear() {
            this.success = null;
        }
        
        public TEventV3Value getSuccess() {
            return this.success;
        }
        
        public addEvent_result setSuccess(TEventV3Value success) {
            this.success = success;
            return this;
        }
        
        public void unsetSuccess() {
            this.success = null;
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }
        
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((TEventV3Value)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addEvent_result)
                return this.equals((addEvent_result)that);
            return false;
        }
        
        public boolean equals(addEvent_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(addEvent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            addEvent_result typedOther = (addEvent_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addEvent_result(");
            boolean first = true;
            
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class addEvent_resultStandardSchemeFactory implements SchemeFactory {
            public addEvent_resultStandardScheme getScheme() {
                return new addEvent_resultStandardScheme();
            }
        }
        
        private static class addEvent_resultStandardScheme extends StandardScheme<addEvent_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, addEvent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new TEventV3Value();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, addEvent_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class addEvent_resultTupleSchemeFactory implements SchemeFactory {
            public addEvent_resultTupleScheme getScheme() {
                return new addEvent_resultTupleScheme();
            }
        }
        
        private static class addEvent_resultTupleScheme extends TupleScheme<addEvent_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new TEventV3Value();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class updateEvent_args implements org.apache.thrift.TBase<updateEvent_args, updateEvent_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEvent_args");
        
        private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateEvent_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateEvent_argsTupleSchemeFactory());
        }
        
        public com.bliss.service.thrift.OpAuth auth; // required
        public TEventV3Value event; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            AUTH((short)1, "auth"),
            EVENT((short)2, "event");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // AUTH
                        return AUTH;
                    case 2: // EVENT
                        return EVENT;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
            tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventV3Value.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEvent_args.class, metaDataMap);
        }
        
        public updateEvent_args() {
        }
        
        public updateEvent_args(
                                com.bliss.service.thrift.OpAuth auth,
                                TEventV3Value event)
        {
            this();
            this.auth = auth;
            this.event = event;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateEvent_args(updateEvent_args other) {
            if (other.isSetAuth()) {
                this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
            }
            if (other.isSetEvent()) {
                this.event = new TEventV3Value(other.event);
            }
        }
        
        public updateEvent_args deepCopy() {
            return new updateEvent_args(this);
        }
        
        @Override
        public void clear() {
            this.auth = null;
            this.event = null;
        }
        
        public com.bliss.service.thrift.OpAuth getAuth() {
            return this.auth;
        }
        
        public updateEvent_args setAuth(com.bliss.service.thrift.OpAuth auth) {
            this.auth = auth;
            return this;
        }
        
        public void unsetAuth() {
            this.auth = null;
        }
        
        /** Returns true if field auth is set (has been assigned a value) and false otherwise */
        public boolean isSetAuth() {
            return this.auth != null;
        }
        
        public void setAuthIsSet(boolean value) {
            if (!value) {
                this.auth = null;
            }
        }
        
        public TEventV3Value getEvent() {
            return this.event;
        }
        
        public updateEvent_args setEvent(TEventV3Value event) {
            this.event = event;
            return this;
        }
        
        public void unsetEvent() {
            this.event = null;
        }
        
        /** Returns true if field event is set (has been assigned a value) and false otherwise */
        public boolean isSetEvent() {
            return this.event != null;
        }
        
        public void setEventIsSet(boolean value) {
            if (!value) {
                this.event = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case AUTH:
                    if (value == null) {
                        unsetAuth();
                    } else {
                        setAuth((com.bliss.service.thrift.OpAuth)value);
                    }
                    break;
                    
                case EVENT:
                    if (value == null) {
                        unsetEvent();
                    } else {
                        setEvent((TEventV3Value)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case AUTH:
                    return getAuth();
                    
                case EVENT:
                    return getEvent();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case AUTH:
                    return isSetAuth();
                case EVENT:
                    return isSetEvent();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateEvent_args)
                return this.equals((updateEvent_args)that);
            return false;
        }
        
        public boolean equals(updateEvent_args that) {
            if (that == null)
                return false;
            
            boolean this_present_auth = true && this.isSetAuth();
            boolean that_present_auth = true && that.isSetAuth();
            if (this_present_auth || that_present_auth) {
                if (!(this_present_auth && that_present_auth))
                    return false;
                if (!this.auth.equals(that.auth))
                    return false;
            }
            
            boolean this_present_event = true && this.isSetEvent();
            boolean that_present_event = true && that.isSetEvent();
            if (this_present_event || that_present_event) {
                if (!(this_present_event && that_present_event))
                    return false;
                if (!this.event.equals(that.event))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(updateEvent_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            updateEvent_args typedOther = (updateEvent_args)other;
            
            lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuth()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEvent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, typedOther.event);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateEvent_args(");
            boolean first = true;
            
            sb.append("auth:");
            if (this.auth == null) {
                sb.append("null");
            } else {
                sb.append(this.auth);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("event:");
            if (this.event == null) {
                sb.append("null");
            } else {
                sb.append(this.event);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class updateEvent_argsStandardSchemeFactory implements SchemeFactory {
            public updateEvent_argsStandardScheme getScheme() {
                return new updateEvent_argsStandardScheme();
            }
        }
        
        private static class updateEvent_argsStandardScheme extends StandardScheme<updateEvent_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateEvent_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // AUTH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.auth = new com.bliss.service.thrift.OpAuth();
                                struct.auth.read(iprot);
                                struct.setAuthIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EVENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.event = new TEventV3Value();
                                struct.event.read(iprot);
                                struct.setEventIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateEvent_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.auth != null) {
                    oprot.writeFieldBegin(AUTH_FIELD_DESC);
                    struct.auth.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.event != null) {
                    oprot.writeFieldBegin(EVENT_FIELD_DESC);
                    struct.event.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class updateEvent_argsTupleSchemeFactory implements SchemeFactory {
            public updateEvent_argsTupleScheme getScheme() {
                return new updateEvent_argsTupleScheme();
            }
        }
        
        private static class updateEvent_argsTupleScheme extends TupleScheme<updateEvent_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAuth()) {
                    optionals.set(0);
                }
                if (struct.isSetEvent()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetAuth()) {
                    struct.auth.write(oprot);
                }
                if (struct.isSetEvent()) {
                    struct.event.write(oprot);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateEvent_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.auth = new com.bliss.service.thrift.OpAuth();
                    struct.auth.read(iprot);
                    struct.setAuthIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.event = new TEventV3Value();
                    struct.event.read(iprot);
                    struct.setEventIsSet(true);
                }
            }
        }
        
    }
    
    public static class updateEvent_result implements org.apache.thrift.TBase<updateEvent_result, updateEvent_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEvent_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateEvent_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateEvent_resultTupleSchemeFactory());
        }
        
        public boolean success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEvent_result.class, metaDataMap);
        }
        
        public updateEvent_result() {
        }
        
        public updateEvent_result(
                                  boolean success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateEvent_result(updateEvent_result other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.success = other.success;
        }
        
        public updateEvent_result deepCopy() {
            return new updateEvent_result(this);
        }
        
        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }
        
        public boolean isSuccess() {
            return this.success;
        }
        
        public updateEvent_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }
        
        public void unsetSuccess() {
            __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
        }
        
        public void setSuccessIsSet(boolean value) {
            __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateEvent_result)
                return this.equals((updateEvent_result)that);
            return false;
        }
        
        public boolean equals(updateEvent_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(updateEvent_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            updateEvent_result typedOther = (updateEvent_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateEvent_result(");
            boolean first = true;
            
            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class updateEvent_resultStandardSchemeFactory implements SchemeFactory {
            public updateEvent_resultStandardScheme getScheme() {
                return new updateEvent_resultStandardScheme();
            }
        }
        
        private static class updateEvent_resultStandardScheme extends StandardScheme<updateEvent_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateEvent_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateEvent_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeBool(struct.success);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class updateEvent_resultTupleSchemeFactory implements SchemeFactory {
            public updateEvent_resultTupleScheme getScheme() {
                return new updateEvent_resultTupleScheme();
            }
        }
        
        private static class updateEvent_resultTupleScheme extends TupleScheme<updateEvent_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateEvent_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
    public static class updateStatus_args implements org.apache.thrift.TBase<updateStatus_args, updateStatus_args._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_args");
        
        private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
        private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.I32, (short)2);
        private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)-1);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateStatus_argsTupleSchemeFactory());
        }
        
        public com.bliss.service.thrift.OpAuth auth; // required
        public int eventID; // required
        /**
         *
         * @see EEventStatus
         */
        public EEventStatus status; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            AUTH((short)1, "auth"),
            EVENT_ID((short)2, "eventID"),
            /**
             *
             * @see EEventStatus
             */
            STATUS((short)-1, "status");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // AUTH
                        return AUTH;
                    case 2: // EVENT_ID
                        return EVENT_ID;
                    case -1: // STATUS
                        return STATUS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        private static final int __EVENTID_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                   new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
            tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                       new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                     new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EEventStatus.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_args.class, metaDataMap);
        }
        
        public updateStatus_args() {
        }
        
        public updateStatus_args(
                                 com.bliss.service.thrift.OpAuth auth,
                                 int eventID,
                                 EEventStatus status)
        {
            this();
            this.auth = auth;
            this.eventID = eventID;
            setEventIDIsSet(true);
            this.status = status;
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateStatus_args(updateStatus_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            if (other.isSetAuth()) {
                this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
            }
            this.eventID = other.eventID;
            if (other.isSetStatus()) {
                this.status = other.status;
            }
        }
        
        public updateStatus_args deepCopy() {
            return new updateStatus_args(this);
        }
        
        @Override
        public void clear() {
            this.auth = null;
            setEventIDIsSet(false);
            this.eventID = 0;
            this.status = null;
        }
        
        public com.bliss.service.thrift.OpAuth getAuth() {
            return this.auth;
        }
        
        public updateStatus_args setAuth(com.bliss.service.thrift.OpAuth auth) {
            this.auth = auth;
            return this;
        }
        
        public void unsetAuth() {
            this.auth = null;
        }
        
        /** Returns true if field auth is set (has been assigned a value) and false otherwise */
        public boolean isSetAuth() {
            return this.auth != null;
        }
        
        public void setAuthIsSet(boolean value) {
            if (!value) {
                this.auth = null;
            }
        }
        
        public int getEventID() {
            return this.eventID;
        }
        
        public updateStatus_args setEventID(int eventID) {
            this.eventID = eventID;
            setEventIDIsSet(true);
            return this;
        }
        
        public void unsetEventID() {
            __isset_bit_vector.clear(__EVENTID_ISSET_ID);
        }
        
        /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
        public boolean isSetEventID() {
            return __isset_bit_vector.get(__EVENTID_ISSET_ID);
        }
        
        public void setEventIDIsSet(boolean value) {
            __isset_bit_vector.set(__EVENTID_ISSET_ID, value);
        }
        
        /**
         *
         * @see EEventStatus
         */
        public EEventStatus getStatus() {
            return this.status;
        }
        
        /**
         *
         * @see EEventStatus
         */
        public updateStatus_args setStatus(EEventStatus status) {
            this.status = status;
            return this;
        }
        
        public void unsetStatus() {
            this.status = null;
        }
        
        /** Returns true if field status is set (has been assigned a value) and false otherwise */
        public boolean isSetStatus() {
            return this.status != null;
        }
        
        public void setStatusIsSet(boolean value) {
            if (!value) {
                this.status = null;
            }
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case AUTH:
                    if (value == null) {
                        unsetAuth();
                    } else {
                        setAuth((com.bliss.service.thrift.OpAuth)value);
                    }
                    break;
                    
                case EVENT_ID:
                    if (value == null) {
                        unsetEventID();
                    } else {
                        setEventID((Integer)value);
                    }
                    break;
                    
                case STATUS:
                    if (value == null) {
                        unsetStatus();
                    } else {
                        setStatus((EEventStatus)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case AUTH:
                    return getAuth();
                    
                case EVENT_ID:
                    return Integer.valueOf(getEventID());
                    
                case STATUS:
                    return getStatus();
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case AUTH:
                    return isSetAuth();
                case EVENT_ID:
                    return isSetEventID();
                case STATUS:
                    return isSetStatus();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateStatus_args)
                return this.equals((updateStatus_args)that);
            return false;
        }
        
        public boolean equals(updateStatus_args that) {
            if (that == null)
                return false;
            
            boolean this_present_auth = true && this.isSetAuth();
            boolean that_present_auth = true && that.isSetAuth();
            if (this_present_auth || that_present_auth) {
                if (!(this_present_auth && that_present_auth))
                    return false;
                if (!this.auth.equals(that.auth))
                    return false;
            }
            
            boolean this_present_eventID = true;
            boolean that_present_eventID = true;
            if (this_present_eventID || that_present_eventID) {
                if (!(this_present_eventID && that_present_eventID))
                    return false;
                if (this.eventID != that.eventID)
                    return false;
            }
            
            boolean this_present_status = true && this.isSetStatus();
            boolean that_present_status = true && that.isSetStatus();
            if (this_present_status || that_present_status) {
                if (!(this_present_status && that_present_status))
                    return false;
                if (!this.status.equals(that.status))
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(updateStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            updateStatus_args typedOther = (updateStatus_args)other;
            
            lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAuth()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEventID()).compareTo(typedOther.isSetEventID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEventID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, typedOther.eventID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetStatus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateStatus_args(");
            boolean first = true;
            
            sb.append("auth:");
            if (this.auth == null) {
                sb.append("null");
            } else {
                sb.append(this.auth);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("eventID:");
            sb.append(this.eventID);
            first = false;
            if (!first) sb.append(", ");
            sb.append("status:");
            if (this.status == null) {
                sb.append("null");
            } else {
                sb.append(this.status);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bit_vector = new BitSet(1);
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class updateStatus_argsStandardSchemeFactory implements SchemeFactory {
            public updateStatus_argsStandardScheme getScheme() {
                return new updateStatus_argsStandardScheme();
            }
        }
        
        private static class updateStatus_argsStandardScheme extends StandardScheme<updateStatus_args> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // AUTH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.auth = new com.bliss.service.thrift.OpAuth();
                                struct.auth.read(iprot);
                                struct.setAuthIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // EVENT_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.eventID = iprot.readI32();
                                struct.setEventIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case -1: // STATUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.status = EEventStatus.findByValue(iprot.readI32());
                                struct.setStatusIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.status != null) {
                    oprot.writeFieldBegin(STATUS_FIELD_DESC);
                    oprot.writeI32(struct.status.getValue());
                    oprot.writeFieldEnd();
                }
                if (struct.auth != null) {
                    oprot.writeFieldBegin(AUTH_FIELD_DESC);
                    struct.auth.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
                oprot.writeI32(struct.eventID);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class updateStatus_argsTupleSchemeFactory implements SchemeFactory {
            public updateStatus_argsTupleScheme getScheme() {
                return new updateStatus_argsTupleScheme();
            }
        }
        
        private static class updateStatus_argsTupleScheme extends TupleScheme<updateStatus_args> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetAuth()) {
                    optionals.set(0);
                }
                if (struct.isSetEventID()) {
                    optionals.set(1);
                }
                if (struct.isSetStatus()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetAuth()) {
                    struct.auth.write(oprot);
                }
                if (struct.isSetEventID()) {
                    oprot.writeI32(struct.eventID);
                }
                if (struct.isSetStatus()) {
                    oprot.writeI32(struct.status.getValue());
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.auth = new com.bliss.service.thrift.OpAuth();
                    struct.auth.read(iprot);
                    struct.setAuthIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.eventID = iprot.readI32();
                    struct.setEventIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.status = EEventStatus.findByValue(iprot.readI32());
                    struct.setStatusIsSet(true);
                }
            }
        }
        
    }
    
    public static class updateStatus_result implements org.apache.thrift.TBase<updateStatus_result, updateStatus_result._Fields>, java.io.Serializable, Cloneable   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_result");
        
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
        
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateStatus_resultTupleSchemeFactory());
        }
        
        public boolean success; // required
        
        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");
            
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }
            
            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }
            
            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }
            
            private final short _thriftId;
            private final String _fieldName;
            
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }
            
            public short getThriftFieldId() {
                return _thriftId;
            }
            
            public String getFieldName() {
                return _fieldName;
            }
        }
        
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private BitSet __isset_bit_vector = new BitSet(1);
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                                                                                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_result.class, metaDataMap);
        }
        
        public updateStatus_result() {
        }
        
        public updateStatus_result(
                                   boolean success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }
        
        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateStatus_result(updateStatus_result other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.success = other.success;
        }
        
        public updateStatus_result deepCopy() {
            return new updateStatus_result(this);
        }
        
        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }
        
        public boolean isSuccess() {
            return this.success;
        }
        
        public updateStatus_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }
        
        public void unsetSuccess() {
            __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
        }
        
        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
        }
        
        public void setSuccessIsSet(boolean value) {
            __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
        }
        
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean)value);
                    }
                    break;
                    
            }
        }
        
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());
                    
            }
            throw new IllegalStateException();
        }
        
        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }
        
        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateStatus_result)
                return this.equals((updateStatus_result)that);
            return false;
        }
        
        public boolean equals(updateStatus_result that) {
            if (that == null)
                return false;
            
            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }
            
            return true;
        }
        
        @Override
        public int hashCode() {
            return 0;
        }
        
        public int compareTo(updateStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            
            int lastComparison = 0;
            updateStatus_result typedOther = (updateStatus_result)other;
            
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }
        
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }
        
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }
        
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateStatus_result(");
            boolean first = true;
            
            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }
        
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
        }
        
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }
        
        private static class updateStatus_resultStandardSchemeFactory implements SchemeFactory {
            public updateStatus_resultStandardScheme getScheme() {
                return new updateStatus_resultStandardScheme();
            }
        }
        
        private static class updateStatus_resultStandardScheme extends StandardScheme<updateStatus_result> {
            
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }
            
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();
                
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                oprot.writeBool(struct.success);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
            
        }
        
        private static class updateStatus_resultTupleSchemeFactory implements SchemeFactory {
            public updateStatus_resultTupleScheme getScheme() {
                return new updateStatus_resultTupleScheme();
            }
        }
        
        private static class updateStatus_resultTupleScheme extends TupleScheme<updateStatus_result> {
            
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }
            
            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }
        
    }
    
}

