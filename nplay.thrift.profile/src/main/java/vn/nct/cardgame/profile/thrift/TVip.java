/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vn.nct.cardgame.profile.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVip implements org.apache.thrift.TBase<TVip, TVip._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVip");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("vip", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPIRED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expiredDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPoint", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("isLocked", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_INAPP_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointInapp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointCard", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_POINT_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPointSMS", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("userGroup", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVipStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVipTupleSchemeFactory());
  }

  public long userId; // required
  public int vip; // required
  public String startDate; // required
  public String endDate; // required
  public String expiredDate; // required
  public int point; // required
  public int totalPoint; // required
  public boolean isActive; // required
  public boolean isLocked; // required
  public int totalPointInapp; // required
  public int totalPointCard; // required
  public int totalPointSMS; // required
  public int userGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    VIP((short)2, "vip"),
    START_DATE((short)3, "startDate"),
    END_DATE((short)4, "endDate"),
    EXPIRED_DATE((short)5, "expiredDate"),
    POINT((short)6, "point"),
    TOTAL_POINT((short)7, "totalPoint"),
    IS_ACTIVE((short)8, "isActive"),
    IS_LOCKED((short)9, "isLocked"),
    TOTAL_POINT_INAPP((short)10, "totalPointInapp"),
    TOTAL_POINT_CARD((short)11, "totalPointCard"),
    TOTAL_POINT_SMS((short)12, "totalPointSMS"),
    USER_GROUP((short)13, "userGroup");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // VIP
          return VIP;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // EXPIRED_DATE
          return EXPIRED_DATE;
        case 6: // POINT
          return POINT;
        case 7: // TOTAL_POINT
          return TOTAL_POINT;
        case 8: // IS_ACTIVE
          return IS_ACTIVE;
        case 9: // IS_LOCKED
          return IS_LOCKED;
        case 10: // TOTAL_POINT_INAPP
          return TOTAL_POINT_INAPP;
        case 11: // TOTAL_POINT_CARD
          return TOTAL_POINT_CARD;
        case 12: // TOTAL_POINT_SMS
          return TOTAL_POINT_SMS;
        case 13: // USER_GROUP
          return USER_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __VIP_ISSET_ID = 1;
  private static final int __POINT_ISSET_ID = 2;
  private static final int __TOTALPOINT_ISSET_ID = 3;
  private static final int __ISACTIVE_ISSET_ID = 4;
  private static final int __ISLOCKED_ISSET_ID = 5;
  private static final int __TOTALPOINTINAPP_ISSET_ID = 6;
  private static final int __TOTALPOINTCARD_ISSET_ID = 7;
  private static final int __TOTALPOINTSMS_ISSET_ID = 8;
  private static final int __USERGROUP_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIP, new org.apache.thrift.meta_data.FieldMetaData("vip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRED_DATE, new org.apache.thrift.meta_data.FieldMetaData("expiredDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT, new org.apache.thrift.meta_data.FieldMetaData("totalPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_LOCKED, new org.apache.thrift.meta_data.FieldMetaData("isLocked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_POINT_INAPP, new org.apache.thrift.meta_data.FieldMetaData("totalPointInapp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT_CARD, new org.apache.thrift.meta_data.FieldMetaData("totalPointCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POINT_SMS, new org.apache.thrift.meta_data.FieldMetaData("totalPointSMS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("userGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVip.class, metaDataMap);
  }

  public TVip() {
  }

  public TVip(
    long userId,
    int vip,
    String startDate,
    String endDate,
    String expiredDate,
    int point,
    int totalPoint,
    boolean isActive,
    boolean isLocked,
    int totalPointInapp,
    int totalPointCard,
    int totalPointSMS,
    int userGroup)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.vip = vip;
    setVipIsSet(true);
    this.startDate = startDate;
    this.endDate = endDate;
    this.expiredDate = expiredDate;
    this.point = point;
    setPointIsSet(true);
    this.totalPoint = totalPoint;
    setTotalPointIsSet(true);
    this.isActive = isActive;
    setIsActiveIsSet(true);
    this.isLocked = isLocked;
    setIsLockedIsSet(true);
    this.totalPointInapp = totalPointInapp;
    setTotalPointInappIsSet(true);
    this.totalPointCard = totalPointCard;
    setTotalPointCardIsSet(true);
    this.totalPointSMS = totalPointSMS;
    setTotalPointSMSIsSet(true);
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVip(TVip other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    this.vip = other.vip;
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetExpiredDate()) {
      this.expiredDate = other.expiredDate;
    }
    this.point = other.point;
    this.totalPoint = other.totalPoint;
    this.isActive = other.isActive;
    this.isLocked = other.isLocked;
    this.totalPointInapp = other.totalPointInapp;
    this.totalPointCard = other.totalPointCard;
    this.totalPointSMS = other.totalPointSMS;
    this.userGroup = other.userGroup;
  }

  public TVip deepCopy() {
    return new TVip(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setVipIsSet(false);
    this.vip = 0;
    this.startDate = null;
    this.endDate = null;
    this.expiredDate = null;
    setPointIsSet(false);
    this.point = 0;
    setTotalPointIsSet(false);
    this.totalPoint = 0;
    setIsActiveIsSet(false);
    this.isActive = false;
    setIsLockedIsSet(false);
    this.isLocked = false;
    setTotalPointInappIsSet(false);
    this.totalPointInapp = 0;
    setTotalPointCardIsSet(false);
    this.totalPointCard = 0;
    setTotalPointSMSIsSet(false);
    this.totalPointSMS = 0;
    setUserGroupIsSet(false);
    this.userGroup = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public TVip setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public int getVip() {
    return this.vip;
  }

  public TVip setVip(int vip) {
    this.vip = vip;
    setVipIsSet(true);
    return this;
  }

  public void unsetVip() {
    __isset_bit_vector.clear(__VIP_ISSET_ID);
  }

  /** Returns true if field vip is set (has been assigned a value) and false otherwise */
  public boolean isSetVip() {
    return __isset_bit_vector.get(__VIP_ISSET_ID);
  }

  public void setVipIsSet(boolean value) {
    __isset_bit_vector.set(__VIP_ISSET_ID, value);
  }

  public String getStartDate() {
    return this.startDate;
  }

  public TVip setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public TVip setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getExpiredDate() {
    return this.expiredDate;
  }

  public TVip setExpiredDate(String expiredDate) {
    this.expiredDate = expiredDate;
    return this;
  }

  public void unsetExpiredDate() {
    this.expiredDate = null;
  }

  /** Returns true if field expiredDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiredDate() {
    return this.expiredDate != null;
  }

  public void setExpiredDateIsSet(boolean value) {
    if (!value) {
      this.expiredDate = null;
    }
  }

  public int getPoint() {
    return this.point;
  }

  public TVip setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bit_vector.clear(__POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return __isset_bit_vector.get(__POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bit_vector.set(__POINT_ISSET_ID, value);
  }

  public int getTotalPoint() {
    return this.totalPoint;
  }

  public TVip setTotalPoint(int totalPoint) {
    this.totalPoint = totalPoint;
    setTotalPointIsSet(true);
    return this;
  }

  public void unsetTotalPoint() {
    __isset_bit_vector.clear(__TOTALPOINT_ISSET_ID);
  }

  /** Returns true if field totalPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPoint() {
    return __isset_bit_vector.get(__TOTALPOINT_ISSET_ID);
  }

  public void setTotalPointIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALPOINT_ISSET_ID, value);
  }

  public boolean isIsActive() {
    return this.isActive;
  }

  public TVip setIsActive(boolean isActive) {
    this.isActive = isActive;
    setIsActiveIsSet(true);
    return this;
  }

  public void unsetIsActive() {
    __isset_bit_vector.clear(__ISACTIVE_ISSET_ID);
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return __isset_bit_vector.get(__ISACTIVE_ISSET_ID);
  }

  public void setIsActiveIsSet(boolean value) {
    __isset_bit_vector.set(__ISACTIVE_ISSET_ID, value);
  }

  public boolean isIsLocked() {
    return this.isLocked;
  }

  public TVip setIsLocked(boolean isLocked) {
    this.isLocked = isLocked;
    setIsLockedIsSet(true);
    return this;
  }

  public void unsetIsLocked() {
    __isset_bit_vector.clear(__ISLOCKED_ISSET_ID);
  }

  /** Returns true if field isLocked is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLocked() {
    return __isset_bit_vector.get(__ISLOCKED_ISSET_ID);
  }

  public void setIsLockedIsSet(boolean value) {
    __isset_bit_vector.set(__ISLOCKED_ISSET_ID, value);
  }

  public int getTotalPointInapp() {
    return this.totalPointInapp;
  }

  public TVip setTotalPointInapp(int totalPointInapp) {
    this.totalPointInapp = totalPointInapp;
    setTotalPointInappIsSet(true);
    return this;
  }

  public void unsetTotalPointInapp() {
    __isset_bit_vector.clear(__TOTALPOINTINAPP_ISSET_ID);
  }

  /** Returns true if field totalPointInapp is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointInapp() {
    return __isset_bit_vector.get(__TOTALPOINTINAPP_ISSET_ID);
  }

  public void setTotalPointInappIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALPOINTINAPP_ISSET_ID, value);
  }

  public int getTotalPointCard() {
    return this.totalPointCard;
  }

  public TVip setTotalPointCard(int totalPointCard) {
    this.totalPointCard = totalPointCard;
    setTotalPointCardIsSet(true);
    return this;
  }

  public void unsetTotalPointCard() {
    __isset_bit_vector.clear(__TOTALPOINTCARD_ISSET_ID);
  }

  /** Returns true if field totalPointCard is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointCard() {
    return __isset_bit_vector.get(__TOTALPOINTCARD_ISSET_ID);
  }

  public void setTotalPointCardIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALPOINTCARD_ISSET_ID, value);
  }

  public int getTotalPointSMS() {
    return this.totalPointSMS;
  }

  public TVip setTotalPointSMS(int totalPointSMS) {
    this.totalPointSMS = totalPointSMS;
    setTotalPointSMSIsSet(true);
    return this;
  }

  public void unsetTotalPointSMS() {
    __isset_bit_vector.clear(__TOTALPOINTSMS_ISSET_ID);
  }

  /** Returns true if field totalPointSMS is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPointSMS() {
    return __isset_bit_vector.get(__TOTALPOINTSMS_ISSET_ID);
  }

  public void setTotalPointSMSIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALPOINTSMS_ISSET_ID, value);
  }

  public int getUserGroup() {
    return this.userGroup;
  }

  public TVip setUserGroup(int userGroup) {
    this.userGroup = userGroup;
    setUserGroupIsSet(true);
    return this;
  }

  public void unsetUserGroup() {
    __isset_bit_vector.clear(__USERGROUP_ISSET_ID);
  }

  /** Returns true if field userGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGroup() {
    return __isset_bit_vector.get(__USERGROUP_ISSET_ID);
  }

  public void setUserGroupIsSet(boolean value) {
    __isset_bit_vector.set(__USERGROUP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case VIP:
      if (value == null) {
        unsetVip();
      } else {
        setVip((Integer)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case EXPIRED_DATE:
      if (value == null) {
        unsetExpiredDate();
      } else {
        setExpiredDate((String)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case TOTAL_POINT:
      if (value == null) {
        unsetTotalPoint();
      } else {
        setTotalPoint((Integer)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((Boolean)value);
      }
      break;

    case IS_LOCKED:
      if (value == null) {
        unsetIsLocked();
      } else {
        setIsLocked((Boolean)value);
      }
      break;

    case TOTAL_POINT_INAPP:
      if (value == null) {
        unsetTotalPointInapp();
      } else {
        setTotalPointInapp((Integer)value);
      }
      break;

    case TOTAL_POINT_CARD:
      if (value == null) {
        unsetTotalPointCard();
      } else {
        setTotalPointCard((Integer)value);
      }
      break;

    case TOTAL_POINT_SMS:
      if (value == null) {
        unsetTotalPointSMS();
      } else {
        setTotalPointSMS((Integer)value);
      }
      break;

    case USER_GROUP:
      if (value == null) {
        unsetUserGroup();
      } else {
        setUserGroup((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case VIP:
      return Integer.valueOf(getVip());

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case EXPIRED_DATE:
      return getExpiredDate();

    case POINT:
      return Integer.valueOf(getPoint());

    case TOTAL_POINT:
      return Integer.valueOf(getTotalPoint());

    case IS_ACTIVE:
      return Boolean.valueOf(isIsActive());

    case IS_LOCKED:
      return Boolean.valueOf(isIsLocked());

    case TOTAL_POINT_INAPP:
      return Integer.valueOf(getTotalPointInapp());

    case TOTAL_POINT_CARD:
      return Integer.valueOf(getTotalPointCard());

    case TOTAL_POINT_SMS:
      return Integer.valueOf(getTotalPointSMS());

    case USER_GROUP:
      return Integer.valueOf(getUserGroup());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case VIP:
      return isSetVip();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case EXPIRED_DATE:
      return isSetExpiredDate();
    case POINT:
      return isSetPoint();
    case TOTAL_POINT:
      return isSetTotalPoint();
    case IS_ACTIVE:
      return isSetIsActive();
    case IS_LOCKED:
      return isSetIsLocked();
    case TOTAL_POINT_INAPP:
      return isSetTotalPointInapp();
    case TOTAL_POINT_CARD:
      return isSetTotalPointCard();
    case TOTAL_POINT_SMS:
      return isSetTotalPointSMS();
    case USER_GROUP:
      return isSetUserGroup();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVip)
      return this.equals((TVip)that);
    return false;
  }

  public boolean equals(TVip that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_vip = true;
    boolean that_present_vip = true;
    if (this_present_vip || that_present_vip) {
      if (!(this_present_vip && that_present_vip))
        return false;
      if (this.vip != that.vip)
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_expiredDate = true && this.isSetExpiredDate();
    boolean that_present_expiredDate = true && that.isSetExpiredDate();
    if (this_present_expiredDate || that_present_expiredDate) {
      if (!(this_present_expiredDate && that_present_expiredDate))
        return false;
      if (!this.expiredDate.equals(that.expiredDate))
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_totalPoint = true;
    boolean that_present_totalPoint = true;
    if (this_present_totalPoint || that_present_totalPoint) {
      if (!(this_present_totalPoint && that_present_totalPoint))
        return false;
      if (this.totalPoint != that.totalPoint)
        return false;
    }

    boolean this_present_isActive = true;
    boolean that_present_isActive = true;
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (this.isActive != that.isActive)
        return false;
    }

    boolean this_present_isLocked = true;
    boolean that_present_isLocked = true;
    if (this_present_isLocked || that_present_isLocked) {
      if (!(this_present_isLocked && that_present_isLocked))
        return false;
      if (this.isLocked != that.isLocked)
        return false;
    }

    boolean this_present_totalPointInapp = true;
    boolean that_present_totalPointInapp = true;
    if (this_present_totalPointInapp || that_present_totalPointInapp) {
      if (!(this_present_totalPointInapp && that_present_totalPointInapp))
        return false;
      if (this.totalPointInapp != that.totalPointInapp)
        return false;
    }

    boolean this_present_totalPointCard = true;
    boolean that_present_totalPointCard = true;
    if (this_present_totalPointCard || that_present_totalPointCard) {
      if (!(this_present_totalPointCard && that_present_totalPointCard))
        return false;
      if (this.totalPointCard != that.totalPointCard)
        return false;
    }

    boolean this_present_totalPointSMS = true;
    boolean that_present_totalPointSMS = true;
    if (this_present_totalPointSMS || that_present_totalPointSMS) {
      if (!(this_present_totalPointSMS && that_present_totalPointSMS))
        return false;
      if (this.totalPointSMS != that.totalPointSMS)
        return false;
    }

    boolean this_present_userGroup = true;
    boolean that_present_userGroup = true;
    if (this_present_userGroup || that_present_userGroup) {
      if (!(this_present_userGroup && that_present_userGroup))
        return false;
      if (this.userGroup != that.userGroup)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TVip other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TVip typedOther = (TVip)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVip()).compareTo(typedOther.isSetVip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vip, typedOther.vip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiredDate()).compareTo(typedOther.isSetExpiredDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiredDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredDate, typedOther.expiredDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPoint()).compareTo(typedOther.isSetTotalPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPoint, typedOther.totalPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActive()).compareTo(typedOther.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, typedOther.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLocked()).compareTo(typedOther.isSetIsLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLocked, typedOther.isLocked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointInapp()).compareTo(typedOther.isSetTotalPointInapp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointInapp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointInapp, typedOther.totalPointInapp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointCard()).compareTo(typedOther.isSetTotalPointCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointCard, typedOther.totalPointCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPointSMS()).compareTo(typedOther.isSetTotalPointSMS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPointSMS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPointSMS, typedOther.totalPointSMS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGroup()).compareTo(typedOther.isSetUserGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGroup, typedOther.userGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVip(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vip:");
    sb.append(this.vip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiredDate:");
    if (this.expiredDate == null) {
      sb.append("null");
    } else {
      sb.append(this.expiredDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPoint:");
    sb.append(this.totalPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActive:");
    sb.append(this.isActive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLocked:");
    sb.append(this.isLocked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointInapp:");
    sb.append(this.totalPointInapp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointCard:");
    sb.append(this.totalPointCard);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPointSMS:");
    sb.append(this.totalPointSMS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userGroup:");
    sb.append(this.userGroup);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVipStandardSchemeFactory implements SchemeFactory {
    public TVipStandardScheme getScheme() {
      return new TVipStandardScheme();
    }
  }

  private static class TVipStandardScheme extends StandardScheme<TVip> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVip struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vip = iprot.readI32();
              struct.setVipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPIRED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expiredDate = iprot.readString();
              struct.setExpiredDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPoint = iprot.readI32();
              struct.setTotalPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isActive = iprot.readBool();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLocked = iprot.readBool();
              struct.setIsLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_POINT_INAPP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointInapp = iprot.readI32();
              struct.setTotalPointInappIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_POINT_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointCard = iprot.readI32();
              struct.setTotalPointCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_POINT_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPointSMS = iprot.readI32();
              struct.setTotalPointSMSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userGroup = iprot.readI32();
              struct.setUserGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVip struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIP_FIELD_DESC);
      oprot.writeI32(struct.vip);
      oprot.writeFieldEnd();
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.expiredDate != null) {
        oprot.writeFieldBegin(EXPIRED_DATE_FIELD_DESC);
        oprot.writeString(struct.expiredDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeI32(struct.point);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_FIELD_DESC);
      oprot.writeI32(struct.totalPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.isActive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LOCKED_FIELD_DESC);
      oprot.writeBool(struct.isLocked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_INAPP_FIELD_DESC);
      oprot.writeI32(struct.totalPointInapp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_CARD_FIELD_DESC);
      oprot.writeI32(struct.totalPointCard);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POINT_SMS_FIELD_DESC);
      oprot.writeI32(struct.totalPointSMS);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_GROUP_FIELD_DESC);
      oprot.writeI32(struct.userGroup);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVipTupleSchemeFactory implements SchemeFactory {
    public TVipTupleScheme getScheme() {
      return new TVipTupleScheme();
    }
  }

  private static class TVipTupleScheme extends TupleScheme<TVip> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVip struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetVip()) {
        optionals.set(1);
      }
      if (struct.isSetStartDate()) {
        optionals.set(2);
      }
      if (struct.isSetEndDate()) {
        optionals.set(3);
      }
      if (struct.isSetExpiredDate()) {
        optionals.set(4);
      }
      if (struct.isSetPoint()) {
        optionals.set(5);
      }
      if (struct.isSetTotalPoint()) {
        optionals.set(6);
      }
      if (struct.isSetIsActive()) {
        optionals.set(7);
      }
      if (struct.isSetIsLocked()) {
        optionals.set(8);
      }
      if (struct.isSetTotalPointInapp()) {
        optionals.set(9);
      }
      if (struct.isSetTotalPointCard()) {
        optionals.set(10);
      }
      if (struct.isSetTotalPointSMS()) {
        optionals.set(11);
      }
      if (struct.isSetUserGroup()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetVip()) {
        oprot.writeI32(struct.vip);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetExpiredDate()) {
        oprot.writeString(struct.expiredDate);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetTotalPoint()) {
        oprot.writeI32(struct.totalPoint);
      }
      if (struct.isSetIsActive()) {
        oprot.writeBool(struct.isActive);
      }
      if (struct.isSetIsLocked()) {
        oprot.writeBool(struct.isLocked);
      }
      if (struct.isSetTotalPointInapp()) {
        oprot.writeI32(struct.totalPointInapp);
      }
      if (struct.isSetTotalPointCard()) {
        oprot.writeI32(struct.totalPointCard);
      }
      if (struct.isSetTotalPointSMS()) {
        oprot.writeI32(struct.totalPointSMS);
      }
      if (struct.isSetUserGroup()) {
        oprot.writeI32(struct.userGroup);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVip struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vip = iprot.readI32();
        struct.setVipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.expiredDate = iprot.readString();
        struct.setExpiredDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalPoint = iprot.readI32();
        struct.setTotalPointIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isActive = iprot.readBool();
        struct.setIsActiveIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isLocked = iprot.readBool();
        struct.setIsLockedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalPointInapp = iprot.readI32();
        struct.setTotalPointInappIsSet(true);
      }
      if (incoming.get(10)) {
        struct.totalPointCard = iprot.readI32();
        struct.setTotalPointCardIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalPointSMS = iprot.readI32();
        struct.setTotalPointSMSIsSet(true);
      }
      if (incoming.get(12)) {
        struct.userGroup = iprot.readI32();
        struct.setUserGroupIsSet(true);
      }
    }
  }

}

