/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vn.nct.cardgame.profile.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCheckNameResult implements org.apache.thrift.TBase<TCheckNameResult, TCheckNameResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCheckNameResult");

  private static final org.apache.thrift.protocol.TField IS_OK_FIELD_DESC = new org.apache.thrift.protocol.TField("isOK", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LST_AVAIL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lstAvailName", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCheckNameResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCheckNameResultTupleSchemeFactory());
  }

  public boolean isOK; // required
  public String error; // required
  public List<String> lstAvailName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_OK((short)1, "isOK"),
    ERROR((short)2, "error"),
    LST_AVAIL_NAME((short)3, "lstAvailName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_OK
          return IS_OK;
        case 2: // ERROR
          return ERROR;
        case 3: // LST_AVAIL_NAME
          return LST_AVAIL_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISOK_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_OK, new org.apache.thrift.meta_data.FieldMetaData("isOK", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LST_AVAIL_NAME, new org.apache.thrift.meta_data.FieldMetaData("lstAvailName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCheckNameResult.class, metaDataMap);
  }

  public TCheckNameResult() {
  }

  public TCheckNameResult(
    boolean isOK,
    String error,
    List<String> lstAvailName)
  {
    this();
    this.isOK = isOK;
    setIsOKIsSet(true);
    this.error = error;
    this.lstAvailName = lstAvailName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCheckNameResult(TCheckNameResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.isOK = other.isOK;
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetLstAvailName()) {
      List<String> __this__lstAvailName = new ArrayList<String>();
      for (String other_element : other.lstAvailName) {
        __this__lstAvailName.add(other_element);
      }
      this.lstAvailName = __this__lstAvailName;
    }
  }

  public TCheckNameResult deepCopy() {
    return new TCheckNameResult(this);
  }

  @Override
  public void clear() {
    setIsOKIsSet(false);
    this.isOK = false;
    this.error = null;
    this.lstAvailName = null;
  }

  public boolean isIsOK() {
    return this.isOK;
  }

  public TCheckNameResult setIsOK(boolean isOK) {
    this.isOK = isOK;
    setIsOKIsSet(true);
    return this;
  }

  public void unsetIsOK() {
    __isset_bit_vector.clear(__ISOK_ISSET_ID);
  }

  /** Returns true if field isOK is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOK() {
    return __isset_bit_vector.get(__ISOK_ISSET_ID);
  }

  public void setIsOKIsSet(boolean value) {
    __isset_bit_vector.set(__ISOK_ISSET_ID, value);
  }

  public String getError() {
    return this.error;
  }

  public TCheckNameResult setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getLstAvailNameSize() {
    return (this.lstAvailName == null) ? 0 : this.lstAvailName.size();
  }

  public java.util.Iterator<String> getLstAvailNameIterator() {
    return (this.lstAvailName == null) ? null : this.lstAvailName.iterator();
  }

  public void addToLstAvailName(String elem) {
    if (this.lstAvailName == null) {
      this.lstAvailName = new ArrayList<String>();
    }
    this.lstAvailName.add(elem);
  }

  public List<String> getLstAvailName() {
    return this.lstAvailName;
  }

  public TCheckNameResult setLstAvailName(List<String> lstAvailName) {
    this.lstAvailName = lstAvailName;
    return this;
  }

  public void unsetLstAvailName() {
    this.lstAvailName = null;
  }

  /** Returns true if field lstAvailName is set (has been assigned a value) and false otherwise */
  public boolean isSetLstAvailName() {
    return this.lstAvailName != null;
  }

  public void setLstAvailNameIsSet(boolean value) {
    if (!value) {
      this.lstAvailName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_OK:
      if (value == null) {
        unsetIsOK();
      } else {
        setIsOK((Boolean)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    case LST_AVAIL_NAME:
      if (value == null) {
        unsetLstAvailName();
      } else {
        setLstAvailName((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_OK:
      return Boolean.valueOf(isIsOK());

    case ERROR:
      return getError();

    case LST_AVAIL_NAME:
      return getLstAvailName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_OK:
      return isSetIsOK();
    case ERROR:
      return isSetError();
    case LST_AVAIL_NAME:
      return isSetLstAvailName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCheckNameResult)
      return this.equals((TCheckNameResult)that);
    return false;
  }

  public boolean equals(TCheckNameResult that) {
    if (that == null)
      return false;

    boolean this_present_isOK = true;
    boolean that_present_isOK = true;
    if (this_present_isOK || that_present_isOK) {
      if (!(this_present_isOK && that_present_isOK))
        return false;
      if (this.isOK != that.isOK)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_lstAvailName = true && this.isSetLstAvailName();
    boolean that_present_lstAvailName = true && that.isSetLstAvailName();
    if (this_present_lstAvailName || that_present_lstAvailName) {
      if (!(this_present_lstAvailName && that_present_lstAvailName))
        return false;
      if (!this.lstAvailName.equals(that.lstAvailName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCheckNameResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCheckNameResult typedOther = (TCheckNameResult)other;

    lastComparison = Boolean.valueOf(isSetIsOK()).compareTo(typedOther.isSetIsOK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOK, typedOther.isOK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLstAvailName()).compareTo(typedOther.isSetLstAvailName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLstAvailName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstAvailName, typedOther.lstAvailName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCheckNameResult(");
    boolean first = true;

    sb.append("isOK:");
    sb.append(this.isOK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lstAvailName:");
    if (this.lstAvailName == null) {
      sb.append("null");
    } else {
      sb.append(this.lstAvailName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCheckNameResultStandardSchemeFactory implements SchemeFactory {
    public TCheckNameResultStandardScheme getScheme() {
      return new TCheckNameResultStandardScheme();
    }
  }

  private static class TCheckNameResultStandardScheme extends StandardScheme<TCheckNameResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCheckNameResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOK = iprot.readBool();
              struct.setIsOKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LST_AVAIL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.lstAvailName = new ArrayList<String>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  String _elem54; // required
                  _elem54 = iprot.readString();
                  struct.lstAvailName.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setLstAvailNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCheckNameResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_OK_FIELD_DESC);
      oprot.writeBool(struct.isOK);
      oprot.writeFieldEnd();
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeString(struct.error);
        oprot.writeFieldEnd();
      }
      if (struct.lstAvailName != null) {
        oprot.writeFieldBegin(LST_AVAIL_NAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lstAvailName.size()));
          for (String _iter55 : struct.lstAvailName)
          {
            oprot.writeString(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCheckNameResultTupleSchemeFactory implements SchemeFactory {
    public TCheckNameResultTupleScheme getScheme() {
      return new TCheckNameResultTupleScheme();
    }
  }

  private static class TCheckNameResultTupleScheme extends TupleScheme<TCheckNameResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCheckNameResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsOK()) {
        optionals.set(0);
      }
      if (struct.isSetError()) {
        optionals.set(1);
      }
      if (struct.isSetLstAvailName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIsOK()) {
        oprot.writeBool(struct.isOK);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
      if (struct.isSetLstAvailName()) {
        {
          oprot.writeI32(struct.lstAvailName.size());
          for (String _iter56 : struct.lstAvailName)
          {
            oprot.writeString(_iter56);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCheckNameResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.isOK = iprot.readBool();
        struct.setIsOKIsSet(true);
      }
      if (incoming.get(1)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lstAvailName = new ArrayList<String>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            String _elem59; // required
            _elem59 = iprot.readString();
            struct.lstAvailName.add(_elem59);
          }
        }
        struct.setLstAvailNameIsSet(true);
      }
    }
  }

}

