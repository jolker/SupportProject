/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vn.nct.cardgame.profile.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVipBenefitList implements org.apache.thrift.TBase<TVipBenefitList, TVipBenefitList._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVipBenefitList");

  private static final org.apache.thrift.protocol.TField MAP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mapData", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVipBenefitListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVipBenefitListTupleSchemeFactory());
  }

  public Map<Integer,TVipBenefit> mapData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_DATA((short)1, "mapData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_DATA
          return MAP_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_DATA, new org.apache.thrift.meta_data.FieldMetaData("mapData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TVipBenefit.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVipBenefitList.class, metaDataMap);
  }

  public TVipBenefitList() {
  }

  public TVipBenefitList(
    Map<Integer,TVipBenefit> mapData)
  {
    this();
    this.mapData = mapData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVipBenefitList(TVipBenefitList other) {
    if (other.isSetMapData()) {
      Map<Integer,TVipBenefit> __this__mapData = new HashMap<Integer,TVipBenefit>();
      for (Map.Entry<Integer, TVipBenefit> other_element : other.mapData.entrySet()) {

        Integer other_element_key = other_element.getKey();
        TVipBenefit other_element_value = other_element.getValue();

        Integer __this__mapData_copy_key = other_element_key;

        TVipBenefit __this__mapData_copy_value = new TVipBenefit(other_element_value);

        __this__mapData.put(__this__mapData_copy_key, __this__mapData_copy_value);
      }
      this.mapData = __this__mapData;
    }
  }

  public TVipBenefitList deepCopy() {
    return new TVipBenefitList(this);
  }

  @Override
  public void clear() {
    this.mapData = null;
  }

  public int getMapDataSize() {
    return (this.mapData == null) ? 0 : this.mapData.size();
  }

  public void putToMapData(int key, TVipBenefit val) {
    if (this.mapData == null) {
      this.mapData = new HashMap<Integer,TVipBenefit>();
    }
    this.mapData.put(key, val);
  }

  public Map<Integer,TVipBenefit> getMapData() {
    return this.mapData;
  }

  public TVipBenefitList setMapData(Map<Integer,TVipBenefit> mapData) {
    this.mapData = mapData;
    return this;
  }

  public void unsetMapData() {
    this.mapData = null;
  }

  /** Returns true if field mapData is set (has been assigned a value) and false otherwise */
  public boolean isSetMapData() {
    return this.mapData != null;
  }

  public void setMapDataIsSet(boolean value) {
    if (!value) {
      this.mapData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_DATA:
      if (value == null) {
        unsetMapData();
      } else {
        setMapData((Map<Integer,TVipBenefit>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_DATA:
      return getMapData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_DATA:
      return isSetMapData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVipBenefitList)
      return this.equals((TVipBenefitList)that);
    return false;
  }

  public boolean equals(TVipBenefitList that) {
    if (that == null)
      return false;

    boolean this_present_mapData = true && this.isSetMapData();
    boolean that_present_mapData = true && that.isSetMapData();
    if (this_present_mapData || that_present_mapData) {
      if (!(this_present_mapData && that_present_mapData))
        return false;
      if (!this.mapData.equals(that.mapData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TVipBenefitList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TVipBenefitList typedOther = (TVipBenefitList)other;

    lastComparison = Boolean.valueOf(isSetMapData()).compareTo(typedOther.isSetMapData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapData, typedOther.mapData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVipBenefitList(");
    boolean first = true;

    sb.append("mapData:");
    if (this.mapData == null) {
      sb.append("null");
    } else {
      sb.append(this.mapData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVipBenefitListStandardSchemeFactory implements SchemeFactory {
    public TVipBenefitListStandardScheme getScheme() {
      return new TVipBenefitListStandardScheme();
    }
  }

  private static class TVipBenefitListStandardScheme extends StandardScheme<TVipBenefitList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVipBenefitList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.mapData = new HashMap<Integer,TVipBenefit>(2*_map34.size);
                for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                {
                  int _key36; // required
                  TVipBenefit _val37; // required
                  _key36 = iprot.readI32();
                  _val37 = new TVipBenefit();
                  _val37.read(iprot);
                  struct.mapData.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setMapDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVipBenefitList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mapData != null) {
        oprot.writeFieldBegin(MAP_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.mapData.size()));
          for (Map.Entry<Integer, TVipBenefit> _iter38 : struct.mapData.entrySet())
          {
            oprot.writeI32(_iter38.getKey());
            _iter38.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVipBenefitListTupleSchemeFactory implements SchemeFactory {
    public TVipBenefitListTupleScheme getScheme() {
      return new TVipBenefitListTupleScheme();
    }
  }

  private static class TVipBenefitListTupleScheme extends TupleScheme<TVipBenefitList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVipBenefitList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMapData()) {
        {
          oprot.writeI32(struct.mapData.size());
          for (Map.Entry<Integer, TVipBenefit> _iter39 : struct.mapData.entrySet())
          {
            oprot.writeI32(_iter39.getKey());
            _iter39.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVipBenefitList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mapData = new HashMap<Integer,TVipBenefit>(2*_map40.size);
          for (int _i41 = 0; _i41 < _map40.size; ++_i41)
          {
            int _key42; // required
            TVipBenefit _val43; // required
            _key42 = iprot.readI32();
            _val43 = new TVipBenefit();
            _val43.read(iprot);
            struct.mapData.put(_key42, _val43);
          }
        }
        struct.setMapDataIsSet(true);
      }
    }
  }

}

