/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vn.nct.cardgame.profile.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TProfile implements org.apache.thrift.TBase<TProfile, TProfile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TProfile");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AVATAR_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("avatarPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROVIDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("providerId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DEVICE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSource", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCreated", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogin", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LOCK_STARTDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockStartdate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LOCK_ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lockEnddate", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TProfileTupleSchemeFactory());
  }

  public long userId; // required
  public String userName; // required
  public String profileId; // required
  public String password; // required
  public String displayName; // required
  public String avatarPath; // required
  public short gender; // required
  public long money; // required
  public String email; // required
  public String phone; // required
  public short status; // required
  public String source; // required
  public int providerId; // required
  public String deviceToken; // required
  public short deviceSource; // required
  public String dateCreated; // required
  public String lastLogin; // required
  public String lockStartdate; // required
  public String lockEnddate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    PROFILE_ID((short)3, "profileId"),
    PASSWORD((short)4, "password"),
    DISPLAY_NAME((short)5, "displayName"),
    AVATAR_PATH((short)6, "avatarPath"),
    GENDER((short)7, "gender"),
    MONEY((short)8, "money"),
    EMAIL((short)9, "email"),
    PHONE((short)10, "phone"),
    STATUS((short)11, "status"),
    SOURCE((short)12, "source"),
    PROVIDER_ID((short)13, "providerId"),
    DEVICE_TOKEN((short)14, "deviceToken"),
    DEVICE_SOURCE((short)15, "deviceSource"),
    DATE_CREATED((short)16, "dateCreated"),
    LAST_LOGIN((short)17, "lastLogin"),
    LOCK_STARTDATE((short)18, "lockStartdate"),
    LOCK_ENDDATE((short)19, "lockEnddate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // PROFILE_ID
          return PROFILE_ID;
        case 4: // PASSWORD
          return PASSWORD;
        case 5: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 6: // AVATAR_PATH
          return AVATAR_PATH;
        case 7: // GENDER
          return GENDER;
        case 8: // MONEY
          return MONEY;
        case 9: // EMAIL
          return EMAIL;
        case 10: // PHONE
          return PHONE;
        case 11: // STATUS
          return STATUS;
        case 12: // SOURCE
          return SOURCE;
        case 13: // PROVIDER_ID
          return PROVIDER_ID;
        case 14: // DEVICE_TOKEN
          return DEVICE_TOKEN;
        case 15: // DEVICE_SOURCE
          return DEVICE_SOURCE;
        case 16: // DATE_CREATED
          return DATE_CREATED;
        case 17: // LAST_LOGIN
          return LAST_LOGIN;
        case 18: // LOCK_STARTDATE
          return LOCK_STARTDATE;
        case 19: // LOCK_ENDDATE
          return LOCK_ENDDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __MONEY_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __PROVIDERID_ISSET_ID = 4;
  private static final int __DEVICESOURCE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR_PATH, new org.apache.thrift.meta_data.FieldMetaData("avatarPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVIDER_ID, new org.apache.thrift.meta_data.FieldMetaData("providerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("deviceSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DATE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("dateCreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("lastLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_STARTDATE, new org.apache.thrift.meta_data.FieldMetaData("lockStartdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("lockEnddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TProfile.class, metaDataMap);
  }

  public TProfile() {
  }

  public TProfile(
    long userId,
    String userName,
    String profileId,
    String password,
    String displayName,
    String avatarPath,
    short gender,
    long money,
    String email,
    String phone,
    short status,
    String source,
    int providerId,
    String deviceToken,
    short deviceSource,
    String dateCreated,
    String lastLogin,
    String lockStartdate,
    String lockEnddate)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.profileId = profileId;
    this.password = password;
    this.displayName = displayName;
    this.avatarPath = avatarPath;
    this.gender = gender;
    setGenderIsSet(true);
    this.money = money;
    setMoneyIsSet(true);
    this.email = email;
    this.phone = phone;
    this.status = status;
    setStatusIsSet(true);
    this.source = source;
    this.providerId = providerId;
    setProviderIdIsSet(true);
    this.deviceToken = deviceToken;
    this.deviceSource = deviceSource;
    setDeviceSourceIsSet(true);
    this.dateCreated = dateCreated;
    this.lastLogin = lastLogin;
    this.lockStartdate = lockStartdate;
    this.lockEnddate = lockEnddate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TProfile(TProfile other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetProfileId()) {
      this.profileId = other.profileId;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetAvatarPath()) {
      this.avatarPath = other.avatarPath;
    }
    this.gender = other.gender;
    this.money = other.money;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    this.status = other.status;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.providerId = other.providerId;
    if (other.isSetDeviceToken()) {
      this.deviceToken = other.deviceToken;
    }
    this.deviceSource = other.deviceSource;
    if (other.isSetDateCreated()) {
      this.dateCreated = other.dateCreated;
    }
    if (other.isSetLastLogin()) {
      this.lastLogin = other.lastLogin;
    }
    if (other.isSetLockStartdate()) {
      this.lockStartdate = other.lockStartdate;
    }
    if (other.isSetLockEnddate()) {
      this.lockEnddate = other.lockEnddate;
    }
  }

  public TProfile deepCopy() {
    return new TProfile(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.profileId = null;
    this.password = null;
    this.displayName = null;
    this.avatarPath = null;
    setGenderIsSet(false);
    this.gender = 0;
    setMoneyIsSet(false);
    this.money = 0;
    this.email = null;
    this.phone = null;
    setStatusIsSet(false);
    this.status = 0;
    this.source = null;
    setProviderIdIsSet(false);
    this.providerId = 0;
    this.deviceToken = null;
    setDeviceSourceIsSet(false);
    this.deviceSource = 0;
    this.dateCreated = null;
    this.lastLogin = null;
    this.lockStartdate = null;
    this.lockEnddate = null;
  }

  public long getUserId() {
    return this.userId;
  }

  public TProfile setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public TProfile setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getProfileId() {
    return this.profileId;
  }

  public TProfile setProfileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  public void unsetProfileId() {
    this.profileId = null;
  }

  /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileId() {
    return this.profileId != null;
  }

  public void setProfileIdIsSet(boolean value) {
    if (!value) {
      this.profileId = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public TProfile setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public TProfile setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getAvatarPath() {
    return this.avatarPath;
  }

  public TProfile setAvatarPath(String avatarPath) {
    this.avatarPath = avatarPath;
    return this;
  }

  public void unsetAvatarPath() {
    this.avatarPath = null;
  }

  /** Returns true if field avatarPath is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatarPath() {
    return this.avatarPath != null;
  }

  public void setAvatarPathIsSet(boolean value) {
    if (!value) {
      this.avatarPath = null;
    }
  }

  public short getGender() {
    return this.gender;
  }

  public TProfile setGender(short gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bit_vector.clear(__GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return __isset_bit_vector.get(__GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bit_vector.set(__GENDER_ISSET_ID, value);
  }

  public long getMoney() {
    return this.money;
  }

  public TProfile setMoney(long money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bit_vector.clear(__MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return __isset_bit_vector.get(__MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bit_vector.set(__MONEY_ISSET_ID, value);
  }

  public String getEmail() {
    return this.email;
  }

  public TProfile setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public TProfile setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public short getStatus() {
    return this.status;
  }

  public TProfile setStatus(short status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public TProfile setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public int getProviderId() {
    return this.providerId;
  }

  public TProfile setProviderId(int providerId) {
    this.providerId = providerId;
    setProviderIdIsSet(true);
    return this;
  }

  public void unsetProviderId() {
    __isset_bit_vector.clear(__PROVIDERID_ISSET_ID);
  }

  /** Returns true if field providerId is set (has been assigned a value) and false otherwise */
  public boolean isSetProviderId() {
    return __isset_bit_vector.get(__PROVIDERID_ISSET_ID);
  }

  public void setProviderIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVIDERID_ISSET_ID, value);
  }

  public String getDeviceToken() {
    return this.deviceToken;
  }

  public TProfile setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  public void unsetDeviceToken() {
    this.deviceToken = null;
  }

  /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceToken() {
    return this.deviceToken != null;
  }

  public void setDeviceTokenIsSet(boolean value) {
    if (!value) {
      this.deviceToken = null;
    }
  }

  public short getDeviceSource() {
    return this.deviceSource;
  }

  public TProfile setDeviceSource(short deviceSource) {
    this.deviceSource = deviceSource;
    setDeviceSourceIsSet(true);
    return this;
  }

  public void unsetDeviceSource() {
    __isset_bit_vector.clear(__DEVICESOURCE_ISSET_ID);
  }

  /** Returns true if field deviceSource is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceSource() {
    return __isset_bit_vector.get(__DEVICESOURCE_ISSET_ID);
  }

  public void setDeviceSourceIsSet(boolean value) {
    __isset_bit_vector.set(__DEVICESOURCE_ISSET_ID, value);
  }

  public String getDateCreated() {
    return this.dateCreated;
  }

  public TProfile setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  public void unsetDateCreated() {
    this.dateCreated = null;
  }

  /** Returns true if field dateCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCreated() {
    return this.dateCreated != null;
  }

  public void setDateCreatedIsSet(boolean value) {
    if (!value) {
      this.dateCreated = null;
    }
  }

  public String getLastLogin() {
    return this.lastLogin;
  }

  public TProfile setLastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  public void unsetLastLogin() {
    this.lastLogin = null;
  }

  /** Returns true if field lastLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLogin() {
    return this.lastLogin != null;
  }

  public void setLastLoginIsSet(boolean value) {
    if (!value) {
      this.lastLogin = null;
    }
  }

  public String getLockStartdate() {
    return this.lockStartdate;
  }

  public TProfile setLockStartdate(String lockStartdate) {
    this.lockStartdate = lockStartdate;
    return this;
  }

  public void unsetLockStartdate() {
    this.lockStartdate = null;
  }

  /** Returns true if field lockStartdate is set (has been assigned a value) and false otherwise */
  public boolean isSetLockStartdate() {
    return this.lockStartdate != null;
  }

  public void setLockStartdateIsSet(boolean value) {
    if (!value) {
      this.lockStartdate = null;
    }
  }

  public String getLockEnddate() {
    return this.lockEnddate;
  }

  public TProfile setLockEnddate(String lockEnddate) {
    this.lockEnddate = lockEnddate;
    return this;
  }

  public void unsetLockEnddate() {
    this.lockEnddate = null;
  }

  /** Returns true if field lockEnddate is set (has been assigned a value) and false otherwise */
  public boolean isSetLockEnddate() {
    return this.lockEnddate != null;
  }

  public void setLockEnddateIsSet(boolean value) {
    if (!value) {
      this.lockEnddate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case PROFILE_ID:
      if (value == null) {
        unsetProfileId();
      } else {
        setProfileId((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case AVATAR_PATH:
      if (value == null) {
        unsetAvatarPath();
      } else {
        setAvatarPath((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Short)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((Long)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Short)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case PROVIDER_ID:
      if (value == null) {
        unsetProviderId();
      } else {
        setProviderId((Integer)value);
      }
      break;

    case DEVICE_TOKEN:
      if (value == null) {
        unsetDeviceToken();
      } else {
        setDeviceToken((String)value);
      }
      break;

    case DEVICE_SOURCE:
      if (value == null) {
        unsetDeviceSource();
      } else {
        setDeviceSource((Short)value);
      }
      break;

    case DATE_CREATED:
      if (value == null) {
        unsetDateCreated();
      } else {
        setDateCreated((String)value);
      }
      break;

    case LAST_LOGIN:
      if (value == null) {
        unsetLastLogin();
      } else {
        setLastLogin((String)value);
      }
      break;

    case LOCK_STARTDATE:
      if (value == null) {
        unsetLockStartdate();
      } else {
        setLockStartdate((String)value);
      }
      break;

    case LOCK_ENDDATE:
      if (value == null) {
        unsetLockEnddate();
      } else {
        setLockEnddate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case USER_NAME:
      return getUserName();

    case PROFILE_ID:
      return getProfileId();

    case PASSWORD:
      return getPassword();

    case DISPLAY_NAME:
      return getDisplayName();

    case AVATAR_PATH:
      return getAvatarPath();

    case GENDER:
      return Short.valueOf(getGender());

    case MONEY:
      return Long.valueOf(getMoney());

    case EMAIL:
      return getEmail();

    case PHONE:
      return getPhone();

    case STATUS:
      return Short.valueOf(getStatus());

    case SOURCE:
      return getSource();

    case PROVIDER_ID:
      return Integer.valueOf(getProviderId());

    case DEVICE_TOKEN:
      return getDeviceToken();

    case DEVICE_SOURCE:
      return Short.valueOf(getDeviceSource());

    case DATE_CREATED:
      return getDateCreated();

    case LAST_LOGIN:
      return getLastLogin();

    case LOCK_STARTDATE:
      return getLockStartdate();

    case LOCK_ENDDATE:
      return getLockEnddate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case PROFILE_ID:
      return isSetProfileId();
    case PASSWORD:
      return isSetPassword();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case AVATAR_PATH:
      return isSetAvatarPath();
    case GENDER:
      return isSetGender();
    case MONEY:
      return isSetMoney();
    case EMAIL:
      return isSetEmail();
    case PHONE:
      return isSetPhone();
    case STATUS:
      return isSetStatus();
    case SOURCE:
      return isSetSource();
    case PROVIDER_ID:
      return isSetProviderId();
    case DEVICE_TOKEN:
      return isSetDeviceToken();
    case DEVICE_SOURCE:
      return isSetDeviceSource();
    case DATE_CREATED:
      return isSetDateCreated();
    case LAST_LOGIN:
      return isSetLastLogin();
    case LOCK_STARTDATE:
      return isSetLockStartdate();
    case LOCK_ENDDATE:
      return isSetLockEnddate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TProfile)
      return this.equals((TProfile)that);
    return false;
  }

  public boolean equals(TProfile that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_profileId = true && this.isSetProfileId();
    boolean that_present_profileId = true && that.isSetProfileId();
    if (this_present_profileId || that_present_profileId) {
      if (!(this_present_profileId && that_present_profileId))
        return false;
      if (!this.profileId.equals(that.profileId))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_avatarPath = true && this.isSetAvatarPath();
    boolean that_present_avatarPath = true && that.isSetAvatarPath();
    if (this_present_avatarPath || that_present_avatarPath) {
      if (!(this_present_avatarPath && that_present_avatarPath))
        return false;
      if (!this.avatarPath.equals(that.avatarPath))
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_providerId = true;
    boolean that_present_providerId = true;
    if (this_present_providerId || that_present_providerId) {
      if (!(this_present_providerId && that_present_providerId))
        return false;
      if (this.providerId != that.providerId)
        return false;
    }

    boolean this_present_deviceToken = true && this.isSetDeviceToken();
    boolean that_present_deviceToken = true && that.isSetDeviceToken();
    if (this_present_deviceToken || that_present_deviceToken) {
      if (!(this_present_deviceToken && that_present_deviceToken))
        return false;
      if (!this.deviceToken.equals(that.deviceToken))
        return false;
    }

    boolean this_present_deviceSource = true;
    boolean that_present_deviceSource = true;
    if (this_present_deviceSource || that_present_deviceSource) {
      if (!(this_present_deviceSource && that_present_deviceSource))
        return false;
      if (this.deviceSource != that.deviceSource)
        return false;
    }

    boolean this_present_dateCreated = true && this.isSetDateCreated();
    boolean that_present_dateCreated = true && that.isSetDateCreated();
    if (this_present_dateCreated || that_present_dateCreated) {
      if (!(this_present_dateCreated && that_present_dateCreated))
        return false;
      if (!this.dateCreated.equals(that.dateCreated))
        return false;
    }

    boolean this_present_lastLogin = true && this.isSetLastLogin();
    boolean that_present_lastLogin = true && that.isSetLastLogin();
    if (this_present_lastLogin || that_present_lastLogin) {
      if (!(this_present_lastLogin && that_present_lastLogin))
        return false;
      if (!this.lastLogin.equals(that.lastLogin))
        return false;
    }

    boolean this_present_lockStartdate = true && this.isSetLockStartdate();
    boolean that_present_lockStartdate = true && that.isSetLockStartdate();
    if (this_present_lockStartdate || that_present_lockStartdate) {
      if (!(this_present_lockStartdate && that_present_lockStartdate))
        return false;
      if (!this.lockStartdate.equals(that.lockStartdate))
        return false;
    }

    boolean this_present_lockEnddate = true && this.isSetLockEnddate();
    boolean that_present_lockEnddate = true && that.isSetLockEnddate();
    if (this_present_lockEnddate || that_present_lockEnddate) {
      if (!(this_present_lockEnddate && that_present_lockEnddate))
        return false;
      if (!this.lockEnddate.equals(that.lockEnddate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TProfile typedOther = (TProfile)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(typedOther.isSetProfileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, typedOther.profileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatarPath()).compareTo(typedOther.isSetAvatarPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatarPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatarPath, typedOther.avatarPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(typedOther.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, typedOther.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoney()).compareTo(typedOther.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, typedOther.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProviderId()).compareTo(typedOther.isSetProviderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProviderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerId, typedOther.providerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceToken()).compareTo(typedOther.isSetDeviceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, typedOther.deviceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceSource()).compareTo(typedOther.isSetDeviceSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSource, typedOther.deviceSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(typedOther.isSetDateCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, typedOther.dateCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLogin()).compareTo(typedOther.isSetLastLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogin, typedOther.lastLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockStartdate()).compareTo(typedOther.isSetLockStartdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockStartdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockStartdate, typedOther.lockStartdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockEnddate()).compareTo(typedOther.isSetLockEnddate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockEnddate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockEnddate, typedOther.lockEnddate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TProfile(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileId:");
    if (this.profileId == null) {
      sb.append("null");
    } else {
      sb.append(this.profileId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatarPath:");
    if (this.avatarPath == null) {
      sb.append("null");
    } else {
      sb.append(this.avatarPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("providerId:");
    sb.append(this.providerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceToken:");
    if (this.deviceToken == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceSource:");
    sb.append(this.deviceSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateCreated:");
    if (this.dateCreated == null) {
      sb.append("null");
    } else {
      sb.append(this.dateCreated);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLogin:");
    if (this.lastLogin == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLogin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockStartdate:");
    if (this.lockStartdate == null) {
      sb.append("null");
    } else {
      sb.append(this.lockStartdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockEnddate:");
    if (this.lockEnddate == null) {
      sb.append("null");
    } else {
      sb.append(this.lockEnddate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TProfileStandardSchemeFactory implements SchemeFactory {
    public TProfileStandardScheme getScheme() {
      return new TProfileStandardScheme();
    }
  }

  private static class TProfileStandardScheme extends StandardScheme<TProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROFILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileId = iprot.readString();
              struct.setProfileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVATAR_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatarPath = iprot.readString();
              struct.setAvatarPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.gender = iprot.readI16();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.money = iprot.readI64();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.status = iprot.readI16();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROVIDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.providerId = iprot.readI32();
              struct.setProviderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEVICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceToken = iprot.readString();
              struct.setDeviceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEVICE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.deviceSource = iprot.readI16();
              struct.setDeviceSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DATE_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateCreated = iprot.readString();
              struct.setDateCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLogin = iprot.readString();
              struct.setLastLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOCK_STARTDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lockStartdate = iprot.readString();
              struct.setLockStartdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOCK_ENDDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lockEnddate = iprot.readString();
              struct.setLockEnddateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.profileId != null) {
        oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
        oprot.writeString(struct.profileId);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.avatarPath != null) {
        oprot.writeFieldBegin(AVATAR_PATH_FIELD_DESC);
        oprot.writeString(struct.avatarPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI16(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI64(struct.money);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI16(struct.status);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROVIDER_ID_FIELD_DESC);
      oprot.writeI32(struct.providerId);
      oprot.writeFieldEnd();
      if (struct.deviceToken != null) {
        oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.deviceToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEVICE_SOURCE_FIELD_DESC);
      oprot.writeI16(struct.deviceSource);
      oprot.writeFieldEnd();
      if (struct.dateCreated != null) {
        oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
        oprot.writeString(struct.dateCreated);
        oprot.writeFieldEnd();
      }
      if (struct.lastLogin != null) {
        oprot.writeFieldBegin(LAST_LOGIN_FIELD_DESC);
        oprot.writeString(struct.lastLogin);
        oprot.writeFieldEnd();
      }
      if (struct.lockStartdate != null) {
        oprot.writeFieldBegin(LOCK_STARTDATE_FIELD_DESC);
        oprot.writeString(struct.lockStartdate);
        oprot.writeFieldEnd();
      }
      if (struct.lockEnddate != null) {
        oprot.writeFieldBegin(LOCK_ENDDATE_FIELD_DESC);
        oprot.writeString(struct.lockEnddate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TProfileTupleSchemeFactory implements SchemeFactory {
    public TProfileTupleScheme getScheme() {
      return new TProfileTupleScheme();
    }
  }

  private static class TProfileTupleScheme extends TupleScheme<TProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetProfileId()) {
        optionals.set(2);
      }
      if (struct.isSetPassword()) {
        optionals.set(3);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(4);
      }
      if (struct.isSetAvatarPath()) {
        optionals.set(5);
      }
      if (struct.isSetGender()) {
        optionals.set(6);
      }
      if (struct.isSetMoney()) {
        optionals.set(7);
      }
      if (struct.isSetEmail()) {
        optionals.set(8);
      }
      if (struct.isSetPhone()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetSource()) {
        optionals.set(11);
      }
      if (struct.isSetProviderId()) {
        optionals.set(12);
      }
      if (struct.isSetDeviceToken()) {
        optionals.set(13);
      }
      if (struct.isSetDeviceSource()) {
        optionals.set(14);
      }
      if (struct.isSetDateCreated()) {
        optionals.set(15);
      }
      if (struct.isSetLastLogin()) {
        optionals.set(16);
      }
      if (struct.isSetLockStartdate()) {
        optionals.set(17);
      }
      if (struct.isSetLockEnddate()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetProfileId()) {
        oprot.writeString(struct.profileId);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetAvatarPath()) {
        oprot.writeString(struct.avatarPath);
      }
      if (struct.isSetGender()) {
        oprot.writeI16(struct.gender);
      }
      if (struct.isSetMoney()) {
        oprot.writeI64(struct.money);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetStatus()) {
        oprot.writeI16(struct.status);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetProviderId()) {
        oprot.writeI32(struct.providerId);
      }
      if (struct.isSetDeviceToken()) {
        oprot.writeString(struct.deviceToken);
      }
      if (struct.isSetDeviceSource()) {
        oprot.writeI16(struct.deviceSource);
      }
      if (struct.isSetDateCreated()) {
        oprot.writeString(struct.dateCreated);
      }
      if (struct.isSetLastLogin()) {
        oprot.writeString(struct.lastLogin);
      }
      if (struct.isSetLockStartdate()) {
        oprot.writeString(struct.lockStartdate);
      }
      if (struct.isSetLockEnddate()) {
        oprot.writeString(struct.lockEnddate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.profileId = iprot.readString();
        struct.setProfileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.avatarPath = iprot.readString();
        struct.setAvatarPathIsSet(true);
      }
      if (incoming.get(6)) {
        struct.gender = iprot.readI16();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.money = iprot.readI64();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(9)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI16();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.providerId = iprot.readI32();
        struct.setProviderIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.deviceToken = iprot.readString();
        struct.setDeviceTokenIsSet(true);
      }
      if (incoming.get(14)) {
        struct.deviceSource = iprot.readI16();
        struct.setDeviceSourceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dateCreated = iprot.readString();
        struct.setDateCreatedIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastLogin = iprot.readString();
        struct.setLastLoginIsSet(true);
      }
      if (incoming.get(17)) {
        struct.lockStartdate = iprot.readString();
        struct.setLockStartdateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lockEnddate = iprot.readString();
        struct.setLockEnddateIsSet(true);
      }
    }
  }

}

