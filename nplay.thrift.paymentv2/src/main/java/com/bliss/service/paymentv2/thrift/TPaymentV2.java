/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.service.paymentv2.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPaymentV2 {

  public interface Iface extends com.bliss.service.thrift.TServiceBase2.Iface {

    public List<TProductValue> listProductByUserWebPayment(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException;

    public String processPaymentCard(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice) throws org.apache.thrift.TException;

    public Map<EProductType,List<TProductValue>> listProductByUser(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException;

    public TSpecialDealValue getSpecialDealByUser(long userId) throws org.apache.thrift.TException;

    public List<TProductValue> listProduct() throws org.apache.thrift.TException;

    public TProductValue addProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException;

    public boolean updateProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException;

    public boolean updateProductStatus(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status) throws org.apache.thrift.TException;

    public List<TPromotionValue> listPromotion(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public TPromotionValue addPromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException;

    public TPromotionValue getPromotion(int promotionId) throws org.apache.thrift.TException;

    public boolean updatePromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException;

    public boolean updatePromotionStatus(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status) throws org.apache.thrift.TException;

    public List<TSpecialDealValue> listSpecialDeal(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public List<TSpecialDealValue> listSpecialDealByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public List<TSpecialDealValue> listSpecialDealByStatus(long fromDate, long toDate, int page, int offset, EStatus status) throws org.apache.thrift.TException;

    public TSpecialDealValue addSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException;

    public List<TSpecialDealValue> addSpecialDealList(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList) throws org.apache.thrift.TException;

    public TSpecialDealValue getSpecialDeal(long specialDealId) throws org.apache.thrift.TException;

    public boolean updateSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException;

    public boolean updateSpecialDealStatus(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status) throws org.apache.thrift.TException;

    public List<TUserPromotion> listUserPromotion() throws org.apache.thrift.TException;

    public TUserPromotion addUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException;

    public boolean updateUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException;

    public List<TInvoiceValue> listInvoice(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public List<TInvoiceValue> listInvoiceByProductType(EProductType productType, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public List<TInvoiceValue> listInvoiceByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException;

    public TInvoiceValue getInvoice(long invoiceId) throws org.apache.thrift.TException;

    public TInvoiceValue reProcessInvoice(long invoiceId) throws org.apache.thrift.TException;

    public TInvoiceValue updateRefund(long invoiceId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.bliss.service.thrift.TServiceBase2 .AsyncIface {

    public void listProductByUserWebPayment(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listProductByUserWebPayment_call> resultHandler) throws org.apache.thrift.TException;

    public void processPaymentCard(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.processPaymentCard_call> resultHandler) throws org.apache.thrift.TException;

    public void listProductByUser(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listProductByUser_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpecialDealByUser(long userId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpecialDealByUser_call> resultHandler) throws org.apache.thrift.TException;

    public void listProduct(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listProduct_call> resultHandler) throws org.apache.thrift.TException;

    public void addProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addProduct_call> resultHandler) throws org.apache.thrift.TException;

    public void updateProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateProduct_call> resultHandler) throws org.apache.thrift.TException;

    public void updateProductStatus(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateProductStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void listPromotion(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void addPromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void getPromotion(int promotionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePromotionStatus(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePromotionStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void listSpecialDeal(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listSpecialDeal_call> resultHandler) throws org.apache.thrift.TException;

    public void listSpecialDealByUser(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listSpecialDealByUser_call> resultHandler) throws org.apache.thrift.TException;

    public void listSpecialDealByStatus(long fromDate, long toDate, int page, int offset, EStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listSpecialDealByStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void addSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addSpecialDeal_call> resultHandler) throws org.apache.thrift.TException;

    public void addSpecialDealList(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addSpecialDealList_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpecialDeal(long specialDealId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpecialDeal_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSpecialDeal_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSpecialDealStatus(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSpecialDealStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void listUserPromotion(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listUserPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void addUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addUserPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void updateUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateUserPromotion_call> resultHandler) throws org.apache.thrift.TException;

    public void listInvoice(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listInvoice_call> resultHandler) throws org.apache.thrift.TException;

    public void listInvoiceByProductType(EProductType productType, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listInvoiceByProductType_call> resultHandler) throws org.apache.thrift.TException;

    public void listInvoiceByUser(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listInvoiceByUser_call> resultHandler) throws org.apache.thrift.TException;

    public void getInvoice(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInvoice_call> resultHandler) throws org.apache.thrift.TException;

    public void reProcessInvoice(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reProcessInvoice_call> resultHandler) throws org.apache.thrift.TException;

    public void updateRefund(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateRefund_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.bliss.service.thrift.TServiceBase2.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TProductValue> listProductByUserWebPayment(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException
    {
      send_listProductByUserWebPayment(profile);
      return recv_listProductByUserWebPayment();
    }

    public void send_listProductByUserWebPayment(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException
    {
      listProductByUserWebPayment_args args = new listProductByUserWebPayment_args();
      args.setProfile(profile);
      sendBase("listProductByUserWebPayment", args);
    }

    public List<TProductValue> recv_listProductByUserWebPayment() throws org.apache.thrift.TException
    {
      listProductByUserWebPayment_result result = new listProductByUserWebPayment_result();
      receiveBase(result, "listProductByUserWebPayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listProductByUserWebPayment failed: unknown result");
    }

    public String processPaymentCard(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice) throws org.apache.thrift.TException
    {
      send_processPaymentCard(auth, invoice);
      return recv_processPaymentCard();
    }

    public void send_processPaymentCard(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice) throws org.apache.thrift.TException
    {
      processPaymentCard_args args = new processPaymentCard_args();
      args.setAuth(auth);
      args.setInvoice(invoice);
      sendBase("processPaymentCard", args);
    }

    public String recv_processPaymentCard() throws org.apache.thrift.TException
    {
      processPaymentCard_result result = new processPaymentCard_result();
      receiveBase(result, "processPaymentCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "processPaymentCard failed: unknown result");
    }

    public Map<EProductType,List<TProductValue>> listProductByUser(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException
    {
      send_listProductByUser(profile);
      return recv_listProductByUser();
    }

    public void send_listProductByUser(com.bliss.service.thrift.TUserMiniProfile profile) throws org.apache.thrift.TException
    {
      listProductByUser_args args = new listProductByUser_args();
      args.setProfile(profile);
      sendBase("listProductByUser", args);
    }

    public Map<EProductType,List<TProductValue>> recv_listProductByUser() throws org.apache.thrift.TException
    {
      listProductByUser_result result = new listProductByUser_result();
      receiveBase(result, "listProductByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listProductByUser failed: unknown result");
    }

    public TSpecialDealValue getSpecialDealByUser(long userId) throws org.apache.thrift.TException
    {
      send_getSpecialDealByUser(userId);
      return recv_getSpecialDealByUser();
    }

    public void send_getSpecialDealByUser(long userId) throws org.apache.thrift.TException
    {
      getSpecialDealByUser_args args = new getSpecialDealByUser_args();
      args.setUserId(userId);
      sendBase("getSpecialDealByUser", args);
    }

    public TSpecialDealValue recv_getSpecialDealByUser() throws org.apache.thrift.TException
    {
      getSpecialDealByUser_result result = new getSpecialDealByUser_result();
      receiveBase(result, "getSpecialDealByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpecialDealByUser failed: unknown result");
    }

    public List<TProductValue> listProduct() throws org.apache.thrift.TException
    {
      send_listProduct();
      return recv_listProduct();
    }

    public void send_listProduct() throws org.apache.thrift.TException
    {
      listProduct_args args = new listProduct_args();
      sendBase("listProduct", args);
    }

    public List<TProductValue> recv_listProduct() throws org.apache.thrift.TException
    {
      listProduct_result result = new listProduct_result();
      receiveBase(result, "listProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listProduct failed: unknown result");
    }

    public TProductValue addProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException
    {
      send_addProduct(auth, product);
      return recv_addProduct();
    }

    public void send_addProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException
    {
      addProduct_args args = new addProduct_args();
      args.setAuth(auth);
      args.setProduct(product);
      sendBase("addProduct", args);
    }

    public TProductValue recv_addProduct() throws org.apache.thrift.TException
    {
      addProduct_result result = new addProduct_result();
      receiveBase(result, "addProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProduct failed: unknown result");
    }

    public boolean updateProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException
    {
      send_updateProduct(auth, product);
      return recv_updateProduct();
    }

    public void send_updateProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product) throws org.apache.thrift.TException
    {
      updateProduct_args args = new updateProduct_args();
      args.setAuth(auth);
      args.setProduct(product);
      sendBase("updateProduct", args);
    }

    public boolean recv_updateProduct() throws org.apache.thrift.TException
    {
      updateProduct_result result = new updateProduct_result();
      receiveBase(result, "updateProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProduct failed: unknown result");
    }

    public boolean updateProductStatus(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status) throws org.apache.thrift.TException
    {
      send_updateProductStatus(auth, productId, status);
      return recv_updateProductStatus();
    }

    public void send_updateProductStatus(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status) throws org.apache.thrift.TException
    {
      updateProductStatus_args args = new updateProductStatus_args();
      args.setAuth(auth);
      args.setProductId(productId);
      args.setStatus(status);
      sendBase("updateProductStatus", args);
    }

    public boolean recv_updateProductStatus() throws org.apache.thrift.TException
    {
      updateProductStatus_result result = new updateProductStatus_result();
      receiveBase(result, "updateProductStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductStatus failed: unknown result");
    }

    public List<TPromotionValue> listPromotion(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listPromotion(fromDate, toDate, page, offset);
      return recv_listPromotion();
    }

    public void send_listPromotion(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listPromotion_args args = new listPromotion_args();
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listPromotion", args);
    }

    public List<TPromotionValue> recv_listPromotion() throws org.apache.thrift.TException
    {
      listPromotion_result result = new listPromotion_result();
      receiveBase(result, "listPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPromotion failed: unknown result");
    }

    public TPromotionValue addPromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException
    {
      send_addPromotion(auth, promotion);
      return recv_addPromotion();
    }

    public void send_addPromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException
    {
      addPromotion_args args = new addPromotion_args();
      args.setAuth(auth);
      args.setPromotion(promotion);
      sendBase("addPromotion", args);
    }

    public TPromotionValue recv_addPromotion() throws org.apache.thrift.TException
    {
      addPromotion_result result = new addPromotion_result();
      receiveBase(result, "addPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPromotion failed: unknown result");
    }

    public TPromotionValue getPromotion(int promotionId) throws org.apache.thrift.TException
    {
      send_getPromotion(promotionId);
      return recv_getPromotion();
    }

    public void send_getPromotion(int promotionId) throws org.apache.thrift.TException
    {
      getPromotion_args args = new getPromotion_args();
      args.setPromotionId(promotionId);
      sendBase("getPromotion", args);
    }

    public TPromotionValue recv_getPromotion() throws org.apache.thrift.TException
    {
      getPromotion_result result = new getPromotion_result();
      receiveBase(result, "getPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPromotion failed: unknown result");
    }

    public boolean updatePromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException
    {
      send_updatePromotion(auth, promotion);
      return recv_updatePromotion();
    }

    public void send_updatePromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion) throws org.apache.thrift.TException
    {
      updatePromotion_args args = new updatePromotion_args();
      args.setAuth(auth);
      args.setPromotion(promotion);
      sendBase("updatePromotion", args);
    }

    public boolean recv_updatePromotion() throws org.apache.thrift.TException
    {
      updatePromotion_result result = new updatePromotion_result();
      receiveBase(result, "updatePromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePromotion failed: unknown result");
    }

    public boolean updatePromotionStatus(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status) throws org.apache.thrift.TException
    {
      send_updatePromotionStatus(auth, promotionId, status);
      return recv_updatePromotionStatus();
    }

    public void send_updatePromotionStatus(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status) throws org.apache.thrift.TException
    {
      updatePromotionStatus_args args = new updatePromotionStatus_args();
      args.setAuth(auth);
      args.setPromotionId(promotionId);
      args.setStatus(status);
      sendBase("updatePromotionStatus", args);
    }

    public boolean recv_updatePromotionStatus() throws org.apache.thrift.TException
    {
      updatePromotionStatus_result result = new updatePromotionStatus_result();
      receiveBase(result, "updatePromotionStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePromotionStatus failed: unknown result");
    }

    public List<TSpecialDealValue> listSpecialDeal(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listSpecialDeal(fromDate, toDate, page, offset);
      return recv_listSpecialDeal();
    }

    public void send_listSpecialDeal(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listSpecialDeal_args args = new listSpecialDeal_args();
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listSpecialDeal", args);
    }

    public List<TSpecialDealValue> recv_listSpecialDeal() throws org.apache.thrift.TException
    {
      listSpecialDeal_result result = new listSpecialDeal_result();
      receiveBase(result, "listSpecialDeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listSpecialDeal failed: unknown result");
    }

    public List<TSpecialDealValue> listSpecialDealByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listSpecialDealByUser(userId, fromDate, toDate, page, offset);
      return recv_listSpecialDealByUser();
    }

    public void send_listSpecialDealByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listSpecialDealByUser_args args = new listSpecialDealByUser_args();
      args.setUserId(userId);
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listSpecialDealByUser", args);
    }

    public List<TSpecialDealValue> recv_listSpecialDealByUser() throws org.apache.thrift.TException
    {
      listSpecialDealByUser_result result = new listSpecialDealByUser_result();
      receiveBase(result, "listSpecialDealByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listSpecialDealByUser failed: unknown result");
    }

    public List<TSpecialDealValue> listSpecialDealByStatus(long fromDate, long toDate, int page, int offset, EStatus status) throws org.apache.thrift.TException
    {
      send_listSpecialDealByStatus(fromDate, toDate, page, offset, status);
      return recv_listSpecialDealByStatus();
    }

    public void send_listSpecialDealByStatus(long fromDate, long toDate, int page, int offset, EStatus status) throws org.apache.thrift.TException
    {
      listSpecialDealByStatus_args args = new listSpecialDealByStatus_args();
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      args.setStatus(status);
      sendBase("listSpecialDealByStatus", args);
    }

    public List<TSpecialDealValue> recv_listSpecialDealByStatus() throws org.apache.thrift.TException
    {
      listSpecialDealByStatus_result result = new listSpecialDealByStatus_result();
      receiveBase(result, "listSpecialDealByStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listSpecialDealByStatus failed: unknown result");
    }

    public TSpecialDealValue addSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException
    {
      send_addSpecialDeal(auth, specialDeal);
      return recv_addSpecialDeal();
    }

    public void send_addSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException
    {
      addSpecialDeal_args args = new addSpecialDeal_args();
      args.setAuth(auth);
      args.setSpecialDeal(specialDeal);
      sendBase("addSpecialDeal", args);
    }

    public TSpecialDealValue recv_addSpecialDeal() throws org.apache.thrift.TException
    {
      addSpecialDeal_result result = new addSpecialDeal_result();
      receiveBase(result, "addSpecialDeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSpecialDeal failed: unknown result");
    }

    public List<TSpecialDealValue> addSpecialDealList(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList) throws org.apache.thrift.TException
    {
      send_addSpecialDealList(auth, specialDealList);
      return recv_addSpecialDealList();
    }

    public void send_addSpecialDealList(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList) throws org.apache.thrift.TException
    {
      addSpecialDealList_args args = new addSpecialDealList_args();
      args.setAuth(auth);
      args.setSpecialDealList(specialDealList);
      sendBase("addSpecialDealList", args);
    }

    public List<TSpecialDealValue> recv_addSpecialDealList() throws org.apache.thrift.TException
    {
      addSpecialDealList_result result = new addSpecialDealList_result();
      receiveBase(result, "addSpecialDealList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSpecialDealList failed: unknown result");
    }

    public TSpecialDealValue getSpecialDeal(long specialDealId) throws org.apache.thrift.TException
    {
      send_getSpecialDeal(specialDealId);
      return recv_getSpecialDeal();
    }

    public void send_getSpecialDeal(long specialDealId) throws org.apache.thrift.TException
    {
      getSpecialDeal_args args = new getSpecialDeal_args();
      args.setSpecialDealId(specialDealId);
      sendBase("getSpecialDeal", args);
    }

    public TSpecialDealValue recv_getSpecialDeal() throws org.apache.thrift.TException
    {
      getSpecialDeal_result result = new getSpecialDeal_result();
      receiveBase(result, "getSpecialDeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpecialDeal failed: unknown result");
    }

    public boolean updateSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException
    {
      send_updateSpecialDeal(auth, specialDeal);
      return recv_updateSpecialDeal();
    }

    public void send_updateSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal) throws org.apache.thrift.TException
    {
      updateSpecialDeal_args args = new updateSpecialDeal_args();
      args.setAuth(auth);
      args.setSpecialDeal(specialDeal);
      sendBase("updateSpecialDeal", args);
    }

    public boolean recv_updateSpecialDeal() throws org.apache.thrift.TException
    {
      updateSpecialDeal_result result = new updateSpecialDeal_result();
      receiveBase(result, "updateSpecialDeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSpecialDeal failed: unknown result");
    }

    public boolean updateSpecialDealStatus(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status) throws org.apache.thrift.TException
    {
      send_updateSpecialDealStatus(auth, specialDealId, status);
      return recv_updateSpecialDealStatus();
    }

    public void send_updateSpecialDealStatus(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status) throws org.apache.thrift.TException
    {
      updateSpecialDealStatus_args args = new updateSpecialDealStatus_args();
      args.setAuth(auth);
      args.setSpecialDealId(specialDealId);
      args.setStatus(status);
      sendBase("updateSpecialDealStatus", args);
    }

    public boolean recv_updateSpecialDealStatus() throws org.apache.thrift.TException
    {
      updateSpecialDealStatus_result result = new updateSpecialDealStatus_result();
      receiveBase(result, "updateSpecialDealStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSpecialDealStatus failed: unknown result");
    }

    public List<TUserPromotion> listUserPromotion() throws org.apache.thrift.TException
    {
      send_listUserPromotion();
      return recv_listUserPromotion();
    }

    public void send_listUserPromotion() throws org.apache.thrift.TException
    {
      listUserPromotion_args args = new listUserPromotion_args();
      sendBase("listUserPromotion", args);
    }

    public List<TUserPromotion> recv_listUserPromotion() throws org.apache.thrift.TException
    {
      listUserPromotion_result result = new listUserPromotion_result();
      receiveBase(result, "listUserPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserPromotion failed: unknown result");
    }

    public TUserPromotion addUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException
    {
      send_addUserPromotion(auth, userPromotion);
      return recv_addUserPromotion();
    }

    public void send_addUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException
    {
      addUserPromotion_args args = new addUserPromotion_args();
      args.setAuth(auth);
      args.setUserPromotion(userPromotion);
      sendBase("addUserPromotion", args);
    }

    public TUserPromotion recv_addUserPromotion() throws org.apache.thrift.TException
    {
      addUserPromotion_result result = new addUserPromotion_result();
      receiveBase(result, "addUserPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addUserPromotion failed: unknown result");
    }

    public boolean updateUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException
    {
      send_updateUserPromotion(auth, userPromotion);
      return recv_updateUserPromotion();
    }

    public void send_updateUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion) throws org.apache.thrift.TException
    {
      updateUserPromotion_args args = new updateUserPromotion_args();
      args.setAuth(auth);
      args.setUserPromotion(userPromotion);
      sendBase("updateUserPromotion", args);
    }

    public boolean recv_updateUserPromotion() throws org.apache.thrift.TException
    {
      updateUserPromotion_result result = new updateUserPromotion_result();
      receiveBase(result, "updateUserPromotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserPromotion failed: unknown result");
    }

    public List<TInvoiceValue> listInvoice(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listInvoice(fromDate, toDate, page, offset);
      return recv_listInvoice();
    }

    public void send_listInvoice(long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listInvoice_args args = new listInvoice_args();
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listInvoice", args);
    }

    public List<TInvoiceValue> recv_listInvoice() throws org.apache.thrift.TException
    {
      listInvoice_result result = new listInvoice_result();
      receiveBase(result, "listInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listInvoice failed: unknown result");
    }

    public List<TInvoiceValue> listInvoiceByProductType(EProductType productType, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listInvoiceByProductType(productType, fromDate, toDate, page, offset);
      return recv_listInvoiceByProductType();
    }

    public void send_listInvoiceByProductType(EProductType productType, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listInvoiceByProductType_args args = new listInvoiceByProductType_args();
      args.setProductType(productType);
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listInvoiceByProductType", args);
    }

    public List<TInvoiceValue> recv_listInvoiceByProductType() throws org.apache.thrift.TException
    {
      listInvoiceByProductType_result result = new listInvoiceByProductType_result();
      receiveBase(result, "listInvoiceByProductType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listInvoiceByProductType failed: unknown result");
    }

    public List<TInvoiceValue> listInvoiceByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      send_listInvoiceByUser(userId, fromDate, toDate, page, offset);
      return recv_listInvoiceByUser();
    }

    public void send_listInvoiceByUser(long userId, long fromDate, long toDate, int page, int offset) throws org.apache.thrift.TException
    {
      listInvoiceByUser_args args = new listInvoiceByUser_args();
      args.setUserId(userId);
      args.setFromDate(fromDate);
      args.setToDate(toDate);
      args.setPage(page);
      args.setOffset(offset);
      sendBase("listInvoiceByUser", args);
    }

    public List<TInvoiceValue> recv_listInvoiceByUser() throws org.apache.thrift.TException
    {
      listInvoiceByUser_result result = new listInvoiceByUser_result();
      receiveBase(result, "listInvoiceByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listInvoiceByUser failed: unknown result");
    }

    public TInvoiceValue getInvoice(long invoiceId) throws org.apache.thrift.TException
    {
      send_getInvoice(invoiceId);
      return recv_getInvoice();
    }

    public void send_getInvoice(long invoiceId) throws org.apache.thrift.TException
    {
      getInvoice_args args = new getInvoice_args();
      args.setInvoiceId(invoiceId);
      sendBase("getInvoice", args);
    }

    public TInvoiceValue recv_getInvoice() throws org.apache.thrift.TException
    {
      getInvoice_result result = new getInvoice_result();
      receiveBase(result, "getInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInvoice failed: unknown result");
    }

    public TInvoiceValue reProcessInvoice(long invoiceId) throws org.apache.thrift.TException
    {
      send_reProcessInvoice(invoiceId);
      return recv_reProcessInvoice();
    }

    public void send_reProcessInvoice(long invoiceId) throws org.apache.thrift.TException
    {
      reProcessInvoice_args args = new reProcessInvoice_args();
      args.setInvoiceId(invoiceId);
      sendBase("reProcessInvoice", args);
    }

    public TInvoiceValue recv_reProcessInvoice() throws org.apache.thrift.TException
    {
      reProcessInvoice_result result = new reProcessInvoice_result();
      receiveBase(result, "reProcessInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reProcessInvoice failed: unknown result");
    }

    public TInvoiceValue updateRefund(long invoiceId) throws org.apache.thrift.TException
    {
      send_updateRefund(invoiceId);
      return recv_updateRefund();
    }

    public void send_updateRefund(long invoiceId) throws org.apache.thrift.TException
    {
      updateRefund_args args = new updateRefund_args();
      args.setInvoiceId(invoiceId);
      sendBase("updateRefund", args);
    }

    public TInvoiceValue recv_updateRefund() throws org.apache.thrift.TException
    {
      updateRefund_result result = new updateRefund_result();
      receiveBase(result, "updateRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRefund failed: unknown result");
    }

  }
  public static class AsyncClient extends com.bliss.service.thrift.TServiceBase2.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void listProductByUserWebPayment(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<listProductByUserWebPayment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listProductByUserWebPayment_call method_call = new listProductByUserWebPayment_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listProductByUserWebPayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.TUserMiniProfile profile;
      public listProductByUserWebPayment_call(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<listProductByUserWebPayment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listProductByUserWebPayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listProductByUserWebPayment_args args = new listProductByUserWebPayment_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProductValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listProductByUserWebPayment();
      }
    }

    public void processPaymentCard(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice, org.apache.thrift.async.AsyncMethodCallback<processPaymentCard_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processPaymentCard_call method_call = new processPaymentCard_call(auth, invoice, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processPaymentCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TInvoiceValue invoice;
      public processPaymentCard_call(com.bliss.service.thrift.OpAuth auth, TInvoiceValue invoice, org.apache.thrift.async.AsyncMethodCallback<processPaymentCard_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.invoice = invoice;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processPaymentCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processPaymentCard_args args = new processPaymentCard_args();
        args.setAuth(auth);
        args.setInvoice(invoice);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_processPaymentCard();
      }
    }

    public void listProductByUser(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<listProductByUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listProductByUser_call method_call = new listProductByUser_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listProductByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.TUserMiniProfile profile;
      public listProductByUser_call(com.bliss.service.thrift.TUserMiniProfile profile, org.apache.thrift.async.AsyncMethodCallback<listProductByUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listProductByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listProductByUser_args args = new listProductByUser_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<EProductType,List<TProductValue>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listProductByUser();
      }
    }

    public void getSpecialDealByUser(long userId, org.apache.thrift.async.AsyncMethodCallback<getSpecialDealByUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpecialDealByUser_call method_call = new getSpecialDealByUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpecialDealByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      public getSpecialDealByUser_call(long userId, org.apache.thrift.async.AsyncMethodCallback<getSpecialDealByUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecialDealByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpecialDealByUser_args args = new getSpecialDealByUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSpecialDealValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpecialDealByUser();
      }
    }

    public void listProduct(org.apache.thrift.async.AsyncMethodCallback<listProduct_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listProduct_call method_call = new listProduct_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listProduct_call(org.apache.thrift.async.AsyncMethodCallback<listProduct_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listProduct_args args = new listProduct_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProductValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listProduct();
      }
    }

    public void addProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<addProduct_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProduct_call method_call = new addProduct_call(auth, product, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TProductValue product;
      public addProduct_call(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<addProduct_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.product = product;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProduct_args args = new addProduct_args();
        args.setAuth(auth);
        args.setProduct(product);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TProductValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProduct();
      }
    }

    public void updateProduct(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<updateProduct_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProduct_call method_call = new updateProduct_call(auth, product, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TProductValue product;
      public updateProduct_call(com.bliss.service.thrift.OpAuth auth, TProductValue product, org.apache.thrift.async.AsyncMethodCallback<updateProduct_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.product = product;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProduct_args args = new updateProduct_args();
        args.setAuth(auth);
        args.setProduct(product);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProduct();
      }
    }

    public void updateProductStatus(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updateProductStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductStatus_call method_call = new updateProductStatus_call(auth, productId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private int productId;
      private EStatus status;
      public updateProductStatus_call(com.bliss.service.thrift.OpAuth auth, int productId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updateProductStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.productId = productId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductStatus_args args = new updateProductStatus_args();
        args.setAuth(auth);
        args.setProductId(productId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductStatus();
      }
    }

    public void listPromotion(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPromotion_call method_call = new listPromotion_call(fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listPromotion_call(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPromotion_args args = new listPromotion_args();
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TPromotionValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPromotion();
      }
    }

    public void addPromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<addPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPromotion_call method_call = new addPromotion_call(auth, promotion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TPromotionValue promotion;
      public addPromotion_call(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<addPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.promotion = promotion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPromotion_args args = new addPromotion_args();
        args.setAuth(auth);
        args.setPromotion(promotion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPromotionValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPromotion();
      }
    }

    public void getPromotion(int promotionId, org.apache.thrift.async.AsyncMethodCallback<getPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPromotion_call method_call = new getPromotion_call(promotionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int promotionId;
      public getPromotion_call(int promotionId, org.apache.thrift.async.AsyncMethodCallback<getPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.promotionId = promotionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPromotion_args args = new getPromotion_args();
        args.setPromotionId(promotionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPromotionValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPromotion();
      }
    }

    public void updatePromotion(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<updatePromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePromotion_call method_call = new updatePromotion_call(auth, promotion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TPromotionValue promotion;
      public updatePromotion_call(com.bliss.service.thrift.OpAuth auth, TPromotionValue promotion, org.apache.thrift.async.AsyncMethodCallback<updatePromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.promotion = promotion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePromotion_args args = new updatePromotion_args();
        args.setAuth(auth);
        args.setPromotion(promotion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePromotion();
      }
    }

    public void updatePromotionStatus(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updatePromotionStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePromotionStatus_call method_call = new updatePromotionStatus_call(auth, promotionId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePromotionStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private int promotionId;
      private EStatus status;
      public updatePromotionStatus_call(com.bliss.service.thrift.OpAuth auth, int promotionId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updatePromotionStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.promotionId = promotionId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePromotionStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePromotionStatus_args args = new updatePromotionStatus_args();
        args.setAuth(auth);
        args.setPromotionId(promotionId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePromotionStatus();
      }
    }

    public void listSpecialDeal(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listSpecialDeal_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listSpecialDeal_call method_call = new listSpecialDeal_call(fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listSpecialDeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listSpecialDeal_call(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listSpecialDeal_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listSpecialDeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listSpecialDeal_args args = new listSpecialDeal_args();
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TSpecialDealValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listSpecialDeal();
      }
    }

    public void listSpecialDealByUser(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listSpecialDealByUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listSpecialDealByUser_call method_call = new listSpecialDealByUser_call(userId, fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listSpecialDealByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listSpecialDealByUser_call(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listSpecialDealByUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listSpecialDealByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listSpecialDealByUser_args args = new listSpecialDealByUser_args();
        args.setUserId(userId);
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TSpecialDealValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listSpecialDealByUser();
      }
    }

    public void listSpecialDealByStatus(long fromDate, long toDate, int page, int offset, EStatus status, org.apache.thrift.async.AsyncMethodCallback<listSpecialDealByStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listSpecialDealByStatus_call method_call = new listSpecialDealByStatus_call(fromDate, toDate, page, offset, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listSpecialDealByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      private EStatus status;
      public listSpecialDealByStatus_call(long fromDate, long toDate, int page, int offset, EStatus status, org.apache.thrift.async.AsyncMethodCallback<listSpecialDealByStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listSpecialDealByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listSpecialDealByStatus_args args = new listSpecialDealByStatus_args();
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TSpecialDealValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listSpecialDealByStatus();
      }
    }

    public void addSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<addSpecialDeal_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSpecialDeal_call method_call = new addSpecialDeal_call(auth, specialDeal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSpecialDeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TSpecialDealValue specialDeal;
      public addSpecialDeal_call(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<addSpecialDeal_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.specialDeal = specialDeal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSpecialDeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSpecialDeal_args args = new addSpecialDeal_args();
        args.setAuth(auth);
        args.setSpecialDeal(specialDeal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSpecialDealValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSpecialDeal();
      }
    }

    public void addSpecialDealList(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList, org.apache.thrift.async.AsyncMethodCallback<addSpecialDealList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSpecialDealList_call method_call = new addSpecialDealList_call(auth, specialDealList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSpecialDealList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private List<TSpecialDealValue> specialDealList;
      public addSpecialDealList_call(com.bliss.service.thrift.OpAuth auth, List<TSpecialDealValue> specialDealList, org.apache.thrift.async.AsyncMethodCallback<addSpecialDealList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.specialDealList = specialDealList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSpecialDealList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSpecialDealList_args args = new addSpecialDealList_args();
        args.setAuth(auth);
        args.setSpecialDealList(specialDealList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TSpecialDealValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSpecialDealList();
      }
    }

    public void getSpecialDeal(long specialDealId, org.apache.thrift.async.AsyncMethodCallback<getSpecialDeal_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpecialDeal_call method_call = new getSpecialDeal_call(specialDealId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpecialDeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long specialDealId;
      public getSpecialDeal_call(long specialDealId, org.apache.thrift.async.AsyncMethodCallback<getSpecialDeal_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.specialDealId = specialDealId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecialDeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpecialDeal_args args = new getSpecialDeal_args();
        args.setSpecialDealId(specialDealId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSpecialDealValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpecialDeal();
      }
    }

    public void updateSpecialDeal(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<updateSpecialDeal_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSpecialDeal_call method_call = new updateSpecialDeal_call(auth, specialDeal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSpecialDeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TSpecialDealValue specialDeal;
      public updateSpecialDeal_call(com.bliss.service.thrift.OpAuth auth, TSpecialDealValue specialDeal, org.apache.thrift.async.AsyncMethodCallback<updateSpecialDeal_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.specialDeal = specialDeal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSpecialDeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSpecialDeal_args args = new updateSpecialDeal_args();
        args.setAuth(auth);
        args.setSpecialDeal(specialDeal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSpecialDeal();
      }
    }

    public void updateSpecialDealStatus(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updateSpecialDealStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSpecialDealStatus_call method_call = new updateSpecialDealStatus_call(auth, specialDealId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSpecialDealStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private long specialDealId;
      private EStatus status;
      public updateSpecialDealStatus_call(com.bliss.service.thrift.OpAuth auth, long specialDealId, EStatus status, org.apache.thrift.async.AsyncMethodCallback<updateSpecialDealStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.specialDealId = specialDealId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSpecialDealStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSpecialDealStatus_args args = new updateSpecialDealStatus_args();
        args.setAuth(auth);
        args.setSpecialDealId(specialDealId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSpecialDealStatus();
      }
    }

    public void listUserPromotion(org.apache.thrift.async.AsyncMethodCallback<listUserPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserPromotion_call method_call = new listUserPromotion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listUserPromotion_call(org.apache.thrift.async.AsyncMethodCallback<listUserPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserPromotion_args args = new listUserPromotion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TUserPromotion> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserPromotion();
      }
    }

    public void addUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<addUserPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addUserPromotion_call method_call = new addUserPromotion_call(auth, userPromotion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TUserPromotion userPromotion;
      public addUserPromotion_call(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<addUserPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.userPromotion = userPromotion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserPromotion_args args = new addUserPromotion_args();
        args.setAuth(auth);
        args.setUserPromotion(userPromotion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TUserPromotion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addUserPromotion();
      }
    }

    public void updateUserPromotion(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<updateUserPromotion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserPromotion_call method_call = new updateUserPromotion_call(auth, userPromotion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.service.thrift.OpAuth auth;
      private TUserPromotion userPromotion;
      public updateUserPromotion_call(com.bliss.service.thrift.OpAuth auth, TUserPromotion userPromotion, org.apache.thrift.async.AsyncMethodCallback<updateUserPromotion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.userPromotion = userPromotion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserPromotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserPromotion_args args = new updateUserPromotion_args();
        args.setAuth(auth);
        args.setUserPromotion(userPromotion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserPromotion();
      }
    }

    public void listInvoice(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listInvoice_call method_call = new listInvoice_call(fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listInvoice_call(long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listInvoice_args args = new listInvoice_args();
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TInvoiceValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listInvoice();
      }
    }

    public void listInvoiceByProductType(EProductType productType, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoiceByProductType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listInvoiceByProductType_call method_call = new listInvoiceByProductType_call(productType, fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listInvoiceByProductType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EProductType productType;
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listInvoiceByProductType_call(EProductType productType, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoiceByProductType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productType = productType;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listInvoiceByProductType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listInvoiceByProductType_args args = new listInvoiceByProductType_args();
        args.setProductType(productType);
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TInvoiceValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listInvoiceByProductType();
      }
    }

    public void listInvoiceByUser(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoiceByUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listInvoiceByUser_call method_call = new listInvoiceByUser_call(userId, fromDate, toDate, page, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listInvoiceByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private long fromDate;
      private long toDate;
      private int page;
      private int offset;
      public listInvoiceByUser_call(long userId, long fromDate, long toDate, int page, int offset, org.apache.thrift.async.AsyncMethodCallback<listInvoiceByUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.page = page;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listInvoiceByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listInvoiceByUser_args args = new listInvoiceByUser_args();
        args.setUserId(userId);
        args.setFromDate(fromDate);
        args.setToDate(toDate);
        args.setPage(page);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TInvoiceValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listInvoiceByUser();
      }
    }

    public void getInvoice(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<getInvoice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInvoice_call method_call = new getInvoice_call(invoiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long invoiceId;
      public getInvoice_call(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<getInvoice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInvoice_args args = new getInvoice_args();
        args.setInvoiceId(invoiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TInvoiceValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInvoice();
      }
    }

    public void reProcessInvoice(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<reProcessInvoice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reProcessInvoice_call method_call = new reProcessInvoice_call(invoiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reProcessInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long invoiceId;
      public reProcessInvoice_call(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<reProcessInvoice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reProcessInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reProcessInvoice_args args = new reProcessInvoice_args();
        args.setInvoiceId(invoiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TInvoiceValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reProcessInvoice();
      }
    }

    public void updateRefund(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<updateRefund_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRefund_call method_call = new updateRefund_call(invoiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long invoiceId;
      public updateRefund_call(long invoiceId, org.apache.thrift.async.AsyncMethodCallback<updateRefund_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRefund_args args = new updateRefund_args();
        args.setInvoiceId(invoiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TInvoiceValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRefund();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.bliss.service.thrift.TServiceBase2.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("listProductByUserWebPayment", new listProductByUserWebPayment());
      processMap.put("processPaymentCard", new processPaymentCard());
      processMap.put("listProductByUser", new listProductByUser());
      processMap.put("getSpecialDealByUser", new getSpecialDealByUser());
      processMap.put("listProduct", new listProduct());
      processMap.put("addProduct", new addProduct());
      processMap.put("updateProduct", new updateProduct());
      processMap.put("updateProductStatus", new updateProductStatus());
      processMap.put("listPromotion", new listPromotion());
      processMap.put("addPromotion", new addPromotion());
      processMap.put("getPromotion", new getPromotion());
      processMap.put("updatePromotion", new updatePromotion());
      processMap.put("updatePromotionStatus", new updatePromotionStatus());
      processMap.put("listSpecialDeal", new listSpecialDeal());
      processMap.put("listSpecialDealByUser", new listSpecialDealByUser());
      processMap.put("listSpecialDealByStatus", new listSpecialDealByStatus());
      processMap.put("addSpecialDeal", new addSpecialDeal());
      processMap.put("addSpecialDealList", new addSpecialDealList());
      processMap.put("getSpecialDeal", new getSpecialDeal());
      processMap.put("updateSpecialDeal", new updateSpecialDeal());
      processMap.put("updateSpecialDealStatus", new updateSpecialDealStatus());
      processMap.put("listUserPromotion", new listUserPromotion());
      processMap.put("addUserPromotion", new addUserPromotion());
      processMap.put("updateUserPromotion", new updateUserPromotion());
      processMap.put("listInvoice", new listInvoice());
      processMap.put("listInvoiceByProductType", new listInvoiceByProductType());
      processMap.put("listInvoiceByUser", new listInvoiceByUser());
      processMap.put("getInvoice", new getInvoice());
      processMap.put("reProcessInvoice", new reProcessInvoice());
      processMap.put("updateRefund", new updateRefund());
      return processMap;
    }

    private static class listProductByUserWebPayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listProductByUserWebPayment_args> {
      public listProductByUserWebPayment() {
        super("listProductByUserWebPayment");
      }

      protected listProductByUserWebPayment_args getEmptyArgsInstance() {
        return new listProductByUserWebPayment_args();
      }

      protected listProductByUserWebPayment_result getResult(I iface, listProductByUserWebPayment_args args) throws org.apache.thrift.TException {
        listProductByUserWebPayment_result result = new listProductByUserWebPayment_result();
        result.success = iface.listProductByUserWebPayment(args.profile);
        return result;
      }
    }

    private static class processPaymentCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processPaymentCard_args> {
      public processPaymentCard() {
        super("processPaymentCard");
      }

      protected processPaymentCard_args getEmptyArgsInstance() {
        return new processPaymentCard_args();
      }

      protected processPaymentCard_result getResult(I iface, processPaymentCard_args args) throws org.apache.thrift.TException {
        processPaymentCard_result result = new processPaymentCard_result();
        result.success = iface.processPaymentCard(args.auth, args.invoice);
        return result;
      }
    }

    private static class listProductByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listProductByUser_args> {
      public listProductByUser() {
        super("listProductByUser");
      }

      protected listProductByUser_args getEmptyArgsInstance() {
        return new listProductByUser_args();
      }

      protected listProductByUser_result getResult(I iface, listProductByUser_args args) throws org.apache.thrift.TException {
        listProductByUser_result result = new listProductByUser_result();
        result.success = iface.listProductByUser(args.profile);
        return result;
      }
    }

    private static class getSpecialDealByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpecialDealByUser_args> {
      public getSpecialDealByUser() {
        super("getSpecialDealByUser");
      }

      protected getSpecialDealByUser_args getEmptyArgsInstance() {
        return new getSpecialDealByUser_args();
      }

      protected getSpecialDealByUser_result getResult(I iface, getSpecialDealByUser_args args) throws org.apache.thrift.TException {
        getSpecialDealByUser_result result = new getSpecialDealByUser_result();
        result.success = iface.getSpecialDealByUser(args.userId);
        return result;
      }
    }

    private static class listProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listProduct_args> {
      public listProduct() {
        super("listProduct");
      }

      protected listProduct_args getEmptyArgsInstance() {
        return new listProduct_args();
      }

      protected listProduct_result getResult(I iface, listProduct_args args) throws org.apache.thrift.TException {
        listProduct_result result = new listProduct_result();
        result.success = iface.listProduct();
        return result;
      }
    }

    private static class addProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProduct_args> {
      public addProduct() {
        super("addProduct");
      }

      protected addProduct_args getEmptyArgsInstance() {
        return new addProduct_args();
      }

      protected addProduct_result getResult(I iface, addProduct_args args) throws org.apache.thrift.TException {
        addProduct_result result = new addProduct_result();
        result.success = iface.addProduct(args.auth, args.product);
        return result;
      }
    }

    private static class updateProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProduct_args> {
      public updateProduct() {
        super("updateProduct");
      }

      protected updateProduct_args getEmptyArgsInstance() {
        return new updateProduct_args();
      }

      protected updateProduct_result getResult(I iface, updateProduct_args args) throws org.apache.thrift.TException {
        updateProduct_result result = new updateProduct_result();
        result.success = iface.updateProduct(args.auth, args.product);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateProductStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductStatus_args> {
      public updateProductStatus() {
        super("updateProductStatus");
      }

      protected updateProductStatus_args getEmptyArgsInstance() {
        return new updateProductStatus_args();
      }

      protected updateProductStatus_result getResult(I iface, updateProductStatus_args args) throws org.apache.thrift.TException {
        updateProductStatus_result result = new updateProductStatus_result();
        result.success = iface.updateProductStatus(args.auth, args.productId, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class listPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPromotion_args> {
      public listPromotion() {
        super("listPromotion");
      }

      protected listPromotion_args getEmptyArgsInstance() {
        return new listPromotion_args();
      }

      protected listPromotion_result getResult(I iface, listPromotion_args args) throws org.apache.thrift.TException {
        listPromotion_result result = new listPromotion_result();
        result.success = iface.listPromotion(args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class addPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPromotion_args> {
      public addPromotion() {
        super("addPromotion");
      }

      protected addPromotion_args getEmptyArgsInstance() {
        return new addPromotion_args();
      }

      protected addPromotion_result getResult(I iface, addPromotion_args args) throws org.apache.thrift.TException {
        addPromotion_result result = new addPromotion_result();
        result.success = iface.addPromotion(args.auth, args.promotion);
        return result;
      }
    }

    private static class getPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPromotion_args> {
      public getPromotion() {
        super("getPromotion");
      }

      protected getPromotion_args getEmptyArgsInstance() {
        return new getPromotion_args();
      }

      protected getPromotion_result getResult(I iface, getPromotion_args args) throws org.apache.thrift.TException {
        getPromotion_result result = new getPromotion_result();
        result.success = iface.getPromotion(args.promotionId);
        return result;
      }
    }

    private static class updatePromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePromotion_args> {
      public updatePromotion() {
        super("updatePromotion");
      }

      protected updatePromotion_args getEmptyArgsInstance() {
        return new updatePromotion_args();
      }

      protected updatePromotion_result getResult(I iface, updatePromotion_args args) throws org.apache.thrift.TException {
        updatePromotion_result result = new updatePromotion_result();
        result.success = iface.updatePromotion(args.auth, args.promotion);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updatePromotionStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePromotionStatus_args> {
      public updatePromotionStatus() {
        super("updatePromotionStatus");
      }

      protected updatePromotionStatus_args getEmptyArgsInstance() {
        return new updatePromotionStatus_args();
      }

      protected updatePromotionStatus_result getResult(I iface, updatePromotionStatus_args args) throws org.apache.thrift.TException {
        updatePromotionStatus_result result = new updatePromotionStatus_result();
        result.success = iface.updatePromotionStatus(args.auth, args.promotionId, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class listSpecialDeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listSpecialDeal_args> {
      public listSpecialDeal() {
        super("listSpecialDeal");
      }

      protected listSpecialDeal_args getEmptyArgsInstance() {
        return new listSpecialDeal_args();
      }

      protected listSpecialDeal_result getResult(I iface, listSpecialDeal_args args) throws org.apache.thrift.TException {
        listSpecialDeal_result result = new listSpecialDeal_result();
        result.success = iface.listSpecialDeal(args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class listSpecialDealByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listSpecialDealByUser_args> {
      public listSpecialDealByUser() {
        super("listSpecialDealByUser");
      }

      protected listSpecialDealByUser_args getEmptyArgsInstance() {
        return new listSpecialDealByUser_args();
      }

      protected listSpecialDealByUser_result getResult(I iface, listSpecialDealByUser_args args) throws org.apache.thrift.TException {
        listSpecialDealByUser_result result = new listSpecialDealByUser_result();
        result.success = iface.listSpecialDealByUser(args.userId, args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class listSpecialDealByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listSpecialDealByStatus_args> {
      public listSpecialDealByStatus() {
        super("listSpecialDealByStatus");
      }

      protected listSpecialDealByStatus_args getEmptyArgsInstance() {
        return new listSpecialDealByStatus_args();
      }

      protected listSpecialDealByStatus_result getResult(I iface, listSpecialDealByStatus_args args) throws org.apache.thrift.TException {
        listSpecialDealByStatus_result result = new listSpecialDealByStatus_result();
        result.success = iface.listSpecialDealByStatus(args.fromDate, args.toDate, args.page, args.offset, args.status);
        return result;
      }
    }

    private static class addSpecialDeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSpecialDeal_args> {
      public addSpecialDeal() {
        super("addSpecialDeal");
      }

      protected addSpecialDeal_args getEmptyArgsInstance() {
        return new addSpecialDeal_args();
      }

      protected addSpecialDeal_result getResult(I iface, addSpecialDeal_args args) throws org.apache.thrift.TException {
        addSpecialDeal_result result = new addSpecialDeal_result();
        result.success = iface.addSpecialDeal(args.auth, args.specialDeal);
        return result;
      }
    }

    private static class addSpecialDealList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSpecialDealList_args> {
      public addSpecialDealList() {
        super("addSpecialDealList");
      }

      protected addSpecialDealList_args getEmptyArgsInstance() {
        return new addSpecialDealList_args();
      }

      protected addSpecialDealList_result getResult(I iface, addSpecialDealList_args args) throws org.apache.thrift.TException {
        addSpecialDealList_result result = new addSpecialDealList_result();
        result.success = iface.addSpecialDealList(args.auth, args.specialDealList);
        return result;
      }
    }

    private static class getSpecialDeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpecialDeal_args> {
      public getSpecialDeal() {
        super("getSpecialDeal");
      }

      protected getSpecialDeal_args getEmptyArgsInstance() {
        return new getSpecialDeal_args();
      }

      protected getSpecialDeal_result getResult(I iface, getSpecialDeal_args args) throws org.apache.thrift.TException {
        getSpecialDeal_result result = new getSpecialDeal_result();
        result.success = iface.getSpecialDeal(args.specialDealId);
        return result;
      }
    }

    private static class updateSpecialDeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSpecialDeal_args> {
      public updateSpecialDeal() {
        super("updateSpecialDeal");
      }

      protected updateSpecialDeal_args getEmptyArgsInstance() {
        return new updateSpecialDeal_args();
      }

      protected updateSpecialDeal_result getResult(I iface, updateSpecialDeal_args args) throws org.apache.thrift.TException {
        updateSpecialDeal_result result = new updateSpecialDeal_result();
        result.success = iface.updateSpecialDeal(args.auth, args.specialDeal);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateSpecialDealStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSpecialDealStatus_args> {
      public updateSpecialDealStatus() {
        super("updateSpecialDealStatus");
      }

      protected updateSpecialDealStatus_args getEmptyArgsInstance() {
        return new updateSpecialDealStatus_args();
      }

      protected updateSpecialDealStatus_result getResult(I iface, updateSpecialDealStatus_args args) throws org.apache.thrift.TException {
        updateSpecialDealStatus_result result = new updateSpecialDealStatus_result();
        result.success = iface.updateSpecialDealStatus(args.auth, args.specialDealId, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class listUserPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserPromotion_args> {
      public listUserPromotion() {
        super("listUserPromotion");
      }

      protected listUserPromotion_args getEmptyArgsInstance() {
        return new listUserPromotion_args();
      }

      protected listUserPromotion_result getResult(I iface, listUserPromotion_args args) throws org.apache.thrift.TException {
        listUserPromotion_result result = new listUserPromotion_result();
        result.success = iface.listUserPromotion();
        return result;
      }
    }

    private static class addUserPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserPromotion_args> {
      public addUserPromotion() {
        super("addUserPromotion");
      }

      protected addUserPromotion_args getEmptyArgsInstance() {
        return new addUserPromotion_args();
      }

      protected addUserPromotion_result getResult(I iface, addUserPromotion_args args) throws org.apache.thrift.TException {
        addUserPromotion_result result = new addUserPromotion_result();
        result.success = iface.addUserPromotion(args.auth, args.userPromotion);
        return result;
      }
    }

    private static class updateUserPromotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserPromotion_args> {
      public updateUserPromotion() {
        super("updateUserPromotion");
      }

      protected updateUserPromotion_args getEmptyArgsInstance() {
        return new updateUserPromotion_args();
      }

      protected updateUserPromotion_result getResult(I iface, updateUserPromotion_args args) throws org.apache.thrift.TException {
        updateUserPromotion_result result = new updateUserPromotion_result();
        result.success = iface.updateUserPromotion(args.auth, args.userPromotion);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class listInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listInvoice_args> {
      public listInvoice() {
        super("listInvoice");
      }

      protected listInvoice_args getEmptyArgsInstance() {
        return new listInvoice_args();
      }

      protected listInvoice_result getResult(I iface, listInvoice_args args) throws org.apache.thrift.TException {
        listInvoice_result result = new listInvoice_result();
        result.success = iface.listInvoice(args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class listInvoiceByProductType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listInvoiceByProductType_args> {
      public listInvoiceByProductType() {
        super("listInvoiceByProductType");
      }

      protected listInvoiceByProductType_args getEmptyArgsInstance() {
        return new listInvoiceByProductType_args();
      }

      protected listInvoiceByProductType_result getResult(I iface, listInvoiceByProductType_args args) throws org.apache.thrift.TException {
        listInvoiceByProductType_result result = new listInvoiceByProductType_result();
        result.success = iface.listInvoiceByProductType(args.productType, args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class listInvoiceByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listInvoiceByUser_args> {
      public listInvoiceByUser() {
        super("listInvoiceByUser");
      }

      protected listInvoiceByUser_args getEmptyArgsInstance() {
        return new listInvoiceByUser_args();
      }

      protected listInvoiceByUser_result getResult(I iface, listInvoiceByUser_args args) throws org.apache.thrift.TException {
        listInvoiceByUser_result result = new listInvoiceByUser_result();
        result.success = iface.listInvoiceByUser(args.userId, args.fromDate, args.toDate, args.page, args.offset);
        return result;
      }
    }

    private static class getInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInvoice_args> {
      public getInvoice() {
        super("getInvoice");
      }

      protected getInvoice_args getEmptyArgsInstance() {
        return new getInvoice_args();
      }

      protected getInvoice_result getResult(I iface, getInvoice_args args) throws org.apache.thrift.TException {
        getInvoice_result result = new getInvoice_result();
        result.success = iface.getInvoice(args.invoiceId);
        return result;
      }
    }

    private static class reProcessInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reProcessInvoice_args> {
      public reProcessInvoice() {
        super("reProcessInvoice");
      }

      protected reProcessInvoice_args getEmptyArgsInstance() {
        return new reProcessInvoice_args();
      }

      protected reProcessInvoice_result getResult(I iface, reProcessInvoice_args args) throws org.apache.thrift.TException {
        reProcessInvoice_result result = new reProcessInvoice_result();
        result.success = iface.reProcessInvoice(args.invoiceId);
        return result;
      }
    }

    private static class updateRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRefund_args> {
      public updateRefund() {
        super("updateRefund");
      }

      protected updateRefund_args getEmptyArgsInstance() {
        return new updateRefund_args();
      }

      protected updateRefund_result getResult(I iface, updateRefund_args args) throws org.apache.thrift.TException {
        updateRefund_result result = new updateRefund_result();
        result.success = iface.updateRefund(args.invoiceId);
        return result;
      }
    }

  }

  public static class listProductByUserWebPayment_args implements org.apache.thrift.TBase<listProductByUserWebPayment_args, listProductByUserWebPayment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProductByUserWebPayment_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProductByUserWebPayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProductByUserWebPayment_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.TUserMiniProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.TUserMiniProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProductByUserWebPayment_args.class, metaDataMap);
    }

    public listProductByUserWebPayment_args() {
    }

    public listProductByUserWebPayment_args(
      com.bliss.service.thrift.TUserMiniProfile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProductByUserWebPayment_args(listProductByUserWebPayment_args other) {
      if (other.isSetProfile()) {
        this.profile = new com.bliss.service.thrift.TUserMiniProfile(other.profile);
      }
    }

    public listProductByUserWebPayment_args deepCopy() {
      return new listProductByUserWebPayment_args(this);
    }

    @Override
    public void clear() {
      this.profile = null;
    }

    public com.bliss.service.thrift.TUserMiniProfile getProfile() {
      return this.profile;
    }

    public listProductByUserWebPayment_args setProfile(com.bliss.service.thrift.TUserMiniProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((com.bliss.service.thrift.TUserMiniProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProductByUserWebPayment_args)
        return this.equals((listProductByUserWebPayment_args)that);
      return false;
    }

    public boolean equals(listProductByUserWebPayment_args that) {
      if (that == null)
        return false;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProductByUserWebPayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProductByUserWebPayment_args typedOther = (listProductByUserWebPayment_args)other;

      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProductByUserWebPayment_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProductByUserWebPayment_argsStandardSchemeFactory implements SchemeFactory {
      public listProductByUserWebPayment_argsStandardScheme getScheme() {
        return new listProductByUserWebPayment_argsStandardScheme();
      }
    }

    private static class listProductByUserWebPayment_argsStandardScheme extends StandardScheme<listProductByUserWebPayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProductByUserWebPayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new com.bliss.service.thrift.TUserMiniProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProductByUserWebPayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProductByUserWebPayment_argsTupleSchemeFactory implements SchemeFactory {
      public listProductByUserWebPayment_argsTupleScheme getScheme() {
        return new listProductByUserWebPayment_argsTupleScheme();
      }
    }

    private static class listProductByUserWebPayment_argsTupleScheme extends TupleScheme<listProductByUserWebPayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProductByUserWebPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProductByUserWebPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new com.bliss.service.thrift.TUserMiniProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class listProductByUserWebPayment_result implements org.apache.thrift.TBase<listProductByUserWebPayment_result, listProductByUserWebPayment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProductByUserWebPayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProductByUserWebPayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProductByUserWebPayment_resultTupleSchemeFactory());
    }

    public List<TProductValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProductByUserWebPayment_result.class, metaDataMap);
    }

    public listProductByUserWebPayment_result() {
    }

    public listProductByUserWebPayment_result(
      List<TProductValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProductByUserWebPayment_result(listProductByUserWebPayment_result other) {
      if (other.isSetSuccess()) {
        List<TProductValue> __this__success = new ArrayList<TProductValue>();
        for (TProductValue other_element : other.success) {
          __this__success.add(new TProductValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listProductByUserWebPayment_result deepCopy() {
      return new listProductByUserWebPayment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProductValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProductValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProductValue>();
      }
      this.success.add(elem);
    }

    public List<TProductValue> getSuccess() {
      return this.success;
    }

    public listProductByUserWebPayment_result setSuccess(List<TProductValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProductValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProductByUserWebPayment_result)
        return this.equals((listProductByUserWebPayment_result)that);
      return false;
    }

    public boolean equals(listProductByUserWebPayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProductByUserWebPayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProductByUserWebPayment_result typedOther = (listProductByUserWebPayment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProductByUserWebPayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProductByUserWebPayment_resultStandardSchemeFactory implements SchemeFactory {
      public listProductByUserWebPayment_resultStandardScheme getScheme() {
        return new listProductByUserWebPayment_resultStandardScheme();
      }
    }

    private static class listProductByUserWebPayment_resultStandardScheme extends StandardScheme<listProductByUserWebPayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProductByUserWebPayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TProductValue>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    TProductValue _elem2; // required
                    _elem2 = new TProductValue();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProductByUserWebPayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProductValue _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProductByUserWebPayment_resultTupleSchemeFactory implements SchemeFactory {
      public listProductByUserWebPayment_resultTupleScheme getScheme() {
        return new listProductByUserWebPayment_resultTupleScheme();
      }
    }

    private static class listProductByUserWebPayment_resultTupleScheme extends TupleScheme<listProductByUserWebPayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProductByUserWebPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProductValue _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProductByUserWebPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProductValue>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              TProductValue _elem7; // required
              _elem7 = new TProductValue();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processPaymentCard_args implements org.apache.thrift.TBase<processPaymentCard_args, processPaymentCard_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processPaymentCard_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("invoice", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processPaymentCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processPaymentCard_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TInvoiceValue invoice; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      INVOICE((short)2, "invoice");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // INVOICE
            return INVOICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.INVOICE, new org.apache.thrift.meta_data.FieldMetaData("invoice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processPaymentCard_args.class, metaDataMap);
    }

    public processPaymentCard_args() {
    }

    public processPaymentCard_args(
      com.bliss.service.thrift.OpAuth auth,
      TInvoiceValue invoice)
    {
      this();
      this.auth = auth;
      this.invoice = invoice;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processPaymentCard_args(processPaymentCard_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetInvoice()) {
        this.invoice = new TInvoiceValue(other.invoice);
      }
    }

    public processPaymentCard_args deepCopy() {
      return new processPaymentCard_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.invoice = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public processPaymentCard_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TInvoiceValue getInvoice() {
      return this.invoice;
    }

    public processPaymentCard_args setInvoice(TInvoiceValue invoice) {
      this.invoice = invoice;
      return this;
    }

    public void unsetInvoice() {
      this.invoice = null;
    }

    /** Returns true if field invoice is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoice() {
      return this.invoice != null;
    }

    public void setInvoiceIsSet(boolean value) {
      if (!value) {
        this.invoice = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case INVOICE:
        if (value == null) {
          unsetInvoice();
        } else {
          setInvoice((TInvoiceValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case INVOICE:
        return getInvoice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case INVOICE:
        return isSetInvoice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processPaymentCard_args)
        return this.equals((processPaymentCard_args)that);
      return false;
    }

    public boolean equals(processPaymentCard_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_invoice = true && this.isSetInvoice();
      boolean that_present_invoice = true && that.isSetInvoice();
      if (this_present_invoice || that_present_invoice) {
        if (!(this_present_invoice && that_present_invoice))
          return false;
        if (!this.invoice.equals(that.invoice))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processPaymentCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processPaymentCard_args typedOther = (processPaymentCard_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvoice()).compareTo(typedOther.isSetInvoice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoice, typedOther.invoice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processPaymentCard_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invoice:");
      if (this.invoice == null) {
        sb.append("null");
      } else {
        sb.append(this.invoice);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processPaymentCard_argsStandardSchemeFactory implements SchemeFactory {
      public processPaymentCard_argsStandardScheme getScheme() {
        return new processPaymentCard_argsStandardScheme();
      }
    }

    private static class processPaymentCard_argsStandardScheme extends StandardScheme<processPaymentCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processPaymentCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invoice = new TInvoiceValue();
                struct.invoice.read(iprot);
                struct.setInvoiceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processPaymentCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invoice != null) {
          oprot.writeFieldBegin(INVOICE_FIELD_DESC);
          struct.invoice.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processPaymentCard_argsTupleSchemeFactory implements SchemeFactory {
      public processPaymentCard_argsTupleScheme getScheme() {
        return new processPaymentCard_argsTupleScheme();
      }
    }

    private static class processPaymentCard_argsTupleScheme extends TupleScheme<processPaymentCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processPaymentCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetInvoice()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetInvoice()) {
          struct.invoice.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processPaymentCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invoice = new TInvoiceValue();
          struct.invoice.read(iprot);
          struct.setInvoiceIsSet(true);
        }
      }
    }

  }

  public static class processPaymentCard_result implements org.apache.thrift.TBase<processPaymentCard_result, processPaymentCard_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processPaymentCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processPaymentCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processPaymentCard_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processPaymentCard_result.class, metaDataMap);
    }

    public processPaymentCard_result() {
    }

    public processPaymentCard_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processPaymentCard_result(processPaymentCard_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public processPaymentCard_result deepCopy() {
      return new processPaymentCard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public processPaymentCard_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processPaymentCard_result)
        return this.equals((processPaymentCard_result)that);
      return false;
    }

    public boolean equals(processPaymentCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processPaymentCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processPaymentCard_result typedOther = (processPaymentCard_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processPaymentCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processPaymentCard_resultStandardSchemeFactory implements SchemeFactory {
      public processPaymentCard_resultStandardScheme getScheme() {
        return new processPaymentCard_resultStandardScheme();
      }
    }

    private static class processPaymentCard_resultStandardScheme extends StandardScheme<processPaymentCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processPaymentCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processPaymentCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processPaymentCard_resultTupleSchemeFactory implements SchemeFactory {
      public processPaymentCard_resultTupleScheme getScheme() {
        return new processPaymentCard_resultTupleScheme();
      }
    }

    private static class processPaymentCard_resultTupleScheme extends TupleScheme<processPaymentCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processPaymentCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processPaymentCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listProductByUser_args implements org.apache.thrift.TBase<listProductByUser_args, listProductByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProductByUser_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProductByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProductByUser_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.TUserMiniProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.TUserMiniProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProductByUser_args.class, metaDataMap);
    }

    public listProductByUser_args() {
    }

    public listProductByUser_args(
      com.bliss.service.thrift.TUserMiniProfile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProductByUser_args(listProductByUser_args other) {
      if (other.isSetProfile()) {
        this.profile = new com.bliss.service.thrift.TUserMiniProfile(other.profile);
      }
    }

    public listProductByUser_args deepCopy() {
      return new listProductByUser_args(this);
    }

    @Override
    public void clear() {
      this.profile = null;
    }

    public com.bliss.service.thrift.TUserMiniProfile getProfile() {
      return this.profile;
    }

    public listProductByUser_args setProfile(com.bliss.service.thrift.TUserMiniProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((com.bliss.service.thrift.TUserMiniProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProductByUser_args)
        return this.equals((listProductByUser_args)that);
      return false;
    }

    public boolean equals(listProductByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProductByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProductByUser_args typedOther = (listProductByUser_args)other;

      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProductByUser_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProductByUser_argsStandardSchemeFactory implements SchemeFactory {
      public listProductByUser_argsStandardScheme getScheme() {
        return new listProductByUser_argsStandardScheme();
      }
    }

    private static class listProductByUser_argsStandardScheme extends StandardScheme<listProductByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProductByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new com.bliss.service.thrift.TUserMiniProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProductByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProductByUser_argsTupleSchemeFactory implements SchemeFactory {
      public listProductByUser_argsTupleScheme getScheme() {
        return new listProductByUser_argsTupleScheme();
      }
    }

    private static class listProductByUser_argsTupleScheme extends TupleScheme<listProductByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProductByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProductByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new com.bliss.service.thrift.TUserMiniProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class listProductByUser_result implements org.apache.thrift.TBase<listProductByUser_result, listProductByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProductByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProductByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProductByUser_resultTupleSchemeFactory());
    }

    public Map<EProductType,List<TProductValue>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EProductType.class), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProductByUser_result.class, metaDataMap);
    }

    public listProductByUser_result() {
    }

    public listProductByUser_result(
      Map<EProductType,List<TProductValue>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProductByUser_result(listProductByUser_result other) {
      if (other.isSetSuccess()) {
        Map<EProductType,List<TProductValue>> __this__success = new HashMap<EProductType,List<TProductValue>>();
        for (Map.Entry<EProductType, List<TProductValue>> other_element : other.success.entrySet()) {

          EProductType other_element_key = other_element.getKey();
          List<TProductValue> other_element_value = other_element.getValue();

          EProductType __this__success_copy_key = other_element_key;

          List<TProductValue> __this__success_copy_value = new ArrayList<TProductValue>();
          for (TProductValue other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new TProductValue(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public listProductByUser_result deepCopy() {
      return new listProductByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(EProductType key, List<TProductValue> val) {
      if (this.success == null) {
        this.success = new HashMap<EProductType,List<TProductValue>>();
      }
      this.success.put(key, val);
    }

    public Map<EProductType,List<TProductValue>> getSuccess() {
      return this.success;
    }

    public listProductByUser_result setSuccess(Map<EProductType,List<TProductValue>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<EProductType,List<TProductValue>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProductByUser_result)
        return this.equals((listProductByUser_result)that);
      return false;
    }

    public boolean equals(listProductByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProductByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProductByUser_result typedOther = (listProductByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProductByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProductByUser_resultStandardSchemeFactory implements SchemeFactory {
      public listProductByUser_resultStandardScheme getScheme() {
        return new listProductByUser_resultStandardScheme();
      }
    }

    private static class listProductByUser_resultStandardScheme extends StandardScheme<listProductByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProductByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new HashMap<EProductType,List<TProductValue>>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    EProductType _key10; // required
                    List<TProductValue> _val11; // required
                    _key10 = EProductType.findByValue(iprot.readI32());
                    {
                      org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                      _val11 = new ArrayList<TProductValue>(_list12.size);
                      for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                      {
                        TProductValue _elem14; // required
                        _elem14 = new TProductValue();
                        _elem14.read(iprot);
                        _val11.add(_elem14);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProductByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<EProductType, List<TProductValue>> _iter15 : struct.success.entrySet())
            {
              oprot.writeI32(_iter15.getKey().getValue());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter15.getValue().size()));
                for (TProductValue _iter16 : _iter15.getValue())
                {
                  _iter16.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProductByUser_resultTupleSchemeFactory implements SchemeFactory {
      public listProductByUser_resultTupleScheme getScheme() {
        return new listProductByUser_resultTupleScheme();
      }
    }

    private static class listProductByUser_resultTupleScheme extends TupleScheme<listProductByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProductByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<EProductType, List<TProductValue>> _iter17 : struct.success.entrySet())
            {
              oprot.writeI32(_iter17.getKey().getValue());
              {
                oprot.writeI32(_iter17.getValue().size());
                for (TProductValue _iter18 : _iter17.getValue())
                {
                  _iter18.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProductByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<EProductType,List<TProductValue>>(2*_map19.size);
            for (int _i20 = 0; _i20 < _map19.size; ++_i20)
            {
              EProductType _key21; // required
              List<TProductValue> _val22; // required
              _key21 = EProductType.findByValue(iprot.readI32());
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val22 = new ArrayList<TProductValue>(_list23.size);
                for (int _i24 = 0; _i24 < _list23.size; ++_i24)
                {
                  TProductValue _elem25; // required
                  _elem25 = new TProductValue();
                  _elem25.read(iprot);
                  _val22.add(_elem25);
                }
              }
              struct.success.put(_key21, _val22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSpecialDealByUser_args implements org.apache.thrift.TBase<getSpecialDealByUser_args, getSpecialDealByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialDealByUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialDealByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialDealByUser_argsTupleSchemeFactory());
    }

    public long userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialDealByUser_args.class, metaDataMap);
    }

    public getSpecialDealByUser_args() {
    }

    public getSpecialDealByUser_args(
      long userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialDealByUser_args(getSpecialDealByUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
    }

    public getSpecialDealByUser_args deepCopy() {
      return new getSpecialDealByUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public getSpecialDealByUser_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialDealByUser_args)
        return this.equals((getSpecialDealByUser_args)that);
      return false;
    }

    public boolean equals(getSpecialDealByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialDealByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialDealByUser_args typedOther = (getSpecialDealByUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialDealByUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialDealByUser_argsStandardSchemeFactory implements SchemeFactory {
      public getSpecialDealByUser_argsStandardScheme getScheme() {
        return new getSpecialDealByUser_argsStandardScheme();
      }
    }

    private static class getSpecialDealByUser_argsStandardScheme extends StandardScheme<getSpecialDealByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialDealByUser_argsTupleSchemeFactory implements SchemeFactory {
      public getSpecialDealByUser_argsTupleScheme getScheme() {
        return new getSpecialDealByUser_argsTupleScheme();
      }
    }

    private static class getSpecialDealByUser_argsTupleScheme extends TupleScheme<getSpecialDealByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getSpecialDealByUser_result implements org.apache.thrift.TBase<getSpecialDealByUser_result, getSpecialDealByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialDealByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialDealByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialDealByUser_resultTupleSchemeFactory());
    }

    public TSpecialDealValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialDealByUser_result.class, metaDataMap);
    }

    public getSpecialDealByUser_result() {
    }

    public getSpecialDealByUser_result(
      TSpecialDealValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialDealByUser_result(getSpecialDealByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSpecialDealValue(other.success);
      }
    }

    public getSpecialDealByUser_result deepCopy() {
      return new getSpecialDealByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSpecialDealValue getSuccess() {
      return this.success;
    }

    public getSpecialDealByUser_result setSuccess(TSpecialDealValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSpecialDealValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialDealByUser_result)
        return this.equals((getSpecialDealByUser_result)that);
      return false;
    }

    public boolean equals(getSpecialDealByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialDealByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialDealByUser_result typedOther = (getSpecialDealByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialDealByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialDealByUser_resultStandardSchemeFactory implements SchemeFactory {
      public getSpecialDealByUser_resultStandardScheme getScheme() {
        return new getSpecialDealByUser_resultStandardScheme();
      }
    }

    private static class getSpecialDealByUser_resultStandardScheme extends StandardScheme<getSpecialDealByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSpecialDealValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialDealByUser_resultTupleSchemeFactory implements SchemeFactory {
      public getSpecialDealByUser_resultTupleScheme getScheme() {
        return new getSpecialDealByUser_resultTupleScheme();
      }
    }

    private static class getSpecialDealByUser_resultTupleScheme extends TupleScheme<getSpecialDealByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TSpecialDealValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listProduct_args implements org.apache.thrift.TBase<listProduct_args, listProduct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProduct_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProduct_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProduct_args.class, metaDataMap);
    }

    public listProduct_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProduct_args(listProduct_args other) {
    }

    public listProduct_args deepCopy() {
      return new listProduct_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProduct_args)
        return this.equals((listProduct_args)that);
      return false;
    }

    public boolean equals(listProduct_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProduct_args typedOther = (listProduct_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProduct_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProduct_argsStandardSchemeFactory implements SchemeFactory {
      public listProduct_argsStandardScheme getScheme() {
        return new listProduct_argsStandardScheme();
      }
    }

    private static class listProduct_argsStandardScheme extends StandardScheme<listProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProduct_argsTupleSchemeFactory implements SchemeFactory {
      public listProduct_argsTupleScheme getScheme() {
        return new listProduct_argsTupleScheme();
      }
    }

    private static class listProduct_argsTupleScheme extends TupleScheme<listProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listProduct_result implements org.apache.thrift.TBase<listProduct_result, listProduct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listProduct_resultTupleSchemeFactory());
    }

    public List<TProductValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listProduct_result.class, metaDataMap);
    }

    public listProduct_result() {
    }

    public listProduct_result(
      List<TProductValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listProduct_result(listProduct_result other) {
      if (other.isSetSuccess()) {
        List<TProductValue> __this__success = new ArrayList<TProductValue>();
        for (TProductValue other_element : other.success) {
          __this__success.add(new TProductValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listProduct_result deepCopy() {
      return new listProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProductValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProductValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProductValue>();
      }
      this.success.add(elem);
    }

    public List<TProductValue> getSuccess() {
      return this.success;
    }

    public listProduct_result setSuccess(List<TProductValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProductValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listProduct_result)
        return this.equals((listProduct_result)that);
      return false;
    }

    public boolean equals(listProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listProduct_result typedOther = (listProduct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listProduct_resultStandardSchemeFactory implements SchemeFactory {
      public listProduct_resultStandardScheme getScheme() {
        return new listProduct_resultStandardScheme();
      }
    }

    private static class listProduct_resultStandardScheme extends StandardScheme<listProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<TProductValue>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    TProductValue _elem28; // required
                    _elem28 = new TProductValue();
                    _elem28.read(iprot);
                    struct.success.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProductValue _iter29 : struct.success)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listProduct_resultTupleSchemeFactory implements SchemeFactory {
      public listProduct_resultTupleScheme getScheme() {
        return new listProduct_resultTupleScheme();
      }
    }

    private static class listProduct_resultTupleScheme extends TupleScheme<listProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProductValue _iter30 : struct.success)
            {
              _iter30.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProductValue>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              TProductValue _elem33; // required
              _elem33 = new TProductValue();
              _elem33.read(iprot);
              struct.success.add(_elem33);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProduct_args implements org.apache.thrift.TBase<addProduct_args, addProduct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TProductValue product; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PRODUCT((short)2, "product");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PRODUCT
            return PRODUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_args.class, metaDataMap);
    }

    public addProduct_args() {
    }

    public addProduct_args(
      com.bliss.service.thrift.OpAuth auth,
      TProductValue product)
    {
      this();
      this.auth = auth;
      this.product = product;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_args(addProduct_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetProduct()) {
        this.product = new TProductValue(other.product);
      }
    }

    public addProduct_args deepCopy() {
      return new addProduct_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.product = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public addProduct_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TProductValue getProduct() {
      return this.product;
    }

    public addProduct_args setProduct(TProductValue product) {
      this.product = product;
      return this;
    }

    public void unsetProduct() {
      this.product = null;
    }

    /** Returns true if field product is set (has been assigned a value) and false otherwise */
    public boolean isSetProduct() {
      return this.product != null;
    }

    public void setProductIsSet(boolean value) {
      if (!value) {
        this.product = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PRODUCT:
        if (value == null) {
          unsetProduct();
        } else {
          setProduct((TProductValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PRODUCT:
        return getProduct();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PRODUCT:
        return isSetProduct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_args)
        return this.equals((addProduct_args)that);
      return false;
    }

    public boolean equals(addProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_product = true && this.isSetProduct();
      boolean that_present_product = true && that.isSetProduct();
      if (this_present_product || that_present_product) {
        if (!(this_present_product && that_present_product))
          return false;
        if (!this.product.equals(that.product))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProduct_args typedOther = (addProduct_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProduct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, typedOther.product);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("product:");
      if (this.product == null) {
        sb.append("null");
      } else {
        sb.append(this.product);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addProduct_argsStandardScheme getScheme() {
        return new addProduct_argsStandardScheme();
      }
    }

    private static class addProduct_argsStandardScheme extends StandardScheme<addProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.product = new TProductValue();
                struct.product.read(iprot);
                struct.setProductIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.product != null) {
          oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
          struct.product.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addProduct_argsTupleScheme getScheme() {
        return new addProduct_argsTupleScheme();
      }
    }

    private static class addProduct_argsTupleScheme extends TupleScheme<addProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetProduct()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetProduct()) {
          struct.product.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.product = new TProductValue();
          struct.product.read(iprot);
          struct.setProductIsSet(true);
        }
      }
    }

  }

  public static class addProduct_result implements org.apache.thrift.TBase<addProduct_result, addProduct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_resultTupleSchemeFactory());
    }

    public TProductValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_result.class, metaDataMap);
    }

    public addProduct_result() {
    }

    public addProduct_result(
      TProductValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_result(addProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new TProductValue(other.success);
      }
    }

    public addProduct_result deepCopy() {
      return new addProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TProductValue getSuccess() {
      return this.success;
    }

    public addProduct_result setSuccess(TProductValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TProductValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_result)
        return this.equals((addProduct_result)that);
      return false;
    }

    public boolean equals(addProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addProduct_result typedOther = (addProduct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addProduct_resultStandardScheme getScheme() {
        return new addProduct_resultStandardScheme();
      }
    }

    private static class addProduct_resultStandardScheme extends StandardScheme<addProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TProductValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addProduct_resultTupleScheme getScheme() {
        return new addProduct_resultTupleScheme();
      }
    }

    private static class addProduct_resultTupleScheme extends TupleScheme<addProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TProductValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_args implements org.apache.thrift.TBase<updateProduct_args, updateProduct_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TProductValue product; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PRODUCT((short)2, "product");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PRODUCT
            return PRODUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProductValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_args.class, metaDataMap);
    }

    public updateProduct_args() {
    }

    public updateProduct_args(
      com.bliss.service.thrift.OpAuth auth,
      TProductValue product)
    {
      this();
      this.auth = auth;
      this.product = product;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_args(updateProduct_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetProduct()) {
        this.product = new TProductValue(other.product);
      }
    }

    public updateProduct_args deepCopy() {
      return new updateProduct_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.product = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updateProduct_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TProductValue getProduct() {
      return this.product;
    }

    public updateProduct_args setProduct(TProductValue product) {
      this.product = product;
      return this;
    }

    public void unsetProduct() {
      this.product = null;
    }

    /** Returns true if field product is set (has been assigned a value) and false otherwise */
    public boolean isSetProduct() {
      return this.product != null;
    }

    public void setProductIsSet(boolean value) {
      if (!value) {
        this.product = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PRODUCT:
        if (value == null) {
          unsetProduct();
        } else {
          setProduct((TProductValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PRODUCT:
        return getProduct();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PRODUCT:
        return isSetProduct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_args)
        return this.equals((updateProduct_args)that);
      return false;
    }

    public boolean equals(updateProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_product = true && this.isSetProduct();
      boolean that_present_product = true && that.isSetProduct();
      if (this_present_product || that_present_product) {
        if (!(this_present_product && that_present_product))
          return false;
        if (!this.product.equals(that.product))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateProduct_args typedOther = (updateProduct_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProduct()).compareTo(typedOther.isSetProduct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProduct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, typedOther.product);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("product:");
      if (this.product == null) {
        sb.append("null");
      } else {
        sb.append(this.product);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_argsStandardSchemeFactory implements SchemeFactory {
      public updateProduct_argsStandardScheme getScheme() {
        return new updateProduct_argsStandardScheme();
      }
    }

    private static class updateProduct_argsStandardScheme extends StandardScheme<updateProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.product = new TProductValue();
                struct.product.read(iprot);
                struct.setProductIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.product != null) {
          oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
          struct.product.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_argsTupleSchemeFactory implements SchemeFactory {
      public updateProduct_argsTupleScheme getScheme() {
        return new updateProduct_argsTupleScheme();
      }
    }

    private static class updateProduct_argsTupleScheme extends TupleScheme<updateProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetProduct()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetProduct()) {
          struct.product.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.product = new TProductValue();
          struct.product.read(iprot);
          struct.setProductIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_result implements org.apache.thrift.TBase<updateProduct_result, updateProduct_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_result.class, metaDataMap);
    }

    public updateProduct_result() {
    }

    public updateProduct_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_result(updateProduct_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateProduct_result deepCopy() {
      return new updateProduct_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateProduct_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_result)
        return this.equals((updateProduct_result)that);
      return false;
    }

    public boolean equals(updateProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateProduct_result typedOther = (updateProduct_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_resultStandardSchemeFactory implements SchemeFactory {
      public updateProduct_resultStandardScheme getScheme() {
        return new updateProduct_resultStandardScheme();
      }
    }

    private static class updateProduct_resultStandardScheme extends StandardScheme<updateProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_resultTupleSchemeFactory implements SchemeFactory {
      public updateProduct_resultTupleScheme getScheme() {
        return new updateProduct_resultTupleScheme();
      }
    }

    private static class updateProduct_resultTupleScheme extends TupleScheme<updateProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_args implements org.apache.thrift.TBase<updateProductStatus_args, updateProductStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public int productId; // required
    /**
     * 
     * @see EStatus
     */
    public EStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PRODUCT_ID((short)2, "productId"),
      /**
       * 
       * @see EStatus
       */
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PRODUCT_ID
            return PRODUCT_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_args.class, metaDataMap);
    }

    public updateProductStatus_args() {
    }

    public updateProductStatus_args(
      com.bliss.service.thrift.OpAuth auth,
      int productId,
      EStatus status)
    {
      this();
      this.auth = auth;
      this.productId = productId;
      setProductIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_args(updateProductStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      this.productId = other.productId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateProductStatus_args deepCopy() {
      return new updateProductStatus_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setProductIdIsSet(false);
      this.productId = 0;
      this.status = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updateProductStatus_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getProductId() {
      return this.productId;
    }

    public updateProductStatus_args setProductId(int productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bit_vector.clear(__PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return __isset_bit_vector.get(__PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bit_vector.set(__PRODUCTID_ISSET_ID, value);
    }

    /**
     * 
     * @see EStatus
     */
    public EStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see EStatus
     */
    public updateProductStatus_args setStatus(EStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((EStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PRODUCT_ID:
        return Integer.valueOf(getProductId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PRODUCT_ID:
        return isSetProductId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_args)
        return this.equals((updateProductStatus_args)that);
      return false;
    }

    public boolean equals(updateProductStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateProductStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateProductStatus_args typedOther = (updateProductStatus_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, typedOther.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsStandardScheme getScheme() {
        return new updateProductStatus_argsStandardScheme();
      }
    }

    private static class updateProductStatus_argsStandardScheme extends StandardScheme<updateProductStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.productId = iprot.readI32();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = EStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI32(struct.productId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsTupleScheme getScheme() {
        return new updateProductStatus_argsTupleScheme();
      }
    }

    private static class updateProductStatus_argsTupleScheme extends TupleScheme<updateProductStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetProductId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetProductId()) {
          oprot.writeI32(struct.productId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productId = iprot.readI32();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = EStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_result implements org.apache.thrift.TBase<updateProductStatus_result, updateProductStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_result.class, metaDataMap);
    }

    public updateProductStatus_result() {
    }

    public updateProductStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_result(updateProductStatus_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateProductStatus_result deepCopy() {
      return new updateProductStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateProductStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_result)
        return this.equals((updateProductStatus_result)that);
      return false;
    }

    public boolean equals(updateProductStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateProductStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateProductStatus_result typedOther = (updateProductStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultStandardScheme getScheme() {
        return new updateProductStatus_resultStandardScheme();
      }
    }

    private static class updateProductStatus_resultStandardScheme extends StandardScheme<updateProductStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultTupleScheme getScheme() {
        return new updateProductStatus_resultTupleScheme();
      }
    }

    private static class updateProductStatus_resultTupleScheme extends TupleScheme<updateProductStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listPromotion_args implements org.apache.thrift.TBase<listPromotion_args, listPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPromotion_args");

    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPromotion_argsTupleSchemeFactory());
    }

    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_DATE((short)1, "fromDate"),
      TO_DATE((short)2, "toDate"),
      PAGE((short)3, "page"),
      OFFSET((short)4, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_DATE
            return FROM_DATE;
          case 2: // TO_DATE
            return TO_DATE;
          case 3: // PAGE
            return PAGE;
          case 4: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMDATE_ISSET_ID = 0;
    private static final int __TODATE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPromotion_args.class, metaDataMap);
    }

    public listPromotion_args() {
    }

    public listPromotion_args(
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPromotion_args(listPromotion_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listPromotion_args deepCopy() {
      return new listPromotion_args(this);
    }

    @Override
    public void clear() {
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listPromotion_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listPromotion_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listPromotion_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listPromotion_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPromotion_args)
        return this.equals((listPromotion_args)that);
      return false;
    }

    public boolean equals(listPromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listPromotion_args typedOther = (listPromotion_args)other;

      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPromotion_args(");
      boolean first = true;

      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public listPromotion_argsStandardScheme getScheme() {
        return new listPromotion_argsStandardScheme();
      }
    }

    private static class listPromotion_argsStandardScheme extends StandardScheme<listPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public listPromotion_argsTupleScheme getScheme() {
        return new listPromotion_argsTupleScheme();
      }
    }

    private static class listPromotion_argsTupleScheme extends TupleScheme<listPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromDate()) {
          optionals.set(0);
        }
        if (struct.isSetToDate()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listPromotion_result implements org.apache.thrift.TBase<listPromotion_result, listPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPromotion_resultTupleSchemeFactory());
    }

    public List<TPromotionValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPromotionValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPromotion_result.class, metaDataMap);
    }

    public listPromotion_result() {
    }

    public listPromotion_result(
      List<TPromotionValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPromotion_result(listPromotion_result other) {
      if (other.isSetSuccess()) {
        List<TPromotionValue> __this__success = new ArrayList<TPromotionValue>();
        for (TPromotionValue other_element : other.success) {
          __this__success.add(new TPromotionValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listPromotion_result deepCopy() {
      return new listPromotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TPromotionValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TPromotionValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TPromotionValue>();
      }
      this.success.add(elem);
    }

    public List<TPromotionValue> getSuccess() {
      return this.success;
    }

    public listPromotion_result setSuccess(List<TPromotionValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TPromotionValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPromotion_result)
        return this.equals((listPromotion_result)that);
      return false;
    }

    public boolean equals(listPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listPromotion_result typedOther = (listPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPromotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public listPromotion_resultStandardScheme getScheme() {
        return new listPromotion_resultStandardScheme();
      }
    }

    private static class listPromotion_resultStandardScheme extends StandardScheme<listPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<TPromotionValue>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    TPromotionValue _elem36; // required
                    _elem36 = new TPromotionValue();
                    _elem36.read(iprot);
                    struct.success.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TPromotionValue _iter37 : struct.success)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public listPromotion_resultTupleScheme getScheme() {
        return new listPromotion_resultTupleScheme();
      }
    }

    private static class listPromotion_resultTupleScheme extends TupleScheme<listPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TPromotionValue _iter38 : struct.success)
            {
              _iter38.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TPromotionValue>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              TPromotionValue _elem41; // required
              _elem41 = new TPromotionValue();
              _elem41.read(iprot);
              struct.success.add(_elem41);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPromotion_args implements org.apache.thrift.TBase<addPromotion_args, addPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPromotion_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("promotion", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPromotion_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TPromotionValue promotion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PROMOTION((short)2, "promotion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PROMOTION
            return PROMOTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PROMOTION, new org.apache.thrift.meta_data.FieldMetaData("promotion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPromotionValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPromotion_args.class, metaDataMap);
    }

    public addPromotion_args() {
    }

    public addPromotion_args(
      com.bliss.service.thrift.OpAuth auth,
      TPromotionValue promotion)
    {
      this();
      this.auth = auth;
      this.promotion = promotion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPromotion_args(addPromotion_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetPromotion()) {
        this.promotion = new TPromotionValue(other.promotion);
      }
    }

    public addPromotion_args deepCopy() {
      return new addPromotion_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.promotion = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public addPromotion_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TPromotionValue getPromotion() {
      return this.promotion;
    }

    public addPromotion_args setPromotion(TPromotionValue promotion) {
      this.promotion = promotion;
      return this;
    }

    public void unsetPromotion() {
      this.promotion = null;
    }

    /** Returns true if field promotion is set (has been assigned a value) and false otherwise */
    public boolean isSetPromotion() {
      return this.promotion != null;
    }

    public void setPromotionIsSet(boolean value) {
      if (!value) {
        this.promotion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PROMOTION:
        if (value == null) {
          unsetPromotion();
        } else {
          setPromotion((TPromotionValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PROMOTION:
        return getPromotion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PROMOTION:
        return isSetPromotion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPromotion_args)
        return this.equals((addPromotion_args)that);
      return false;
    }

    public boolean equals(addPromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_promotion = true && this.isSetPromotion();
      boolean that_present_promotion = true && that.isSetPromotion();
      if (this_present_promotion || that_present_promotion) {
        if (!(this_present_promotion && that_present_promotion))
          return false;
        if (!this.promotion.equals(that.promotion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPromotion_args typedOther = (addPromotion_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPromotion()).compareTo(typedOther.isSetPromotion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPromotion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotion, typedOther.promotion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPromotion_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("promotion:");
      if (this.promotion == null) {
        sb.append("null");
      } else {
        sb.append(this.promotion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public addPromotion_argsStandardScheme getScheme() {
        return new addPromotion_argsStandardScheme();
      }
    }

    private static class addPromotion_argsStandardScheme extends StandardScheme<addPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROMOTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.promotion = new TPromotionValue();
                struct.promotion.read(iprot);
                struct.setPromotionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.promotion != null) {
          oprot.writeFieldBegin(PROMOTION_FIELD_DESC);
          struct.promotion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public addPromotion_argsTupleScheme getScheme() {
        return new addPromotion_argsTupleScheme();
      }
    }

    private static class addPromotion_argsTupleScheme extends TupleScheme<addPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetPromotion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetPromotion()) {
          struct.promotion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.promotion = new TPromotionValue();
          struct.promotion.read(iprot);
          struct.setPromotionIsSet(true);
        }
      }
    }

  }

  public static class addPromotion_result implements org.apache.thrift.TBase<addPromotion_result, addPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPromotion_resultTupleSchemeFactory());
    }

    public TPromotionValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPromotionValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPromotion_result.class, metaDataMap);
    }

    public addPromotion_result() {
    }

    public addPromotion_result(
      TPromotionValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPromotion_result(addPromotion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPromotionValue(other.success);
      }
    }

    public addPromotion_result deepCopy() {
      return new addPromotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPromotionValue getSuccess() {
      return this.success;
    }

    public addPromotion_result setSuccess(TPromotionValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPromotionValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPromotion_result)
        return this.equals((addPromotion_result)that);
      return false;
    }

    public boolean equals(addPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPromotion_result typedOther = (addPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPromotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public addPromotion_resultStandardScheme getScheme() {
        return new addPromotion_resultStandardScheme();
      }
    }

    private static class addPromotion_resultStandardScheme extends StandardScheme<addPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPromotionValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public addPromotion_resultTupleScheme getScheme() {
        return new addPromotion_resultTupleScheme();
      }
    }

    private static class addPromotion_resultTupleScheme extends TupleScheme<addPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPromotionValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPromotion_args implements org.apache.thrift.TBase<getPromotion_args, getPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPromotion_args");

    private static final org.apache.thrift.protocol.TField PROMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("promotionId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPromotion_argsTupleSchemeFactory());
    }

    public int promotionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROMOTION_ID((short)1, "promotionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROMOTION_ID
            return PROMOTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROMOTIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("promotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotion_args.class, metaDataMap);
    }

    public getPromotion_args() {
    }

    public getPromotion_args(
      int promotionId)
    {
      this();
      this.promotionId = promotionId;
      setPromotionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPromotion_args(getPromotion_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.promotionId = other.promotionId;
    }

    public getPromotion_args deepCopy() {
      return new getPromotion_args(this);
    }

    @Override
    public void clear() {
      setPromotionIdIsSet(false);
      this.promotionId = 0;
    }

    public int getPromotionId() {
      return this.promotionId;
    }

    public getPromotion_args setPromotionId(int promotionId) {
      this.promotionId = promotionId;
      setPromotionIdIsSet(true);
      return this;
    }

    public void unsetPromotionId() {
      __isset_bit_vector.clear(__PROMOTIONID_ISSET_ID);
    }

    /** Returns true if field promotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPromotionId() {
      return __isset_bit_vector.get(__PROMOTIONID_ISSET_ID);
    }

    public void setPromotionIdIsSet(boolean value) {
      __isset_bit_vector.set(__PROMOTIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROMOTION_ID:
        if (value == null) {
          unsetPromotionId();
        } else {
          setPromotionId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROMOTION_ID:
        return Integer.valueOf(getPromotionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROMOTION_ID:
        return isSetPromotionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPromotion_args)
        return this.equals((getPromotion_args)that);
      return false;
    }

    public boolean equals(getPromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_promotionId = true;
      boolean that_present_promotionId = true;
      if (this_present_promotionId || that_present_promotionId) {
        if (!(this_present_promotionId && that_present_promotionId))
          return false;
        if (this.promotionId != that.promotionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPromotion_args typedOther = (getPromotion_args)other;

      lastComparison = Boolean.valueOf(isSetPromotionId()).compareTo(typedOther.isSetPromotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPromotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotionId, typedOther.promotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPromotion_args(");
      boolean first = true;

      sb.append("promotionId:");
      sb.append(this.promotionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public getPromotion_argsStandardScheme getScheme() {
        return new getPromotion_argsStandardScheme();
      }
    }

    private static class getPromotion_argsStandardScheme extends StandardScheme<getPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.promotionId = iprot.readI32();
                struct.setPromotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROMOTION_ID_FIELD_DESC);
        oprot.writeI32(struct.promotionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public getPromotion_argsTupleScheme getScheme() {
        return new getPromotion_argsTupleScheme();
      }
    }

    private static class getPromotion_argsTupleScheme extends TupleScheme<getPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPromotionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPromotionId()) {
          oprot.writeI32(struct.promotionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.promotionId = iprot.readI32();
          struct.setPromotionIdIsSet(true);
        }
      }
    }

  }

  public static class getPromotion_result implements org.apache.thrift.TBase<getPromotion_result, getPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPromotion_resultTupleSchemeFactory());
    }

    public TPromotionValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPromotionValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotion_result.class, metaDataMap);
    }

    public getPromotion_result() {
    }

    public getPromotion_result(
      TPromotionValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPromotion_result(getPromotion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPromotionValue(other.success);
      }
    }

    public getPromotion_result deepCopy() {
      return new getPromotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TPromotionValue getSuccess() {
      return this.success;
    }

    public getPromotion_result setSuccess(TPromotionValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPromotionValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPromotion_result)
        return this.equals((getPromotion_result)that);
      return false;
    }

    public boolean equals(getPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPromotion_result typedOther = (getPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPromotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public getPromotion_resultStandardScheme getScheme() {
        return new getPromotion_resultStandardScheme();
      }
    }

    private static class getPromotion_resultStandardScheme extends StandardScheme<getPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPromotionValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public getPromotion_resultTupleScheme getScheme() {
        return new getPromotion_resultTupleScheme();
      }
    }

    private static class getPromotion_resultTupleScheme extends TupleScheme<getPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPromotionValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePromotion_args implements org.apache.thrift.TBase<updatePromotion_args, updatePromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePromotion_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("promotion", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePromotion_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TPromotionValue promotion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PROMOTION((short)2, "promotion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PROMOTION
            return PROMOTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PROMOTION, new org.apache.thrift.meta_data.FieldMetaData("promotion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPromotionValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePromotion_args.class, metaDataMap);
    }

    public updatePromotion_args() {
    }

    public updatePromotion_args(
      com.bliss.service.thrift.OpAuth auth,
      TPromotionValue promotion)
    {
      this();
      this.auth = auth;
      this.promotion = promotion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePromotion_args(updatePromotion_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetPromotion()) {
        this.promotion = new TPromotionValue(other.promotion);
      }
    }

    public updatePromotion_args deepCopy() {
      return new updatePromotion_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.promotion = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updatePromotion_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TPromotionValue getPromotion() {
      return this.promotion;
    }

    public updatePromotion_args setPromotion(TPromotionValue promotion) {
      this.promotion = promotion;
      return this;
    }

    public void unsetPromotion() {
      this.promotion = null;
    }

    /** Returns true if field promotion is set (has been assigned a value) and false otherwise */
    public boolean isSetPromotion() {
      return this.promotion != null;
    }

    public void setPromotionIsSet(boolean value) {
      if (!value) {
        this.promotion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PROMOTION:
        if (value == null) {
          unsetPromotion();
        } else {
          setPromotion((TPromotionValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PROMOTION:
        return getPromotion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PROMOTION:
        return isSetPromotion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePromotion_args)
        return this.equals((updatePromotion_args)that);
      return false;
    }

    public boolean equals(updatePromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_promotion = true && this.isSetPromotion();
      boolean that_present_promotion = true && that.isSetPromotion();
      if (this_present_promotion || that_present_promotion) {
        if (!(this_present_promotion && that_present_promotion))
          return false;
        if (!this.promotion.equals(that.promotion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePromotion_args typedOther = (updatePromotion_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPromotion()).compareTo(typedOther.isSetPromotion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPromotion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotion, typedOther.promotion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePromotion_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("promotion:");
      if (this.promotion == null) {
        sb.append("null");
      } else {
        sb.append(this.promotion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePromotion_argsStandardSchemeFactory implements SchemeFactory {
      public updatePromotion_argsStandardScheme getScheme() {
        return new updatePromotion_argsStandardScheme();
      }
    }

    private static class updatePromotion_argsStandardScheme extends StandardScheme<updatePromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROMOTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.promotion = new TPromotionValue();
                struct.promotion.read(iprot);
                struct.setPromotionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.promotion != null) {
          oprot.writeFieldBegin(PROMOTION_FIELD_DESC);
          struct.promotion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePromotion_argsTupleSchemeFactory implements SchemeFactory {
      public updatePromotion_argsTupleScheme getScheme() {
        return new updatePromotion_argsTupleScheme();
      }
    }

    private static class updatePromotion_argsTupleScheme extends TupleScheme<updatePromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetPromotion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetPromotion()) {
          struct.promotion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.promotion = new TPromotionValue();
          struct.promotion.read(iprot);
          struct.setPromotionIsSet(true);
        }
      }
    }

  }

  public static class updatePromotion_result implements org.apache.thrift.TBase<updatePromotion_result, updatePromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePromotion_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePromotion_result.class, metaDataMap);
    }

    public updatePromotion_result() {
    }

    public updatePromotion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePromotion_result(updatePromotion_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updatePromotion_result deepCopy() {
      return new updatePromotion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePromotion_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePromotion_result)
        return this.equals((updatePromotion_result)that);
      return false;
    }

    public boolean equals(updatePromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePromotion_result typedOther = (updatePromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePromotion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePromotion_resultStandardSchemeFactory implements SchemeFactory {
      public updatePromotion_resultStandardScheme getScheme() {
        return new updatePromotion_resultStandardScheme();
      }
    }

    private static class updatePromotion_resultStandardScheme extends StandardScheme<updatePromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePromotion_resultTupleSchemeFactory implements SchemeFactory {
      public updatePromotion_resultTupleScheme getScheme() {
        return new updatePromotion_resultTupleScheme();
      }
    }

    private static class updatePromotion_resultTupleScheme extends TupleScheme<updatePromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePromotionStatus_args implements org.apache.thrift.TBase<updatePromotionStatus_args, updatePromotionStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePromotionStatus_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("promotionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePromotionStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePromotionStatus_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public int promotionId; // required
    /**
     * 
     * @see EStatus
     */
    public EStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      PROMOTION_ID((short)2, "promotionId"),
      /**
       * 
       * @see EStatus
       */
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PROMOTION_ID
            return PROMOTION_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROMOTIONID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.PROMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("promotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePromotionStatus_args.class, metaDataMap);
    }

    public updatePromotionStatus_args() {
    }

    public updatePromotionStatus_args(
      com.bliss.service.thrift.OpAuth auth,
      int promotionId,
      EStatus status)
    {
      this();
      this.auth = auth;
      this.promotionId = promotionId;
      setPromotionIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePromotionStatus_args(updatePromotionStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      this.promotionId = other.promotionId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updatePromotionStatus_args deepCopy() {
      return new updatePromotionStatus_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setPromotionIdIsSet(false);
      this.promotionId = 0;
      this.status = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updatePromotionStatus_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getPromotionId() {
      return this.promotionId;
    }

    public updatePromotionStatus_args setPromotionId(int promotionId) {
      this.promotionId = promotionId;
      setPromotionIdIsSet(true);
      return this;
    }

    public void unsetPromotionId() {
      __isset_bit_vector.clear(__PROMOTIONID_ISSET_ID);
    }

    /** Returns true if field promotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetPromotionId() {
      return __isset_bit_vector.get(__PROMOTIONID_ISSET_ID);
    }

    public void setPromotionIdIsSet(boolean value) {
      __isset_bit_vector.set(__PROMOTIONID_ISSET_ID, value);
    }

    /**
     * 
     * @see EStatus
     */
    public EStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see EStatus
     */
    public updatePromotionStatus_args setStatus(EStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case PROMOTION_ID:
        if (value == null) {
          unsetPromotionId();
        } else {
          setPromotionId((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((EStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PROMOTION_ID:
        return Integer.valueOf(getPromotionId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PROMOTION_ID:
        return isSetPromotionId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePromotionStatus_args)
        return this.equals((updatePromotionStatus_args)that);
      return false;
    }

    public boolean equals(updatePromotionStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_promotionId = true;
      boolean that_present_promotionId = true;
      if (this_present_promotionId || that_present_promotionId) {
        if (!(this_present_promotionId && that_present_promotionId))
          return false;
        if (this.promotionId != that.promotionId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePromotionStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePromotionStatus_args typedOther = (updatePromotionStatus_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPromotionId()).compareTo(typedOther.isSetPromotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPromotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotionId, typedOther.promotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePromotionStatus_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("promotionId:");
      sb.append(this.promotionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePromotionStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updatePromotionStatus_argsStandardScheme getScheme() {
        return new updatePromotionStatus_argsStandardScheme();
      }
    }

    private static class updatePromotionStatus_argsStandardScheme extends StandardScheme<updatePromotionStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePromotionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.promotionId = iprot.readI32();
                struct.setPromotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = EStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePromotionStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROMOTION_ID_FIELD_DESC);
        oprot.writeI32(struct.promotionId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePromotionStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updatePromotionStatus_argsTupleScheme getScheme() {
        return new updatePromotionStatus_argsTupleScheme();
      }
    }

    private static class updatePromotionStatus_argsTupleScheme extends TupleScheme<updatePromotionStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePromotionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetPromotionId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetPromotionId()) {
          oprot.writeI32(struct.promotionId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePromotionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.promotionId = iprot.readI32();
          struct.setPromotionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = EStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updatePromotionStatus_result implements org.apache.thrift.TBase<updatePromotionStatus_result, updatePromotionStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePromotionStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePromotionStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePromotionStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePromotionStatus_result.class, metaDataMap);
    }

    public updatePromotionStatus_result() {
    }

    public updatePromotionStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePromotionStatus_result(updatePromotionStatus_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updatePromotionStatus_result deepCopy() {
      return new updatePromotionStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePromotionStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePromotionStatus_result)
        return this.equals((updatePromotionStatus_result)that);
      return false;
    }

    public boolean equals(updatePromotionStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePromotionStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePromotionStatus_result typedOther = (updatePromotionStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePromotionStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePromotionStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updatePromotionStatus_resultStandardScheme getScheme() {
        return new updatePromotionStatus_resultStandardScheme();
      }
    }

    private static class updatePromotionStatus_resultStandardScheme extends StandardScheme<updatePromotionStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePromotionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePromotionStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePromotionStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updatePromotionStatus_resultTupleScheme getScheme() {
        return new updatePromotionStatus_resultTupleScheme();
      }
    }

    private static class updatePromotionStatus_resultTupleScheme extends TupleScheme<updatePromotionStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePromotionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePromotionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDeal_args implements org.apache.thrift.TBase<listSpecialDeal_args, listSpecialDeal_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDeal_args");

    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDeal_argsTupleSchemeFactory());
    }

    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_DATE((short)1, "fromDate"),
      TO_DATE((short)2, "toDate"),
      PAGE((short)3, "page"),
      OFFSET((short)4, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_DATE
            return FROM_DATE;
          case 2: // TO_DATE
            return TO_DATE;
          case 3: // PAGE
            return PAGE;
          case 4: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMDATE_ISSET_ID = 0;
    private static final int __TODATE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDeal_args.class, metaDataMap);
    }

    public listSpecialDeal_args() {
    }

    public listSpecialDeal_args(
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDeal_args(listSpecialDeal_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listSpecialDeal_args deepCopy() {
      return new listSpecialDeal_args(this);
    }

    @Override
    public void clear() {
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listSpecialDeal_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listSpecialDeal_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listSpecialDeal_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listSpecialDeal_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDeal_args)
        return this.equals((listSpecialDeal_args)that);
      return false;
    }

    public boolean equals(listSpecialDeal_args that) {
      if (that == null)
        return false;

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDeal_args typedOther = (listSpecialDeal_args)other;

      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDeal_args(");
      boolean first = true;

      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDeal_argsStandardSchemeFactory implements SchemeFactory {
      public listSpecialDeal_argsStandardScheme getScheme() {
        return new listSpecialDeal_argsStandardScheme();
      }
    }

    private static class listSpecialDeal_argsStandardScheme extends StandardScheme<listSpecialDeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDeal_argsTupleSchemeFactory implements SchemeFactory {
      public listSpecialDeal_argsTupleScheme getScheme() {
        return new listSpecialDeal_argsTupleScheme();
      }
    }

    private static class listSpecialDeal_argsTupleScheme extends TupleScheme<listSpecialDeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromDate()) {
          optionals.set(0);
        }
        if (struct.isSetToDate()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDeal_result implements org.apache.thrift.TBase<listSpecialDeal_result, listSpecialDeal_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDeal_resultTupleSchemeFactory());
    }

    public List<TSpecialDealValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDeal_result.class, metaDataMap);
    }

    public listSpecialDeal_result() {
    }

    public listSpecialDeal_result(
      List<TSpecialDealValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDeal_result(listSpecialDeal_result other) {
      if (other.isSetSuccess()) {
        List<TSpecialDealValue> __this__success = new ArrayList<TSpecialDealValue>();
        for (TSpecialDealValue other_element : other.success) {
          __this__success.add(new TSpecialDealValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listSpecialDeal_result deepCopy() {
      return new listSpecialDeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TSpecialDealValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TSpecialDealValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TSpecialDealValue>();
      }
      this.success.add(elem);
    }

    public List<TSpecialDealValue> getSuccess() {
      return this.success;
    }

    public listSpecialDeal_result setSuccess(List<TSpecialDealValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TSpecialDealValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDeal_result)
        return this.equals((listSpecialDeal_result)that);
      return false;
    }

    public boolean equals(listSpecialDeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDeal_result typedOther = (listSpecialDeal_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDeal_resultStandardSchemeFactory implements SchemeFactory {
      public listSpecialDeal_resultStandardScheme getScheme() {
        return new listSpecialDeal_resultStandardScheme();
      }
    }

    private static class listSpecialDeal_resultStandardScheme extends StandardScheme<listSpecialDeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<TSpecialDealValue>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    TSpecialDealValue _elem44; // required
                    _elem44 = new TSpecialDealValue();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TSpecialDealValue _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDeal_resultTupleSchemeFactory implements SchemeFactory {
      public listSpecialDeal_resultTupleScheme getScheme() {
        return new listSpecialDeal_resultTupleScheme();
      }
    }

    private static class listSpecialDeal_resultTupleScheme extends TupleScheme<listSpecialDeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TSpecialDealValue _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TSpecialDealValue>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              TSpecialDealValue _elem49; // required
              _elem49 = new TSpecialDealValue();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDealByUser_args implements org.apache.thrift.TBase<listSpecialDealByUser_args, listSpecialDealByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDealByUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDealByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDealByUser_argsTupleSchemeFactory());
    }

    public long userId; // required
    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      FROM_DATE((short)2, "fromDate"),
      TO_DATE((short)3, "toDate"),
      PAGE((short)4, "page"),
      OFFSET((short)5, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // FROM_DATE
            return FROM_DATE;
          case 3: // TO_DATE
            return TO_DATE;
          case 4: // PAGE
            return PAGE;
          case 5: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __FROMDATE_ISSET_ID = 1;
    private static final int __TODATE_ISSET_ID = 2;
    private static final int __PAGE_ISSET_ID = 3;
    private static final int __OFFSET_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDealByUser_args.class, metaDataMap);
    }

    public listSpecialDealByUser_args() {
    }

    public listSpecialDealByUser_args(
      long userId,
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDealByUser_args(listSpecialDealByUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listSpecialDealByUser_args deepCopy() {
      return new listSpecialDealByUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public listSpecialDealByUser_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listSpecialDealByUser_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listSpecialDealByUser_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listSpecialDealByUser_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listSpecialDealByUser_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDealByUser_args)
        return this.equals((listSpecialDealByUser_args)that);
      return false;
    }

    public boolean equals(listSpecialDealByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDealByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDealByUser_args typedOther = (listSpecialDealByUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDealByUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDealByUser_argsStandardSchemeFactory implements SchemeFactory {
      public listSpecialDealByUser_argsStandardScheme getScheme() {
        return new listSpecialDealByUser_argsStandardScheme();
      }
    }

    private static class listSpecialDealByUser_argsStandardScheme extends StandardScheme<listSpecialDealByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDealByUser_argsTupleSchemeFactory implements SchemeFactory {
      public listSpecialDealByUser_argsTupleScheme getScheme() {
        return new listSpecialDealByUser_argsTupleScheme();
      }
    }

    private static class listSpecialDealByUser_argsTupleScheme extends TupleScheme<listSpecialDealByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetFromDate()) {
          optionals.set(1);
        }
        if (struct.isSetToDate()) {
          optionals.set(2);
        }
        if (struct.isSetPage()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDealByUser_result implements org.apache.thrift.TBase<listSpecialDealByUser_result, listSpecialDealByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDealByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDealByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDealByUser_resultTupleSchemeFactory());
    }

    public List<TSpecialDealValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDealByUser_result.class, metaDataMap);
    }

    public listSpecialDealByUser_result() {
    }

    public listSpecialDealByUser_result(
      List<TSpecialDealValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDealByUser_result(listSpecialDealByUser_result other) {
      if (other.isSetSuccess()) {
        List<TSpecialDealValue> __this__success = new ArrayList<TSpecialDealValue>();
        for (TSpecialDealValue other_element : other.success) {
          __this__success.add(new TSpecialDealValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listSpecialDealByUser_result deepCopy() {
      return new listSpecialDealByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TSpecialDealValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TSpecialDealValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TSpecialDealValue>();
      }
      this.success.add(elem);
    }

    public List<TSpecialDealValue> getSuccess() {
      return this.success;
    }

    public listSpecialDealByUser_result setSuccess(List<TSpecialDealValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TSpecialDealValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDealByUser_result)
        return this.equals((listSpecialDealByUser_result)that);
      return false;
    }

    public boolean equals(listSpecialDealByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDealByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDealByUser_result typedOther = (listSpecialDealByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDealByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDealByUser_resultStandardSchemeFactory implements SchemeFactory {
      public listSpecialDealByUser_resultStandardScheme getScheme() {
        return new listSpecialDealByUser_resultStandardScheme();
      }
    }

    private static class listSpecialDealByUser_resultStandardScheme extends StandardScheme<listSpecialDealByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<TSpecialDealValue>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    TSpecialDealValue _elem52; // required
                    _elem52 = new TSpecialDealValue();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TSpecialDealValue _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDealByUser_resultTupleSchemeFactory implements SchemeFactory {
      public listSpecialDealByUser_resultTupleScheme getScheme() {
        return new listSpecialDealByUser_resultTupleScheme();
      }
    }

    private static class listSpecialDealByUser_resultTupleScheme extends TupleScheme<listSpecialDealByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TSpecialDealValue _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TSpecialDealValue>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              TSpecialDealValue _elem57; // required
              _elem57 = new TSpecialDealValue();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDealByStatus_args implements org.apache.thrift.TBase<listSpecialDealByStatus_args, listSpecialDealByStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDealByStatus_args");

    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDealByStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDealByStatus_argsTupleSchemeFactory());
    }

    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required
    /**
     * 
     * @see EStatus
     */
    public EStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_DATE((short)1, "fromDate"),
      TO_DATE((short)2, "toDate"),
      PAGE((short)3, "page"),
      OFFSET((short)4, "offset"),
      /**
       * 
       * @see EStatus
       */
      STATUS((short)5, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_DATE
            return FROM_DATE;
          case 2: // TO_DATE
            return TO_DATE;
          case 3: // PAGE
            return PAGE;
          case 4: // OFFSET
            return OFFSET;
          case 5: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMDATE_ISSET_ID = 0;
    private static final int __TODATE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDealByStatus_args.class, metaDataMap);
    }

    public listSpecialDealByStatus_args() {
    }

    public listSpecialDealByStatus_args(
      long fromDate,
      long toDate,
      int page,
      int offset,
      EStatus status)
    {
      this();
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDealByStatus_args(listSpecialDealByStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public listSpecialDealByStatus_args deepCopy() {
      return new listSpecialDealByStatus_args(this);
    }

    @Override
    public void clear() {
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
      this.status = null;
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listSpecialDealByStatus_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listSpecialDealByStatus_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listSpecialDealByStatus_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listSpecialDealByStatus_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    /**
     * 
     * @see EStatus
     */
    public EStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see EStatus
     */
    public listSpecialDealByStatus_args setStatus(EStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((EStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDealByStatus_args)
        return this.equals((listSpecialDealByStatus_args)that);
      return false;
    }

    public boolean equals(listSpecialDealByStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDealByStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDealByStatus_args typedOther = (listSpecialDealByStatus_args)other;

      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDealByStatus_args(");
      boolean first = true;

      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDealByStatus_argsStandardSchemeFactory implements SchemeFactory {
      public listSpecialDealByStatus_argsStandardScheme getScheme() {
        return new listSpecialDealByStatus_argsStandardScheme();
      }
    }

    private static class listSpecialDealByStatus_argsStandardScheme extends StandardScheme<listSpecialDealByStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDealByStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = EStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDealByStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDealByStatus_argsTupleSchemeFactory implements SchemeFactory {
      public listSpecialDealByStatus_argsTupleScheme getScheme() {
        return new listSpecialDealByStatus_argsTupleScheme();
      }
    }

    private static class listSpecialDealByStatus_argsTupleScheme extends TupleScheme<listSpecialDealByStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromDate()) {
          optionals.set(0);
        }
        if (struct.isSetToDate()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        if (struct.isSetStatus()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(4)) {
          struct.status = EStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class listSpecialDealByStatus_result implements org.apache.thrift.TBase<listSpecialDealByStatus_result, listSpecialDealByStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listSpecialDealByStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listSpecialDealByStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listSpecialDealByStatus_resultTupleSchemeFactory());
    }

    public List<TSpecialDealValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listSpecialDealByStatus_result.class, metaDataMap);
    }

    public listSpecialDealByStatus_result() {
    }

    public listSpecialDealByStatus_result(
      List<TSpecialDealValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSpecialDealByStatus_result(listSpecialDealByStatus_result other) {
      if (other.isSetSuccess()) {
        List<TSpecialDealValue> __this__success = new ArrayList<TSpecialDealValue>();
        for (TSpecialDealValue other_element : other.success) {
          __this__success.add(new TSpecialDealValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listSpecialDealByStatus_result deepCopy() {
      return new listSpecialDealByStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TSpecialDealValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TSpecialDealValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TSpecialDealValue>();
      }
      this.success.add(elem);
    }

    public List<TSpecialDealValue> getSuccess() {
      return this.success;
    }

    public listSpecialDealByStatus_result setSuccess(List<TSpecialDealValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TSpecialDealValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSpecialDealByStatus_result)
        return this.equals((listSpecialDealByStatus_result)that);
      return false;
    }

    public boolean equals(listSpecialDealByStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listSpecialDealByStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSpecialDealByStatus_result typedOther = (listSpecialDealByStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listSpecialDealByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listSpecialDealByStatus_resultStandardSchemeFactory implements SchemeFactory {
      public listSpecialDealByStatus_resultStandardScheme getScheme() {
        return new listSpecialDealByStatus_resultStandardScheme();
      }
    }

    private static class listSpecialDealByStatus_resultStandardScheme extends StandardScheme<listSpecialDealByStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listSpecialDealByStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<TSpecialDealValue>(_list58.size);
                  for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                  {
                    TSpecialDealValue _elem60; // required
                    _elem60 = new TSpecialDealValue();
                    _elem60.read(iprot);
                    struct.success.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listSpecialDealByStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TSpecialDealValue _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listSpecialDealByStatus_resultTupleSchemeFactory implements SchemeFactory {
      public listSpecialDealByStatus_resultTupleScheme getScheme() {
        return new listSpecialDealByStatus_resultTupleScheme();
      }
    }

    private static class listSpecialDealByStatus_resultTupleScheme extends TupleScheme<listSpecialDealByStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TSpecialDealValue _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listSpecialDealByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TSpecialDealValue>(_list63.size);
            for (int _i64 = 0; _i64 < _list63.size; ++_i64)
            {
              TSpecialDealValue _elem65; // required
              _elem65 = new TSpecialDealValue();
              _elem65.read(iprot);
              struct.success.add(_elem65);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSpecialDeal_args implements org.apache.thrift.TBase<addSpecialDeal_args, addSpecialDeal_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialDeal_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIAL_DEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDeal", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSpecialDeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSpecialDeal_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TSpecialDealValue specialDeal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      SPECIAL_DEAL((short)2, "specialDeal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SPECIAL_DEAL
            return SPECIAL_DEAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.SPECIAL_DEAL, new org.apache.thrift.meta_data.FieldMetaData("specialDeal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialDeal_args.class, metaDataMap);
    }

    public addSpecialDeal_args() {
    }

    public addSpecialDeal_args(
      com.bliss.service.thrift.OpAuth auth,
      TSpecialDealValue specialDeal)
    {
      this();
      this.auth = auth;
      this.specialDeal = specialDeal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialDeal_args(addSpecialDeal_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetSpecialDeal()) {
        this.specialDeal = new TSpecialDealValue(other.specialDeal);
      }
    }

    public addSpecialDeal_args deepCopy() {
      return new addSpecialDeal_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.specialDeal = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public addSpecialDeal_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TSpecialDealValue getSpecialDeal() {
      return this.specialDeal;
    }

    public addSpecialDeal_args setSpecialDeal(TSpecialDealValue specialDeal) {
      this.specialDeal = specialDeal;
      return this;
    }

    public void unsetSpecialDeal() {
      this.specialDeal = null;
    }

    /** Returns true if field specialDeal is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecialDeal() {
      return this.specialDeal != null;
    }

    public void setSpecialDealIsSet(boolean value) {
      if (!value) {
        this.specialDeal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case SPECIAL_DEAL:
        if (value == null) {
          unsetSpecialDeal();
        } else {
          setSpecialDeal((TSpecialDealValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SPECIAL_DEAL:
        return getSpecialDeal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SPECIAL_DEAL:
        return isSetSpecialDeal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialDeal_args)
        return this.equals((addSpecialDeal_args)that);
      return false;
    }

    public boolean equals(addSpecialDeal_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_specialDeal = true && this.isSetSpecialDeal();
      boolean that_present_specialDeal = true && that.isSetSpecialDeal();
      if (this_present_specialDeal || that_present_specialDeal) {
        if (!(this_present_specialDeal && that_present_specialDeal))
          return false;
        if (!this.specialDeal.equals(that.specialDeal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSpecialDeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSpecialDeal_args typedOther = (addSpecialDeal_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecialDeal()).compareTo(typedOther.isSetSpecialDeal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecialDeal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDeal, typedOther.specialDeal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialDeal_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specialDeal:");
      if (this.specialDeal == null) {
        sb.append("null");
      } else {
        sb.append(this.specialDeal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialDeal_argsStandardSchemeFactory implements SchemeFactory {
      public addSpecialDeal_argsStandardScheme getScheme() {
        return new addSpecialDeal_argsStandardScheme();
      }
    }

    private static class addSpecialDeal_argsStandardScheme extends StandardScheme<addSpecialDeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialDeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIAL_DEAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specialDeal = new TSpecialDealValue();
                struct.specialDeal.read(iprot);
                struct.setSpecialDealIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialDeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specialDeal != null) {
          oprot.writeFieldBegin(SPECIAL_DEAL_FIELD_DESC);
          struct.specialDeal.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialDeal_argsTupleSchemeFactory implements SchemeFactory {
      public addSpecialDeal_argsTupleScheme getScheme() {
        return new addSpecialDeal_argsTupleScheme();
      }
    }

    private static class addSpecialDeal_argsTupleScheme extends TupleScheme<addSpecialDeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSpecialDeal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSpecialDeal()) {
          struct.specialDeal.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.specialDeal = new TSpecialDealValue();
          struct.specialDeal.read(iprot);
          struct.setSpecialDealIsSet(true);
        }
      }
    }

  }

  public static class addSpecialDeal_result implements org.apache.thrift.TBase<addSpecialDeal_result, addSpecialDeal_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialDeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSpecialDeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSpecialDeal_resultTupleSchemeFactory());
    }

    public TSpecialDealValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialDeal_result.class, metaDataMap);
    }

    public addSpecialDeal_result() {
    }

    public addSpecialDeal_result(
      TSpecialDealValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialDeal_result(addSpecialDeal_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSpecialDealValue(other.success);
      }
    }

    public addSpecialDeal_result deepCopy() {
      return new addSpecialDeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSpecialDealValue getSuccess() {
      return this.success;
    }

    public addSpecialDeal_result setSuccess(TSpecialDealValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSpecialDealValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialDeal_result)
        return this.equals((addSpecialDeal_result)that);
      return false;
    }

    public boolean equals(addSpecialDeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSpecialDeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSpecialDeal_result typedOther = (addSpecialDeal_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialDeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialDeal_resultStandardSchemeFactory implements SchemeFactory {
      public addSpecialDeal_resultStandardScheme getScheme() {
        return new addSpecialDeal_resultStandardScheme();
      }
    }

    private static class addSpecialDeal_resultStandardScheme extends StandardScheme<addSpecialDeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialDeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSpecialDealValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialDeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialDeal_resultTupleSchemeFactory implements SchemeFactory {
      public addSpecialDeal_resultTupleScheme getScheme() {
        return new addSpecialDeal_resultTupleScheme();
      }
    }

    private static class addSpecialDeal_resultTupleScheme extends TupleScheme<addSpecialDeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TSpecialDealValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSpecialDealList_args implements org.apache.thrift.TBase<addSpecialDealList_args, addSpecialDealList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialDealList_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIAL_DEAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDealList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSpecialDealList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSpecialDealList_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public List<TSpecialDealValue> specialDealList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      SPECIAL_DEAL_LIST((short)2, "specialDealList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SPECIAL_DEAL_LIST
            return SPECIAL_DEAL_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.SPECIAL_DEAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("specialDealList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialDealList_args.class, metaDataMap);
    }

    public addSpecialDealList_args() {
    }

    public addSpecialDealList_args(
      com.bliss.service.thrift.OpAuth auth,
      List<TSpecialDealValue> specialDealList)
    {
      this();
      this.auth = auth;
      this.specialDealList = specialDealList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialDealList_args(addSpecialDealList_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetSpecialDealList()) {
        List<TSpecialDealValue> __this__specialDealList = new ArrayList<TSpecialDealValue>();
        for (TSpecialDealValue other_element : other.specialDealList) {
          __this__specialDealList.add(new TSpecialDealValue(other_element));
        }
        this.specialDealList = __this__specialDealList;
      }
    }

    public addSpecialDealList_args deepCopy() {
      return new addSpecialDealList_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.specialDealList = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public addSpecialDealList_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getSpecialDealListSize() {
      return (this.specialDealList == null) ? 0 : this.specialDealList.size();
    }

    public java.util.Iterator<TSpecialDealValue> getSpecialDealListIterator() {
      return (this.specialDealList == null) ? null : this.specialDealList.iterator();
    }

    public void addToSpecialDealList(TSpecialDealValue elem) {
      if (this.specialDealList == null) {
        this.specialDealList = new ArrayList<TSpecialDealValue>();
      }
      this.specialDealList.add(elem);
    }

    public List<TSpecialDealValue> getSpecialDealList() {
      return this.specialDealList;
    }

    public addSpecialDealList_args setSpecialDealList(List<TSpecialDealValue> specialDealList) {
      this.specialDealList = specialDealList;
      return this;
    }

    public void unsetSpecialDealList() {
      this.specialDealList = null;
    }

    /** Returns true if field specialDealList is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecialDealList() {
      return this.specialDealList != null;
    }

    public void setSpecialDealListIsSet(boolean value) {
      if (!value) {
        this.specialDealList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case SPECIAL_DEAL_LIST:
        if (value == null) {
          unsetSpecialDealList();
        } else {
          setSpecialDealList((List<TSpecialDealValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SPECIAL_DEAL_LIST:
        return getSpecialDealList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SPECIAL_DEAL_LIST:
        return isSetSpecialDealList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialDealList_args)
        return this.equals((addSpecialDealList_args)that);
      return false;
    }

    public boolean equals(addSpecialDealList_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_specialDealList = true && this.isSetSpecialDealList();
      boolean that_present_specialDealList = true && that.isSetSpecialDealList();
      if (this_present_specialDealList || that_present_specialDealList) {
        if (!(this_present_specialDealList && that_present_specialDealList))
          return false;
        if (!this.specialDealList.equals(that.specialDealList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSpecialDealList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSpecialDealList_args typedOther = (addSpecialDealList_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecialDealList()).compareTo(typedOther.isSetSpecialDealList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecialDealList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDealList, typedOther.specialDealList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialDealList_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specialDealList:");
      if (this.specialDealList == null) {
        sb.append("null");
      } else {
        sb.append(this.specialDealList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialDealList_argsStandardSchemeFactory implements SchemeFactory {
      public addSpecialDealList_argsStandardScheme getScheme() {
        return new addSpecialDealList_argsStandardScheme();
      }
    }

    private static class addSpecialDealList_argsStandardScheme extends StandardScheme<addSpecialDealList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialDealList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIAL_DEAL_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.specialDealList = new ArrayList<TSpecialDealValue>(_list66.size);
                  for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                  {
                    TSpecialDealValue _elem68; // required
                    _elem68 = new TSpecialDealValue();
                    _elem68.read(iprot);
                    struct.specialDealList.add(_elem68);
                  }
                  iprot.readListEnd();
                }
                struct.setSpecialDealListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialDealList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specialDealList != null) {
          oprot.writeFieldBegin(SPECIAL_DEAL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.specialDealList.size()));
            for (TSpecialDealValue _iter69 : struct.specialDealList)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialDealList_argsTupleSchemeFactory implements SchemeFactory {
      public addSpecialDealList_argsTupleScheme getScheme() {
        return new addSpecialDealList_argsTupleScheme();
      }
    }

    private static class addSpecialDealList_argsTupleScheme extends TupleScheme<addSpecialDealList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialDealList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSpecialDealList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSpecialDealList()) {
          {
            oprot.writeI32(struct.specialDealList.size());
            for (TSpecialDealValue _iter70 : struct.specialDealList)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialDealList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.specialDealList = new ArrayList<TSpecialDealValue>(_list71.size);
            for (int _i72 = 0; _i72 < _list71.size; ++_i72)
            {
              TSpecialDealValue _elem73; // required
              _elem73 = new TSpecialDealValue();
              _elem73.read(iprot);
              struct.specialDealList.add(_elem73);
            }
          }
          struct.setSpecialDealListIsSet(true);
        }
      }
    }

  }

  public static class addSpecialDealList_result implements org.apache.thrift.TBase<addSpecialDealList_result, addSpecialDealList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSpecialDealList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSpecialDealList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSpecialDealList_resultTupleSchemeFactory());
    }

    public List<TSpecialDealValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSpecialDealList_result.class, metaDataMap);
    }

    public addSpecialDealList_result() {
    }

    public addSpecialDealList_result(
      List<TSpecialDealValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSpecialDealList_result(addSpecialDealList_result other) {
      if (other.isSetSuccess()) {
        List<TSpecialDealValue> __this__success = new ArrayList<TSpecialDealValue>();
        for (TSpecialDealValue other_element : other.success) {
          __this__success.add(new TSpecialDealValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public addSpecialDealList_result deepCopy() {
      return new addSpecialDealList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TSpecialDealValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TSpecialDealValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TSpecialDealValue>();
      }
      this.success.add(elem);
    }

    public List<TSpecialDealValue> getSuccess() {
      return this.success;
    }

    public addSpecialDealList_result setSuccess(List<TSpecialDealValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TSpecialDealValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSpecialDealList_result)
        return this.equals((addSpecialDealList_result)that);
      return false;
    }

    public boolean equals(addSpecialDealList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSpecialDealList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSpecialDealList_result typedOther = (addSpecialDealList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSpecialDealList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSpecialDealList_resultStandardSchemeFactory implements SchemeFactory {
      public addSpecialDealList_resultStandardScheme getScheme() {
        return new addSpecialDealList_resultStandardScheme();
      }
    }

    private static class addSpecialDealList_resultStandardScheme extends StandardScheme<addSpecialDealList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSpecialDealList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<TSpecialDealValue>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    TSpecialDealValue _elem76; // required
                    _elem76 = new TSpecialDealValue();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSpecialDealList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TSpecialDealValue _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSpecialDealList_resultTupleSchemeFactory implements SchemeFactory {
      public addSpecialDealList_resultTupleScheme getScheme() {
        return new addSpecialDealList_resultTupleScheme();
      }
    }

    private static class addSpecialDealList_resultTupleScheme extends TupleScheme<addSpecialDealList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSpecialDealList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TSpecialDealValue _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSpecialDealList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TSpecialDealValue>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              TSpecialDealValue _elem81; // required
              _elem81 = new TSpecialDealValue();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSpecialDeal_args implements org.apache.thrift.TBase<getSpecialDeal_args, getSpecialDeal_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialDeal_args");

    private static final org.apache.thrift.protocol.TField SPECIAL_DEAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDealId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialDeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialDeal_argsTupleSchemeFactory());
    }

    public long specialDealId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPECIAL_DEAL_ID((short)1, "specialDealId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPECIAL_DEAL_ID
            return SPECIAL_DEAL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPECIALDEALID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPECIAL_DEAL_ID, new org.apache.thrift.meta_data.FieldMetaData("specialDealId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialDeal_args.class, metaDataMap);
    }

    public getSpecialDeal_args() {
    }

    public getSpecialDeal_args(
      long specialDealId)
    {
      this();
      this.specialDealId = specialDealId;
      setSpecialDealIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialDeal_args(getSpecialDeal_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.specialDealId = other.specialDealId;
    }

    public getSpecialDeal_args deepCopy() {
      return new getSpecialDeal_args(this);
    }

    @Override
    public void clear() {
      setSpecialDealIdIsSet(false);
      this.specialDealId = 0;
    }

    public long getSpecialDealId() {
      return this.specialDealId;
    }

    public getSpecialDeal_args setSpecialDealId(long specialDealId) {
      this.specialDealId = specialDealId;
      setSpecialDealIdIsSet(true);
      return this;
    }

    public void unsetSpecialDealId() {
      __isset_bit_vector.clear(__SPECIALDEALID_ISSET_ID);
    }

    /** Returns true if field specialDealId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecialDealId() {
      return __isset_bit_vector.get(__SPECIALDEALID_ISSET_ID);
    }

    public void setSpecialDealIdIsSet(boolean value) {
      __isset_bit_vector.set(__SPECIALDEALID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPECIAL_DEAL_ID:
        if (value == null) {
          unsetSpecialDealId();
        } else {
          setSpecialDealId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPECIAL_DEAL_ID:
        return Long.valueOf(getSpecialDealId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPECIAL_DEAL_ID:
        return isSetSpecialDealId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialDeal_args)
        return this.equals((getSpecialDeal_args)that);
      return false;
    }

    public boolean equals(getSpecialDeal_args that) {
      if (that == null)
        return false;

      boolean this_present_specialDealId = true;
      boolean that_present_specialDealId = true;
      if (this_present_specialDealId || that_present_specialDealId) {
        if (!(this_present_specialDealId && that_present_specialDealId))
          return false;
        if (this.specialDealId != that.specialDealId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialDeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialDeal_args typedOther = (getSpecialDeal_args)other;

      lastComparison = Boolean.valueOf(isSetSpecialDealId()).compareTo(typedOther.isSetSpecialDealId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecialDealId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDealId, typedOther.specialDealId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialDeal_args(");
      boolean first = true;

      sb.append("specialDealId:");
      sb.append(this.specialDealId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialDeal_argsStandardSchemeFactory implements SchemeFactory {
      public getSpecialDeal_argsStandardScheme getScheme() {
        return new getSpecialDeal_argsStandardScheme();
      }
    }

    private static class getSpecialDeal_argsStandardScheme extends StandardScheme<getSpecialDeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialDeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPECIAL_DEAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.specialDealId = iprot.readI64();
                struct.setSpecialDealIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialDeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPECIAL_DEAL_ID_FIELD_DESC);
        oprot.writeI64(struct.specialDealId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialDeal_argsTupleSchemeFactory implements SchemeFactory {
      public getSpecialDeal_argsTupleScheme getScheme() {
        return new getSpecialDeal_argsTupleScheme();
      }
    }

    private static class getSpecialDeal_argsTupleScheme extends TupleScheme<getSpecialDeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpecialDealId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpecialDealId()) {
          oprot.writeI64(struct.specialDealId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.specialDealId = iprot.readI64();
          struct.setSpecialDealIdIsSet(true);
        }
      }
    }

  }

  public static class getSpecialDeal_result implements org.apache.thrift.TBase<getSpecialDeal_result, getSpecialDeal_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecialDeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecialDeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecialDeal_resultTupleSchemeFactory());
    }

    public TSpecialDealValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecialDeal_result.class, metaDataMap);
    }

    public getSpecialDeal_result() {
    }

    public getSpecialDeal_result(
      TSpecialDealValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecialDeal_result(getSpecialDeal_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSpecialDealValue(other.success);
      }
    }

    public getSpecialDeal_result deepCopy() {
      return new getSpecialDeal_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSpecialDealValue getSuccess() {
      return this.success;
    }

    public getSpecialDeal_result setSuccess(TSpecialDealValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSpecialDealValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecialDeal_result)
        return this.equals((getSpecialDeal_result)that);
      return false;
    }

    public boolean equals(getSpecialDeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecialDeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecialDeal_result typedOther = (getSpecialDeal_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecialDeal_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecialDeal_resultStandardSchemeFactory implements SchemeFactory {
      public getSpecialDeal_resultStandardScheme getScheme() {
        return new getSpecialDeal_resultStandardScheme();
      }
    }

    private static class getSpecialDeal_resultStandardScheme extends StandardScheme<getSpecialDeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecialDeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSpecialDealValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecialDeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecialDeal_resultTupleSchemeFactory implements SchemeFactory {
      public getSpecialDeal_resultTupleScheme getScheme() {
        return new getSpecialDeal_resultTupleScheme();
      }
    }

    private static class getSpecialDeal_resultTupleScheme extends TupleScheme<getSpecialDeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TSpecialDealValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSpecialDeal_args implements org.apache.thrift.TBase<updateSpecialDeal_args, updateSpecialDeal_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpecialDeal_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIAL_DEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDeal", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpecialDeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpecialDeal_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TSpecialDealValue specialDeal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      SPECIAL_DEAL((short)2, "specialDeal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SPECIAL_DEAL
            return SPECIAL_DEAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.SPECIAL_DEAL, new org.apache.thrift.meta_data.FieldMetaData("specialDeal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpecialDealValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpecialDeal_args.class, metaDataMap);
    }

    public updateSpecialDeal_args() {
    }

    public updateSpecialDeal_args(
      com.bliss.service.thrift.OpAuth auth,
      TSpecialDealValue specialDeal)
    {
      this();
      this.auth = auth;
      this.specialDeal = specialDeal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpecialDeal_args(updateSpecialDeal_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetSpecialDeal()) {
        this.specialDeal = new TSpecialDealValue(other.specialDeal);
      }
    }

    public updateSpecialDeal_args deepCopy() {
      return new updateSpecialDeal_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.specialDeal = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updateSpecialDeal_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TSpecialDealValue getSpecialDeal() {
      return this.specialDeal;
    }

    public updateSpecialDeal_args setSpecialDeal(TSpecialDealValue specialDeal) {
      this.specialDeal = specialDeal;
      return this;
    }

    public void unsetSpecialDeal() {
      this.specialDeal = null;
    }

    /** Returns true if field specialDeal is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecialDeal() {
      return this.specialDeal != null;
    }

    public void setSpecialDealIsSet(boolean value) {
      if (!value) {
        this.specialDeal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case SPECIAL_DEAL:
        if (value == null) {
          unsetSpecialDeal();
        } else {
          setSpecialDeal((TSpecialDealValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SPECIAL_DEAL:
        return getSpecialDeal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SPECIAL_DEAL:
        return isSetSpecialDeal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpecialDeal_args)
        return this.equals((updateSpecialDeal_args)that);
      return false;
    }

    public boolean equals(updateSpecialDeal_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_specialDeal = true && this.isSetSpecialDeal();
      boolean that_present_specialDeal = true && that.isSetSpecialDeal();
      if (this_present_specialDeal || that_present_specialDeal) {
        if (!(this_present_specialDeal && that_present_specialDeal))
          return false;
        if (!this.specialDeal.equals(that.specialDeal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSpecialDeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSpecialDeal_args typedOther = (updateSpecialDeal_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecialDeal()).compareTo(typedOther.isSetSpecialDeal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecialDeal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDeal, typedOther.specialDeal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpecialDeal_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specialDeal:");
      if (this.specialDeal == null) {
        sb.append("null");
      } else {
        sb.append(this.specialDeal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpecialDeal_argsStandardSchemeFactory implements SchemeFactory {
      public updateSpecialDeal_argsStandardScheme getScheme() {
        return new updateSpecialDeal_argsStandardScheme();
      }
    }

    private static class updateSpecialDeal_argsStandardScheme extends StandardScheme<updateSpecialDeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpecialDeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIAL_DEAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specialDeal = new TSpecialDealValue();
                struct.specialDeal.read(iprot);
                struct.setSpecialDealIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpecialDeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.specialDeal != null) {
          oprot.writeFieldBegin(SPECIAL_DEAL_FIELD_DESC);
          struct.specialDeal.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpecialDeal_argsTupleSchemeFactory implements SchemeFactory {
      public updateSpecialDeal_argsTupleScheme getScheme() {
        return new updateSpecialDeal_argsTupleScheme();
      }
    }

    private static class updateSpecialDeal_argsTupleScheme extends TupleScheme<updateSpecialDeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSpecialDeal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSpecialDeal()) {
          struct.specialDeal.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpecialDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.specialDeal = new TSpecialDealValue();
          struct.specialDeal.read(iprot);
          struct.setSpecialDealIsSet(true);
        }
      }
    }

  }

  public static class updateSpecialDeal_result implements org.apache.thrift.TBase<updateSpecialDeal_result, updateSpecialDeal_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpecialDeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpecialDeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpecialDeal_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpecialDeal_result.class, metaDataMap);
    }

    public updateSpecialDeal_result() {
    }

    public updateSpecialDeal_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpecialDeal_result(updateSpecialDeal_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateSpecialDeal_result deepCopy() {
      return new updateSpecialDeal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateSpecialDeal_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpecialDeal_result)
        return this.equals((updateSpecialDeal_result)that);
      return false;
    }

    public boolean equals(updateSpecialDeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSpecialDeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSpecialDeal_result typedOther = (updateSpecialDeal_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpecialDeal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpecialDeal_resultStandardSchemeFactory implements SchemeFactory {
      public updateSpecialDeal_resultStandardScheme getScheme() {
        return new updateSpecialDeal_resultStandardScheme();
      }
    }

    private static class updateSpecialDeal_resultStandardScheme extends StandardScheme<updateSpecialDeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpecialDeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpecialDeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpecialDeal_resultTupleSchemeFactory implements SchemeFactory {
      public updateSpecialDeal_resultTupleScheme getScheme() {
        return new updateSpecialDeal_resultTupleScheme();
      }
    }

    private static class updateSpecialDeal_resultTupleScheme extends TupleScheme<updateSpecialDeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpecialDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSpecialDealStatus_args implements org.apache.thrift.TBase<updateSpecialDealStatus_args, updateSpecialDealStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpecialDealStatus_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPECIAL_DEAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDealId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpecialDealStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpecialDealStatus_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public long specialDealId; // required
    /**
     * 
     * @see EStatus
     */
    public EStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      SPECIAL_DEAL_ID((short)2, "specialDealId"),
      /**
       * 
       * @see EStatus
       */
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SPECIAL_DEAL_ID
            return SPECIAL_DEAL_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPECIALDEALID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.SPECIAL_DEAL_ID, new org.apache.thrift.meta_data.FieldMetaData("specialDealId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpecialDealStatus_args.class, metaDataMap);
    }

    public updateSpecialDealStatus_args() {
    }

    public updateSpecialDealStatus_args(
      com.bliss.service.thrift.OpAuth auth,
      long specialDealId,
      EStatus status)
    {
      this();
      this.auth = auth;
      this.specialDealId = specialDealId;
      setSpecialDealIdIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpecialDealStatus_args(updateSpecialDealStatus_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      this.specialDealId = other.specialDealId;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateSpecialDealStatus_args deepCopy() {
      return new updateSpecialDealStatus_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setSpecialDealIdIsSet(false);
      this.specialDealId = 0;
      this.status = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updateSpecialDealStatus_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public long getSpecialDealId() {
      return this.specialDealId;
    }

    public updateSpecialDealStatus_args setSpecialDealId(long specialDealId) {
      this.specialDealId = specialDealId;
      setSpecialDealIdIsSet(true);
      return this;
    }

    public void unsetSpecialDealId() {
      __isset_bit_vector.clear(__SPECIALDEALID_ISSET_ID);
    }

    /** Returns true if field specialDealId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecialDealId() {
      return __isset_bit_vector.get(__SPECIALDEALID_ISSET_ID);
    }

    public void setSpecialDealIdIsSet(boolean value) {
      __isset_bit_vector.set(__SPECIALDEALID_ISSET_ID, value);
    }

    /**
     * 
     * @see EStatus
     */
    public EStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see EStatus
     */
    public updateSpecialDealStatus_args setStatus(EStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case SPECIAL_DEAL_ID:
        if (value == null) {
          unsetSpecialDealId();
        } else {
          setSpecialDealId((Long)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((EStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SPECIAL_DEAL_ID:
        return Long.valueOf(getSpecialDealId());

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SPECIAL_DEAL_ID:
        return isSetSpecialDealId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpecialDealStatus_args)
        return this.equals((updateSpecialDealStatus_args)that);
      return false;
    }

    public boolean equals(updateSpecialDealStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_specialDealId = true;
      boolean that_present_specialDealId = true;
      if (this_present_specialDealId || that_present_specialDealId) {
        if (!(this_present_specialDealId && that_present_specialDealId))
          return false;
        if (this.specialDealId != that.specialDealId)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSpecialDealStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSpecialDealStatus_args typedOther = (updateSpecialDealStatus_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpecialDealId()).compareTo(typedOther.isSetSpecialDealId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecialDealId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDealId, typedOther.specialDealId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpecialDealStatus_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specialDealId:");
      sb.append(this.specialDealId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpecialDealStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateSpecialDealStatus_argsStandardScheme getScheme() {
        return new updateSpecialDealStatus_argsStandardScheme();
      }
    }

    private static class updateSpecialDealStatus_argsStandardScheme extends StandardScheme<updateSpecialDealStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpecialDealStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECIAL_DEAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.specialDealId = iprot.readI64();
                struct.setSpecialDealIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = EStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpecialDealStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SPECIAL_DEAL_ID_FIELD_DESC);
        oprot.writeI64(struct.specialDealId);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpecialDealStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateSpecialDealStatus_argsTupleScheme getScheme() {
        return new updateSpecialDealStatus_argsTupleScheme();
      }
    }

    private static class updateSpecialDealStatus_argsTupleScheme extends TupleScheme<updateSpecialDealStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpecialDealStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSpecialDealId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSpecialDealId()) {
          oprot.writeI64(struct.specialDealId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpecialDealStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.specialDealId = iprot.readI64();
          struct.setSpecialDealIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = EStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateSpecialDealStatus_result implements org.apache.thrift.TBase<updateSpecialDealStatus_result, updateSpecialDealStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpecialDealStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpecialDealStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpecialDealStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpecialDealStatus_result.class, metaDataMap);
    }

    public updateSpecialDealStatus_result() {
    }

    public updateSpecialDealStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpecialDealStatus_result(updateSpecialDealStatus_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateSpecialDealStatus_result deepCopy() {
      return new updateSpecialDealStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateSpecialDealStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpecialDealStatus_result)
        return this.equals((updateSpecialDealStatus_result)that);
      return false;
    }

    public boolean equals(updateSpecialDealStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSpecialDealStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSpecialDealStatus_result typedOther = (updateSpecialDealStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpecialDealStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpecialDealStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateSpecialDealStatus_resultStandardScheme getScheme() {
        return new updateSpecialDealStatus_resultStandardScheme();
      }
    }

    private static class updateSpecialDealStatus_resultStandardScheme extends StandardScheme<updateSpecialDealStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpecialDealStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpecialDealStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpecialDealStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateSpecialDealStatus_resultTupleScheme getScheme() {
        return new updateSpecialDealStatus_resultTupleScheme();
      }
    }

    private static class updateSpecialDealStatus_resultTupleScheme extends TupleScheme<updateSpecialDealStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpecialDealStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpecialDealStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listUserPromotion_args implements org.apache.thrift.TBase<listUserPromotion_args, listUserPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPromotion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPromotion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPromotion_args.class, metaDataMap);
    }

    public listUserPromotion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPromotion_args(listUserPromotion_args other) {
    }

    public listUserPromotion_args deepCopy() {
      return new listUserPromotion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPromotion_args)
        return this.equals((listUserPromotion_args)that);
      return false;
    }

    public boolean equals(listUserPromotion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listUserPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listUserPromotion_args typedOther = (listUserPromotion_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPromotion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public listUserPromotion_argsStandardScheme getScheme() {
        return new listUserPromotion_argsStandardScheme();
      }
    }

    private static class listUserPromotion_argsStandardScheme extends StandardScheme<listUserPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public listUserPromotion_argsTupleScheme getScheme() {
        return new listUserPromotion_argsTupleScheme();
      }
    }

    private static class listUserPromotion_argsTupleScheme extends TupleScheme<listUserPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listUserPromotion_result implements org.apache.thrift.TBase<listUserPromotion_result, listUserPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserPromotion_resultTupleSchemeFactory());
    }

    public List<TUserPromotion> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserPromotion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserPromotion_result.class, metaDataMap);
    }

    public listUserPromotion_result() {
    }

    public listUserPromotion_result(
      List<TUserPromotion> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserPromotion_result(listUserPromotion_result other) {
      if (other.isSetSuccess()) {
        List<TUserPromotion> __this__success = new ArrayList<TUserPromotion>();
        for (TUserPromotion other_element : other.success) {
          __this__success.add(new TUserPromotion(other_element));
        }
        this.success = __this__success;
      }
    }

    public listUserPromotion_result deepCopy() {
      return new listUserPromotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TUserPromotion> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TUserPromotion elem) {
      if (this.success == null) {
        this.success = new ArrayList<TUserPromotion>();
      }
      this.success.add(elem);
    }

    public List<TUserPromotion> getSuccess() {
      return this.success;
    }

    public listUserPromotion_result setSuccess(List<TUserPromotion> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TUserPromotion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserPromotion_result)
        return this.equals((listUserPromotion_result)that);
      return false;
    }

    public boolean equals(listUserPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listUserPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listUserPromotion_result typedOther = (listUserPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserPromotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public listUserPromotion_resultStandardScheme getScheme() {
        return new listUserPromotion_resultStandardScheme();
      }
    }

    private static class listUserPromotion_resultStandardScheme extends StandardScheme<listUserPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<TUserPromotion>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    TUserPromotion _elem84; // required
                    _elem84 = new TUserPromotion();
                    _elem84.read(iprot);
                    struct.success.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TUserPromotion _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public listUserPromotion_resultTupleScheme getScheme() {
        return new listUserPromotion_resultTupleScheme();
      }
    }

    private static class listUserPromotion_resultTupleScheme extends TupleScheme<listUserPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TUserPromotion _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TUserPromotion>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              TUserPromotion _elem89; // required
              _elem89 = new TUserPromotion();
              _elem89.read(iprot);
              struct.success.add(_elem89);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addUserPromotion_args implements org.apache.thrift.TBase<addUserPromotion_args, addUserPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserPromotion_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_PROMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userPromotion", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserPromotion_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TUserPromotion userPromotion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      USER_PROMOTION((short)2, "userPromotion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // USER_PROMOTION
            return USER_PROMOTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.USER_PROMOTION, new org.apache.thrift.meta_data.FieldMetaData("userPromotion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserPromotion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserPromotion_args.class, metaDataMap);
    }

    public addUserPromotion_args() {
    }

    public addUserPromotion_args(
      com.bliss.service.thrift.OpAuth auth,
      TUserPromotion userPromotion)
    {
      this();
      this.auth = auth;
      this.userPromotion = userPromotion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserPromotion_args(addUserPromotion_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetUserPromotion()) {
        this.userPromotion = new TUserPromotion(other.userPromotion);
      }
    }

    public addUserPromotion_args deepCopy() {
      return new addUserPromotion_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.userPromotion = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public addUserPromotion_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TUserPromotion getUserPromotion() {
      return this.userPromotion;
    }

    public addUserPromotion_args setUserPromotion(TUserPromotion userPromotion) {
      this.userPromotion = userPromotion;
      return this;
    }

    public void unsetUserPromotion() {
      this.userPromotion = null;
    }

    /** Returns true if field userPromotion is set (has been assigned a value) and false otherwise */
    public boolean isSetUserPromotion() {
      return this.userPromotion != null;
    }

    public void setUserPromotionIsSet(boolean value) {
      if (!value) {
        this.userPromotion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case USER_PROMOTION:
        if (value == null) {
          unsetUserPromotion();
        } else {
          setUserPromotion((TUserPromotion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case USER_PROMOTION:
        return getUserPromotion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case USER_PROMOTION:
        return isSetUserPromotion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserPromotion_args)
        return this.equals((addUserPromotion_args)that);
      return false;
    }

    public boolean equals(addUserPromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_userPromotion = true && this.isSetUserPromotion();
      boolean that_present_userPromotion = true && that.isSetUserPromotion();
      if (this_present_userPromotion || that_present_userPromotion) {
        if (!(this_present_userPromotion && that_present_userPromotion))
          return false;
        if (!this.userPromotion.equals(that.userPromotion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addUserPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addUserPromotion_args typedOther = (addUserPromotion_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserPromotion()).compareTo(typedOther.isSetUserPromotion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserPromotion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPromotion, typedOther.userPromotion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserPromotion_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userPromotion:");
      if (this.userPromotion == null) {
        sb.append("null");
      } else {
        sb.append(this.userPromotion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public addUserPromotion_argsStandardScheme getScheme() {
        return new addUserPromotion_argsStandardScheme();
      }
    }

    private static class addUserPromotion_argsStandardScheme extends StandardScheme<addUserPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_PROMOTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userPromotion = new TUserPromotion();
                struct.userPromotion.read(iprot);
                struct.setUserPromotionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userPromotion != null) {
          oprot.writeFieldBegin(USER_PROMOTION_FIELD_DESC);
          struct.userPromotion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public addUserPromotion_argsTupleScheme getScheme() {
        return new addUserPromotion_argsTupleScheme();
      }
    }

    private static class addUserPromotion_argsTupleScheme extends TupleScheme<addUserPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetUserPromotion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetUserPromotion()) {
          struct.userPromotion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userPromotion = new TUserPromotion();
          struct.userPromotion.read(iprot);
          struct.setUserPromotionIsSet(true);
        }
      }
    }

  }

  public static class addUserPromotion_result implements org.apache.thrift.TBase<addUserPromotion_result, addUserPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserPromotion_resultTupleSchemeFactory());
    }

    public TUserPromotion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserPromotion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserPromotion_result.class, metaDataMap);
    }

    public addUserPromotion_result() {
    }

    public addUserPromotion_result(
      TUserPromotion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserPromotion_result(addUserPromotion_result other) {
      if (other.isSetSuccess()) {
        this.success = new TUserPromotion(other.success);
      }
    }

    public addUserPromotion_result deepCopy() {
      return new addUserPromotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TUserPromotion getSuccess() {
      return this.success;
    }

    public addUserPromotion_result setSuccess(TUserPromotion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TUserPromotion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserPromotion_result)
        return this.equals((addUserPromotion_result)that);
      return false;
    }

    public boolean equals(addUserPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addUserPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addUserPromotion_result typedOther = (addUserPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserPromotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public addUserPromotion_resultStandardScheme getScheme() {
        return new addUserPromotion_resultStandardScheme();
      }
    }

    private static class addUserPromotion_resultStandardScheme extends StandardScheme<addUserPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TUserPromotion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public addUserPromotion_resultTupleScheme getScheme() {
        return new addUserPromotion_resultTupleScheme();
      }
    }

    private static class addUserPromotion_resultTupleScheme extends TupleScheme<addUserPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TUserPromotion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserPromotion_args implements org.apache.thrift.TBase<updateUserPromotion_args, updateUserPromotion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPromotion_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_PROMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userPromotion", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPromotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPromotion_argsTupleSchemeFactory());
    }

    public com.bliss.service.thrift.OpAuth auth; // required
    public TUserPromotion userPromotion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth"),
      USER_PROMOTION((short)2, "userPromotion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // USER_PROMOTION
            return USER_PROMOTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.service.thrift.OpAuth.class)));
      tmpMap.put(_Fields.USER_PROMOTION, new org.apache.thrift.meta_data.FieldMetaData("userPromotion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserPromotion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPromotion_args.class, metaDataMap);
    }

    public updateUserPromotion_args() {
    }

    public updateUserPromotion_args(
      com.bliss.service.thrift.OpAuth auth,
      TUserPromotion userPromotion)
    {
      this();
      this.auth = auth;
      this.userPromotion = userPromotion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPromotion_args(updateUserPromotion_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.bliss.service.thrift.OpAuth(other.auth);
      }
      if (other.isSetUserPromotion()) {
        this.userPromotion = new TUserPromotion(other.userPromotion);
      }
    }

    public updateUserPromotion_args deepCopy() {
      return new updateUserPromotion_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.userPromotion = null;
    }

    public com.bliss.service.thrift.OpAuth getAuth() {
      return this.auth;
    }

    public updateUserPromotion_args setAuth(com.bliss.service.thrift.OpAuth auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public TUserPromotion getUserPromotion() {
      return this.userPromotion;
    }

    public updateUserPromotion_args setUserPromotion(TUserPromotion userPromotion) {
      this.userPromotion = userPromotion;
      return this;
    }

    public void unsetUserPromotion() {
      this.userPromotion = null;
    }

    /** Returns true if field userPromotion is set (has been assigned a value) and false otherwise */
    public boolean isSetUserPromotion() {
      return this.userPromotion != null;
    }

    public void setUserPromotionIsSet(boolean value) {
      if (!value) {
        this.userPromotion = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.bliss.service.thrift.OpAuth)value);
        }
        break;

      case USER_PROMOTION:
        if (value == null) {
          unsetUserPromotion();
        } else {
          setUserPromotion((TUserPromotion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case USER_PROMOTION:
        return getUserPromotion();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case USER_PROMOTION:
        return isSetUserPromotion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPromotion_args)
        return this.equals((updateUserPromotion_args)that);
      return false;
    }

    public boolean equals(updateUserPromotion_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_userPromotion = true && this.isSetUserPromotion();
      boolean that_present_userPromotion = true && that.isSetUserPromotion();
      if (this_present_userPromotion || that_present_userPromotion) {
        if (!(this_present_userPromotion && that_present_userPromotion))
          return false;
        if (!this.userPromotion.equals(that.userPromotion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserPromotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserPromotion_args typedOther = (updateUserPromotion_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserPromotion()).compareTo(typedOther.isSetUserPromotion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserPromotion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPromotion, typedOther.userPromotion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPromotion_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userPromotion:");
      if (this.userPromotion == null) {
        sb.append("null");
      } else {
        sb.append(this.userPromotion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPromotion_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserPromotion_argsStandardScheme getScheme() {
        return new updateUserPromotion_argsStandardScheme();
      }
    }

    private static class updateUserPromotion_argsStandardScheme extends StandardScheme<updateUserPromotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPromotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.bliss.service.thrift.OpAuth();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_PROMOTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userPromotion = new TUserPromotion();
                struct.userPromotion.read(iprot);
                struct.setUserPromotionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPromotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userPromotion != null) {
          oprot.writeFieldBegin(USER_PROMOTION_FIELD_DESC);
          struct.userPromotion.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPromotion_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserPromotion_argsTupleScheme getScheme() {
        return new updateUserPromotion_argsTupleScheme();
      }
    }

    private static class updateUserPromotion_argsTupleScheme extends TupleScheme<updateUserPromotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetUserPromotion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetUserPromotion()) {
          struct.userPromotion.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPromotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.bliss.service.thrift.OpAuth();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userPromotion = new TUserPromotion();
          struct.userPromotion.read(iprot);
          struct.setUserPromotionIsSet(true);
        }
      }
    }

  }

  public static class updateUserPromotion_result implements org.apache.thrift.TBase<updateUserPromotion_result, updateUserPromotion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPromotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPromotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPromotion_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPromotion_result.class, metaDataMap);
    }

    public updateUserPromotion_result() {
    }

    public updateUserPromotion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPromotion_result(updateUserPromotion_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateUserPromotion_result deepCopy() {
      return new updateUserPromotion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateUserPromotion_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPromotion_result)
        return this.equals((updateUserPromotion_result)that);
      return false;
    }

    public boolean equals(updateUserPromotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserPromotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserPromotion_result typedOther = (updateUserPromotion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPromotion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPromotion_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserPromotion_resultStandardScheme getScheme() {
        return new updateUserPromotion_resultStandardScheme();
      }
    }

    private static class updateUserPromotion_resultStandardScheme extends StandardScheme<updateUserPromotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPromotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPromotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPromotion_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserPromotion_resultTupleScheme getScheme() {
        return new updateUserPromotion_resultTupleScheme();
      }
    }

    private static class updateUserPromotion_resultTupleScheme extends TupleScheme<updateUserPromotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPromotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listInvoice_args implements org.apache.thrift.TBase<listInvoice_args, listInvoice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoice_args");

    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoice_argsTupleSchemeFactory());
    }

    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM_DATE((short)1, "fromDate"),
      TO_DATE((short)2, "toDate"),
      PAGE((short)3, "page"),
      OFFSET((short)4, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM_DATE
            return FROM_DATE;
          case 2: // TO_DATE
            return TO_DATE;
          case 3: // PAGE
            return PAGE;
          case 4: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMDATE_ISSET_ID = 0;
    private static final int __TODATE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoice_args.class, metaDataMap);
    }

    public listInvoice_args() {
    }

    public listInvoice_args(
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoice_args(listInvoice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listInvoice_args deepCopy() {
      return new listInvoice_args(this);
    }

    @Override
    public void clear() {
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listInvoice_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listInvoice_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listInvoice_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listInvoice_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoice_args)
        return this.equals((listInvoice_args)that);
      return false;
    }

    public boolean equals(listInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoice_args typedOther = (listInvoice_args)other;

      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoice_args(");
      boolean first = true;

      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public listInvoice_argsStandardScheme getScheme() {
        return new listInvoice_argsStandardScheme();
      }
    }

    private static class listInvoice_argsStandardScheme extends StandardScheme<listInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public listInvoice_argsTupleScheme getScheme() {
        return new listInvoice_argsTupleScheme();
      }
    }

    private static class listInvoice_argsTupleScheme extends TupleScheme<listInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFromDate()) {
          optionals.set(0);
        }
        if (struct.isSetToDate()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listInvoice_result implements org.apache.thrift.TBase<listInvoice_result, listInvoice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoice_resultTupleSchemeFactory());
    }

    public List<TInvoiceValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoice_result.class, metaDataMap);
    }

    public listInvoice_result() {
    }

    public listInvoice_result(
      List<TInvoiceValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoice_result(listInvoice_result other) {
      if (other.isSetSuccess()) {
        List<TInvoiceValue> __this__success = new ArrayList<TInvoiceValue>();
        for (TInvoiceValue other_element : other.success) {
          __this__success.add(new TInvoiceValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listInvoice_result deepCopy() {
      return new listInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TInvoiceValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TInvoiceValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TInvoiceValue>();
      }
      this.success.add(elem);
    }

    public List<TInvoiceValue> getSuccess() {
      return this.success;
    }

    public listInvoice_result setSuccess(List<TInvoiceValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TInvoiceValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoice_result)
        return this.equals((listInvoice_result)that);
      return false;
    }

    public boolean equals(listInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoice_result typedOther = (listInvoice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public listInvoice_resultStandardScheme getScheme() {
        return new listInvoice_resultStandardScheme();
      }
    }

    private static class listInvoice_resultStandardScheme extends StandardScheme<listInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<TInvoiceValue>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    TInvoiceValue _elem92; // required
                    _elem92 = new TInvoiceValue();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TInvoiceValue _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public listInvoice_resultTupleScheme getScheme() {
        return new listInvoice_resultTupleScheme();
      }
    }

    private static class listInvoice_resultTupleScheme extends TupleScheme<listInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TInvoiceValue _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TInvoiceValue>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              TInvoiceValue _elem97; // required
              _elem97 = new TInvoiceValue();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listInvoiceByProductType_args implements org.apache.thrift.TBase<listInvoiceByProductType_args, listInvoiceByProductType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoiceByProductType_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoiceByProductType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoiceByProductType_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see EProductType
     */
    public EProductType productType; // required
    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see EProductType
       */
      PRODUCT_TYPE((short)1, "productType"),
      FROM_DATE((short)2, "fromDate"),
      TO_DATE((short)3, "toDate"),
      PAGE((short)4, "page"),
      OFFSET((short)5, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_TYPE
            return PRODUCT_TYPE;
          case 2: // FROM_DATE
            return FROM_DATE;
          case 3: // TO_DATE
            return TO_DATE;
          case 4: // PAGE
            return PAGE;
          case 5: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMDATE_ISSET_ID = 0;
    private static final int __TODATE_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private static final int __OFFSET_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EProductType.class)));
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoiceByProductType_args.class, metaDataMap);
    }

    public listInvoiceByProductType_args() {
    }

    public listInvoiceByProductType_args(
      EProductType productType,
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.productType = productType;
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoiceByProductType_args(listInvoiceByProductType_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetProductType()) {
        this.productType = other.productType;
      }
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listInvoiceByProductType_args deepCopy() {
      return new listInvoiceByProductType_args(this);
    }

    @Override
    public void clear() {
      this.productType = null;
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    /**
     * 
     * @see EProductType
     */
    public EProductType getProductType() {
      return this.productType;
    }

    /**
     * 
     * @see EProductType
     */
    public listInvoiceByProductType_args setProductType(EProductType productType) {
      this.productType = productType;
      return this;
    }

    public void unsetProductType() {
      this.productType = null;
    }

    /** Returns true if field productType is set (has been assigned a value) and false otherwise */
    public boolean isSetProductType() {
      return this.productType != null;
    }

    public void setProductTypeIsSet(boolean value) {
      if (!value) {
        this.productType = null;
      }
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listInvoiceByProductType_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listInvoiceByProductType_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listInvoiceByProductType_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listInvoiceByProductType_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_TYPE:
        if (value == null) {
          unsetProductType();
        } else {
          setProductType((EProductType)value);
        }
        break;

      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_TYPE:
        return getProductType();

      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_TYPE:
        return isSetProductType();
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoiceByProductType_args)
        return this.equals((listInvoiceByProductType_args)that);
      return false;
    }

    public boolean equals(listInvoiceByProductType_args that) {
      if (that == null)
        return false;

      boolean this_present_productType = true && this.isSetProductType();
      boolean that_present_productType = true && that.isSetProductType();
      if (this_present_productType || that_present_productType) {
        if (!(this_present_productType && that_present_productType))
          return false;
        if (!this.productType.equals(that.productType))
          return false;
      }

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoiceByProductType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoiceByProductType_args typedOther = (listInvoiceByProductType_args)other;

      lastComparison = Boolean.valueOf(isSetProductType()).compareTo(typedOther.isSetProductType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, typedOther.productType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoiceByProductType_args(");
      boolean first = true;

      sb.append("productType:");
      if (this.productType == null) {
        sb.append("null");
      } else {
        sb.append(this.productType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoiceByProductType_argsStandardSchemeFactory implements SchemeFactory {
      public listInvoiceByProductType_argsStandardScheme getScheme() {
        return new listInvoiceByProductType_argsStandardScheme();
      }
    }

    private static class listInvoiceByProductType_argsStandardScheme extends StandardScheme<listInvoiceByProductType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoiceByProductType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.productType = EProductType.findByValue(iprot.readI32());
                struct.setProductTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoiceByProductType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productType != null) {
          oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.productType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoiceByProductType_argsTupleSchemeFactory implements SchemeFactory {
      public listInvoiceByProductType_argsTupleScheme getScheme() {
        return new listInvoiceByProductType_argsTupleScheme();
      }
    }

    private static class listInvoiceByProductType_argsTupleScheme extends TupleScheme<listInvoiceByProductType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoiceByProductType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductType()) {
          optionals.set(0);
        }
        if (struct.isSetFromDate()) {
          optionals.set(1);
        }
        if (struct.isSetToDate()) {
          optionals.set(2);
        }
        if (struct.isSetPage()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetProductType()) {
          oprot.writeI32(struct.productType.getValue());
        }
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoiceByProductType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.productType = EProductType.findByValue(iprot.readI32());
          struct.setProductTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listInvoiceByProductType_result implements org.apache.thrift.TBase<listInvoiceByProductType_result, listInvoiceByProductType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoiceByProductType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoiceByProductType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoiceByProductType_resultTupleSchemeFactory());
    }

    public List<TInvoiceValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoiceByProductType_result.class, metaDataMap);
    }

    public listInvoiceByProductType_result() {
    }

    public listInvoiceByProductType_result(
      List<TInvoiceValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoiceByProductType_result(listInvoiceByProductType_result other) {
      if (other.isSetSuccess()) {
        List<TInvoiceValue> __this__success = new ArrayList<TInvoiceValue>();
        for (TInvoiceValue other_element : other.success) {
          __this__success.add(new TInvoiceValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listInvoiceByProductType_result deepCopy() {
      return new listInvoiceByProductType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TInvoiceValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TInvoiceValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TInvoiceValue>();
      }
      this.success.add(elem);
    }

    public List<TInvoiceValue> getSuccess() {
      return this.success;
    }

    public listInvoiceByProductType_result setSuccess(List<TInvoiceValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TInvoiceValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoiceByProductType_result)
        return this.equals((listInvoiceByProductType_result)that);
      return false;
    }

    public boolean equals(listInvoiceByProductType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoiceByProductType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoiceByProductType_result typedOther = (listInvoiceByProductType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoiceByProductType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoiceByProductType_resultStandardSchemeFactory implements SchemeFactory {
      public listInvoiceByProductType_resultStandardScheme getScheme() {
        return new listInvoiceByProductType_resultStandardScheme();
      }
    }

    private static class listInvoiceByProductType_resultStandardScheme extends StandardScheme<listInvoiceByProductType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoiceByProductType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<TInvoiceValue>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    TInvoiceValue _elem100; // required
                    _elem100 = new TInvoiceValue();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoiceByProductType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TInvoiceValue _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoiceByProductType_resultTupleSchemeFactory implements SchemeFactory {
      public listInvoiceByProductType_resultTupleScheme getScheme() {
        return new listInvoiceByProductType_resultTupleScheme();
      }
    }

    private static class listInvoiceByProductType_resultTupleScheme extends TupleScheme<listInvoiceByProductType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoiceByProductType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TInvoiceValue _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoiceByProductType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TInvoiceValue>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              TInvoiceValue _elem105; // required
              _elem105 = new TInvoiceValue();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listInvoiceByUser_args implements org.apache.thrift.TBase<listInvoiceByUser_args, listInvoiceByUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoiceByUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoiceByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoiceByUser_argsTupleSchemeFactory());
    }

    public long userId; // required
    public long fromDate; // required
    public long toDate; // required
    public int page; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      FROM_DATE((short)2, "fromDate"),
      TO_DATE((short)3, "toDate"),
      PAGE((short)4, "page"),
      OFFSET((short)5, "offset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // FROM_DATE
            return FROM_DATE;
          case 3: // TO_DATE
            return TO_DATE;
          case 4: // PAGE
            return PAGE;
          case 5: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __FROMDATE_ISSET_ID = 1;
    private static final int __TODATE_ISSET_ID = 2;
    private static final int __PAGE_ISSET_ID = 3;
    private static final int __OFFSET_ISSET_ID = 4;
    private BitSet __isset_bit_vector = new BitSet(5);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoiceByUser_args.class, metaDataMap);
    }

    public listInvoiceByUser_args() {
    }

    public listInvoiceByUser_args(
      long userId,
      long fromDate,
      long toDate,
      int page,
      int offset)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      this.toDate = toDate;
      setToDateIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoiceByUser_args(listInvoiceByUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
      this.fromDate = other.fromDate;
      this.toDate = other.toDate;
      this.page = other.page;
      this.offset = other.offset;
    }

    public listInvoiceByUser_args deepCopy() {
      return new listInvoiceByUser_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setFromDateIsSet(false);
      this.fromDate = 0;
      setToDateIsSet(false);
      this.toDate = 0;
      setPageIsSet(false);
      this.page = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public listInvoiceByUser_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public long getFromDate() {
      return this.fromDate;
    }

    public listInvoiceByUser_args setFromDate(long fromDate) {
      this.fromDate = fromDate;
      setFromDateIsSet(true);
      return this;
    }

    public void unsetFromDate() {
      __isset_bit_vector.clear(__FROMDATE_ISSET_ID);
    }

    /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
    public boolean isSetFromDate() {
      return __isset_bit_vector.get(__FROMDATE_ISSET_ID);
    }

    public void setFromDateIsSet(boolean value) {
      __isset_bit_vector.set(__FROMDATE_ISSET_ID, value);
    }

    public long getToDate() {
      return this.toDate;
    }

    public listInvoiceByUser_args setToDate(long toDate) {
      this.toDate = toDate;
      setToDateIsSet(true);
      return this;
    }

    public void unsetToDate() {
      __isset_bit_vector.clear(__TODATE_ISSET_ID);
    }

    /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
    public boolean isSetToDate() {
      return __isset_bit_vector.get(__TODATE_ISSET_ID);
    }

    public void setToDateIsSet(boolean value) {
      __isset_bit_vector.set(__TODATE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public listInvoiceByUser_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public listInvoiceByUser_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bit_vector.clear(__OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_bit_vector.get(__OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case FROM_DATE:
        if (value == null) {
          unsetFromDate();
        } else {
          setFromDate((Long)value);
        }
        break;

      case TO_DATE:
        if (value == null) {
          unsetToDate();
        } else {
          setToDate((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case FROM_DATE:
        return Long.valueOf(getFromDate());

      case TO_DATE:
        return Long.valueOf(getToDate());

      case PAGE:
        return Integer.valueOf(getPage());

      case OFFSET:
        return Integer.valueOf(getOffset());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case FROM_DATE:
        return isSetFromDate();
      case TO_DATE:
        return isSetToDate();
      case PAGE:
        return isSetPage();
      case OFFSET:
        return isSetOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoiceByUser_args)
        return this.equals((listInvoiceByUser_args)that);
      return false;
    }

    public boolean equals(listInvoiceByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_fromDate = true;
      boolean that_present_fromDate = true;
      if (this_present_fromDate || that_present_fromDate) {
        if (!(this_present_fromDate && that_present_fromDate))
          return false;
        if (this.fromDate != that.fromDate)
          return false;
      }

      boolean this_present_toDate = true;
      boolean that_present_toDate = true;
      if (this_present_toDate || that_present_toDate) {
        if (!(this_present_toDate && that_present_toDate))
          return false;
        if (this.toDate != that.toDate)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoiceByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoiceByUser_args typedOther = (listInvoiceByUser_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(typedOther.isSetFromDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, typedOther.fromDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToDate()).compareTo(typedOther.isSetToDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, typedOther.toDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoiceByUser_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromDate:");
      sb.append(this.fromDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toDate:");
      sb.append(this.toDate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoiceByUser_argsStandardSchemeFactory implements SchemeFactory {
      public listInvoiceByUser_argsStandardScheme getScheme() {
        return new listInvoiceByUser_argsStandardScheme();
      }
    }

    private static class listInvoiceByUser_argsStandardScheme extends StandardScheme<listInvoiceByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoiceByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromDate = iprot.readI64();
                struct.setFromDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TO_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toDate = iprot.readI64();
                struct.setToDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoiceByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeI64(struct.fromDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeI64(struct.toDate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoiceByUser_argsTupleSchemeFactory implements SchemeFactory {
      public listInvoiceByUser_argsTupleScheme getScheme() {
        return new listInvoiceByUser_argsTupleScheme();
      }
    }

    private static class listInvoiceByUser_argsTupleScheme extends TupleScheme<listInvoiceByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoiceByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetFromDate()) {
          optionals.set(1);
        }
        if (struct.isSetToDate()) {
          optionals.set(2);
        }
        if (struct.isSetPage()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetFromDate()) {
          oprot.writeI64(struct.fromDate);
        }
        if (struct.isSetToDate()) {
          oprot.writeI64(struct.toDate);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoiceByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromDate = iprot.readI64();
          struct.setFromDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toDate = iprot.readI64();
          struct.setToDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

  }

  public static class listInvoiceByUser_result implements org.apache.thrift.TBase<listInvoiceByUser_result, listInvoiceByUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInvoiceByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInvoiceByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInvoiceByUser_resultTupleSchemeFactory());
    }

    public List<TInvoiceValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInvoiceByUser_result.class, metaDataMap);
    }

    public listInvoiceByUser_result() {
    }

    public listInvoiceByUser_result(
      List<TInvoiceValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInvoiceByUser_result(listInvoiceByUser_result other) {
      if (other.isSetSuccess()) {
        List<TInvoiceValue> __this__success = new ArrayList<TInvoiceValue>();
        for (TInvoiceValue other_element : other.success) {
          __this__success.add(new TInvoiceValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public listInvoiceByUser_result deepCopy() {
      return new listInvoiceByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TInvoiceValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TInvoiceValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TInvoiceValue>();
      }
      this.success.add(elem);
    }

    public List<TInvoiceValue> getSuccess() {
      return this.success;
    }

    public listInvoiceByUser_result setSuccess(List<TInvoiceValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TInvoiceValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInvoiceByUser_result)
        return this.equals((listInvoiceByUser_result)that);
      return false;
    }

    public boolean equals(listInvoiceByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listInvoiceByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listInvoiceByUser_result typedOther = (listInvoiceByUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInvoiceByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInvoiceByUser_resultStandardSchemeFactory implements SchemeFactory {
      public listInvoiceByUser_resultStandardScheme getScheme() {
        return new listInvoiceByUser_resultStandardScheme();
      }
    }

    private static class listInvoiceByUser_resultStandardScheme extends StandardScheme<listInvoiceByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInvoiceByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.success = new ArrayList<TInvoiceValue>(_list106.size);
                  for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                  {
                    TInvoiceValue _elem108; // required
                    _elem108 = new TInvoiceValue();
                    _elem108.read(iprot);
                    struct.success.add(_elem108);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInvoiceByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TInvoiceValue _iter109 : struct.success)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInvoiceByUser_resultTupleSchemeFactory implements SchemeFactory {
      public listInvoiceByUser_resultTupleScheme getScheme() {
        return new listInvoiceByUser_resultTupleScheme();
      }
    }

    private static class listInvoiceByUser_resultTupleScheme extends TupleScheme<listInvoiceByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInvoiceByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TInvoiceValue _iter110 : struct.success)
            {
              _iter110.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInvoiceByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TInvoiceValue>(_list111.size);
            for (int _i112 = 0; _i112 < _list111.size; ++_i112)
            {
              TInvoiceValue _elem113; // required
              _elem113 = new TInvoiceValue();
              _elem113.read(iprot);
              struct.success.add(_elem113);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInvoice_args implements org.apache.thrift.TBase<getInvoice_args, getInvoice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInvoice_argsTupleSchemeFactory());
    }

    public long invoiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INVOICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInvoice_args.class, metaDataMap);
    }

    public getInvoice_args() {
    }

    public getInvoice_args(
      long invoiceId)
    {
      this();
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInvoice_args(getInvoice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.invoiceId = other.invoiceId;
    }

    public getInvoice_args deepCopy() {
      return new getInvoice_args(this);
    }

    @Override
    public void clear() {
      setInvoiceIdIsSet(false);
      this.invoiceId = 0;
    }

    public long getInvoiceId() {
      return this.invoiceId;
    }

    public getInvoice_args setInvoiceId(long invoiceId) {
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
      return this;
    }

    public void unsetInvoiceId() {
      __isset_bit_vector.clear(__INVOICEID_ISSET_ID);
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return __isset_bit_vector.get(__INVOICEID_ISSET_ID);
    }

    public void setInvoiceIdIsSet(boolean value) {
      __isset_bit_vector.set(__INVOICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return Long.valueOf(getInvoiceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInvoice_args)
        return this.equals((getInvoice_args)that);
      return false;
    }

    public boolean equals(getInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true;
      boolean that_present_invoiceId = true;
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (this.invoiceId != that.invoiceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInvoice_args typedOther = (getInvoice_args)other;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(typedOther.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, typedOther.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      sb.append(this.invoiceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public getInvoice_argsStandardScheme getScheme() {
        return new getInvoice_argsStandardScheme();
      }
    }

    private static class getInvoice_argsStandardScheme extends StandardScheme<getInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.invoiceId = iprot.readI64();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
        oprot.writeI64(struct.invoiceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public getInvoice_argsTupleScheme getScheme() {
        return new getInvoice_argsTupleScheme();
      }
    }

    private static class getInvoice_argsTupleScheme extends TupleScheme<getInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvoiceId()) {
          oprot.writeI64(struct.invoiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readI64();
          struct.setInvoiceIdIsSet(true);
        }
      }
    }

  }

  public static class getInvoice_result implements org.apache.thrift.TBase<getInvoice_result, getInvoice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInvoice_resultTupleSchemeFactory());
    }

    public TInvoiceValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInvoice_result.class, metaDataMap);
    }

    public getInvoice_result() {
    }

    public getInvoice_result(
      TInvoiceValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInvoice_result(getInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = new TInvoiceValue(other.success);
      }
    }

    public getInvoice_result deepCopy() {
      return new getInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TInvoiceValue getSuccess() {
      return this.success;
    }

    public getInvoice_result setSuccess(TInvoiceValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TInvoiceValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInvoice_result)
        return this.equals((getInvoice_result)that);
      return false;
    }

    public boolean equals(getInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInvoice_result typedOther = (getInvoice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public getInvoice_resultStandardScheme getScheme() {
        return new getInvoice_resultStandardScheme();
      }
    }

    private static class getInvoice_resultStandardScheme extends StandardScheme<getInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TInvoiceValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public getInvoice_resultTupleScheme getScheme() {
        return new getInvoice_resultTupleScheme();
      }
    }

    private static class getInvoice_resultTupleScheme extends TupleScheme<getInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TInvoiceValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reProcessInvoice_args implements org.apache.thrift.TBase<reProcessInvoice_args, reProcessInvoice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reProcessInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reProcessInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reProcessInvoice_argsTupleSchemeFactory());
    }

    public long invoiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INVOICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reProcessInvoice_args.class, metaDataMap);
    }

    public reProcessInvoice_args() {
    }

    public reProcessInvoice_args(
      long invoiceId)
    {
      this();
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reProcessInvoice_args(reProcessInvoice_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.invoiceId = other.invoiceId;
    }

    public reProcessInvoice_args deepCopy() {
      return new reProcessInvoice_args(this);
    }

    @Override
    public void clear() {
      setInvoiceIdIsSet(false);
      this.invoiceId = 0;
    }

    public long getInvoiceId() {
      return this.invoiceId;
    }

    public reProcessInvoice_args setInvoiceId(long invoiceId) {
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
      return this;
    }

    public void unsetInvoiceId() {
      __isset_bit_vector.clear(__INVOICEID_ISSET_ID);
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return __isset_bit_vector.get(__INVOICEID_ISSET_ID);
    }

    public void setInvoiceIdIsSet(boolean value) {
      __isset_bit_vector.set(__INVOICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return Long.valueOf(getInvoiceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reProcessInvoice_args)
        return this.equals((reProcessInvoice_args)that);
      return false;
    }

    public boolean equals(reProcessInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true;
      boolean that_present_invoiceId = true;
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (this.invoiceId != that.invoiceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reProcessInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reProcessInvoice_args typedOther = (reProcessInvoice_args)other;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(typedOther.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, typedOther.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reProcessInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      sb.append(this.invoiceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reProcessInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public reProcessInvoice_argsStandardScheme getScheme() {
        return new reProcessInvoice_argsStandardScheme();
      }
    }

    private static class reProcessInvoice_argsStandardScheme extends StandardScheme<reProcessInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reProcessInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.invoiceId = iprot.readI64();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reProcessInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
        oprot.writeI64(struct.invoiceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reProcessInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public reProcessInvoice_argsTupleScheme getScheme() {
        return new reProcessInvoice_argsTupleScheme();
      }
    }

    private static class reProcessInvoice_argsTupleScheme extends TupleScheme<reProcessInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reProcessInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvoiceId()) {
          oprot.writeI64(struct.invoiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reProcessInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readI64();
          struct.setInvoiceIdIsSet(true);
        }
      }
    }

  }

  public static class reProcessInvoice_result implements org.apache.thrift.TBase<reProcessInvoice_result, reProcessInvoice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reProcessInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reProcessInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reProcessInvoice_resultTupleSchemeFactory());
    }

    public TInvoiceValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reProcessInvoice_result.class, metaDataMap);
    }

    public reProcessInvoice_result() {
    }

    public reProcessInvoice_result(
      TInvoiceValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reProcessInvoice_result(reProcessInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = new TInvoiceValue(other.success);
      }
    }

    public reProcessInvoice_result deepCopy() {
      return new reProcessInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TInvoiceValue getSuccess() {
      return this.success;
    }

    public reProcessInvoice_result setSuccess(TInvoiceValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TInvoiceValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reProcessInvoice_result)
        return this.equals((reProcessInvoice_result)that);
      return false;
    }

    public boolean equals(reProcessInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reProcessInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reProcessInvoice_result typedOther = (reProcessInvoice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reProcessInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reProcessInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public reProcessInvoice_resultStandardScheme getScheme() {
        return new reProcessInvoice_resultStandardScheme();
      }
    }

    private static class reProcessInvoice_resultStandardScheme extends StandardScheme<reProcessInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reProcessInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TInvoiceValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reProcessInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reProcessInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public reProcessInvoice_resultTupleScheme getScheme() {
        return new reProcessInvoice_resultTupleScheme();
      }
    }

    private static class reProcessInvoice_resultTupleScheme extends TupleScheme<reProcessInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reProcessInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reProcessInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TInvoiceValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRefund_args implements org.apache.thrift.TBase<updateRefund_args, updateRefund_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefund_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefund_argsTupleSchemeFactory());
    }

    public long invoiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INVOICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefund_args.class, metaDataMap);
    }

    public updateRefund_args() {
    }

    public updateRefund_args(
      long invoiceId)
    {
      this();
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefund_args(updateRefund_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.invoiceId = other.invoiceId;
    }

    public updateRefund_args deepCopy() {
      return new updateRefund_args(this);
    }

    @Override
    public void clear() {
      setInvoiceIdIsSet(false);
      this.invoiceId = 0;
    }

    public long getInvoiceId() {
      return this.invoiceId;
    }

    public updateRefund_args setInvoiceId(long invoiceId) {
      this.invoiceId = invoiceId;
      setInvoiceIdIsSet(true);
      return this;
    }

    public void unsetInvoiceId() {
      __isset_bit_vector.clear(__INVOICEID_ISSET_ID);
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return __isset_bit_vector.get(__INVOICEID_ISSET_ID);
    }

    public void setInvoiceIdIsSet(boolean value) {
      __isset_bit_vector.set(__INVOICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return Long.valueOf(getInvoiceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefund_args)
        return this.equals((updateRefund_args)that);
      return false;
    }

    public boolean equals(updateRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true;
      boolean that_present_invoiceId = true;
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (this.invoiceId != that.invoiceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRefund_args typedOther = (updateRefund_args)other;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(typedOther.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, typedOther.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefund_args(");
      boolean first = true;

      sb.append("invoiceId:");
      sb.append(this.invoiceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefund_argsStandardSchemeFactory implements SchemeFactory {
      public updateRefund_argsStandardScheme getScheme() {
        return new updateRefund_argsStandardScheme();
      }
    }

    private static class updateRefund_argsStandardScheme extends StandardScheme<updateRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.invoiceId = iprot.readI64();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
        oprot.writeI64(struct.invoiceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefund_argsTupleSchemeFactory implements SchemeFactory {
      public updateRefund_argsTupleScheme getScheme() {
        return new updateRefund_argsTupleScheme();
      }
    }

    private static class updateRefund_argsTupleScheme extends TupleScheme<updateRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvoiceId()) {
          oprot.writeI64(struct.invoiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readI64();
          struct.setInvoiceIdIsSet(true);
        }
      }
    }

  }

  public static class updateRefund_result implements org.apache.thrift.TBase<updateRefund_result, updateRefund_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRefund_resultTupleSchemeFactory());
    }

    public TInvoiceValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInvoiceValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRefund_result.class, metaDataMap);
    }

    public updateRefund_result() {
    }

    public updateRefund_result(
      TInvoiceValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRefund_result(updateRefund_result other) {
      if (other.isSetSuccess()) {
        this.success = new TInvoiceValue(other.success);
      }
    }

    public updateRefund_result deepCopy() {
      return new updateRefund_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TInvoiceValue getSuccess() {
      return this.success;
    }

    public updateRefund_result setSuccess(TInvoiceValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TInvoiceValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRefund_result)
        return this.equals((updateRefund_result)that);
      return false;
    }

    public boolean equals(updateRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateRefund_result typedOther = (updateRefund_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRefund_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRefund_resultStandardSchemeFactory implements SchemeFactory {
      public updateRefund_resultStandardScheme getScheme() {
        return new updateRefund_resultStandardScheme();
      }
    }

    private static class updateRefund_resultStandardScheme extends StandardScheme<updateRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TInvoiceValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRefund_resultTupleSchemeFactory implements SchemeFactory {
      public updateRefund_resultTupleScheme getScheme() {
        return new updateRefund_resultTupleScheme();
      }
    }

    private static class updateRefund_resultTupleScheme extends TupleScheme<updateRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TInvoiceValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
